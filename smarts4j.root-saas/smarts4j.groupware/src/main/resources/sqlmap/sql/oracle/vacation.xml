<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="groupware.vacation">
	<sql id="chooseEmpType">
		<if test='empType != null and empType != "" and formType != null and formType != ""'>
  		 	 <choose>
				<when test='empType == "normal"'>
					<!-- AND #{year} <![CDATA[>=]]> EXTRACT(YEAR FROM TO_DATE(EnterDate, 'yyyy-mm-dd')) + 1  -->
		        </when>
				<when test='empType == "newEmp"'>
					AND #{year} = EXTRACT(YEAR FROM TO_DATE(EnterDate, 'yyyy-mm-dd'))
		        </when>
				<when test='empType == "newEmpForNine"'>
					<choose>
						<when test='formType == "notification1" or formType == "request" '>
						   AND #{year} = EXTRACT(YEAR FROM ADD_MONTHS(EnterDate, 9))
			            </when>
						<when test='formType == "notification2"'>
						   AND #{year} = EXTRACT(YEAR FROM ADD_MONTHS(EnterDate, 11) -1 )
						</when>
					</choose>
		        </when>
				<when test='empType == "newEmpForTwo"'>
					<choose>
						<when test='formType == "notification1" or formType == "request" '>
						   AND #{year} = EXTRACT(YEAR FROM ADD_MONTHS(EnterDate, 11))
			            </when>
						<when test='formType == "notification2"'>
						   AND #{year} =  EXTRACT(YEAR FROM ADD_MONTHS(EnterDate, 12) -11 )
						</when>
					</choose>
		        </when>
			</choose>
  		 </if>
	</sql>

	<select id="selectVacationDayList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationDayList */
		SELECT  UR_Code AS "UR_Code"
	          , YEAR AS "YEAR"
	          , DeptName AS "DeptName"
	          , JobPositionName AS "JobPositionName"
	          , DisplayName AS "DisplayName"
	          , EnterDate AS "EnterDate"
	          , RetireDate AS "RetireDate"
			  , CompanyCode AS "CompanyCode"
			  , ExpDateStart AS "ExpDateStart"
			  , ExpDateEnd AS "ExpDateEnd"
			  , UseStartDate AS "UseStartDate"
			  , UseEndDate AS "UseEndDate"
			  , RegisterCode AS "RegisterCode"
			  , Reason AS "Reason"
			  , CAST(VacDay AS FLOAT) AS "VacDay"
			  , CAST(UseVacDay AS FLOAT) AS "UseVacDay"
		  	  , CAST(VacDay - UseVacDay AS FLOAT) AS "RemainVacDay"
			  , CAST(LastVacDay AS FLOAT) AS "LastVacDay"
			  , CAST(LongVacDay AS FLOAT) AS "LongVacDay"
		FROM (
			SELECT  A.UR_Code
		          , A.YEAR
		          , CAST(TO_CHAR(A.VacDay, 'fm90.000') AS FLOAT) AS VacDay
		          , Fn_BaseGetDictionary_S(#{lang}, B.MultiDeptName) AS DeptName
				  , Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
				  , Fn_BaseGetDictionary_S(#{lang}, U.MultiDisplayName) AS DisplayName
		          , U.EnterDate
		          , U.RetireDate
				  , B.CompanyCode
				  , TO_CHAR(TO_DATE(A.UseStartDate, 'YYYY-MM-DD'), 'YY.MM.DD') AS ExpDateStart
				  , TO_CHAR(TO_DATE(A.UseEndDate, 'YYYY-MM-DD'), 'YY.MM.DD')   AS ExpDateEnd
				  , A.UseStartDate
				  , A.UseEndDate
				  , A.RegisterCode
				   ,(SELECT NVL(SUM(u.VacDay), 0) 
					 FROM vm_vacationinfo_day u 
					LEFT JOIN SYS_BASE_CODE k ON  u.VacFlag =  k.CODE AND k.CodeGroup = 'VACATION_TYPE' AND k.IsUse ='Y'	AND k.DomainID = #{domainID}						AND k.Reserved1 ='+' 
					LEFT JOIN SYS_BASE_CODE t ON  k.ReservedInt = t.CodeID
				    WHERE A.ur_code = u.UR_Code AND u.VacDate BETWEEN to_char(to_date(A.UseStartDate, 'yyyy-mm-dd'), 'yyyy-mm-dd') AND  to_char(to_date(A.UseEndDate , 'yyyy-mm-dd'), 'yyyy-mm-dd')
					  AND A.VacKind = t.Code)	AS UseVacDay
				  , A.VmComment  AS Reason
				  , A.LastVacDay
				  , A.LongVacDay
				  , row_number() over(ORDER BY 
				<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
							<choose>
								<when test='sortColumn.equalsIgnoreCase("DeptName")'>B.MultiDeptName</when>
								<when test='sortColumn.equalsIgnoreCase("DisplayName")'>U.MultiDisplayName</when>
								<when test='sortColumn.equalsIgnoreCase("EnterDate")'>U.EnterDate</when>
								<when test='sortColumn.equalsIgnoreCase("JobPositionName")'>B.MultiJobPositionName</when>
								<when test='sortColumn.equalsIgnoreCase("ExpDate")'>A.UseStartDate</when>
								<when test='sortColumn.equalsIgnoreCase("VacDay")'>A.VacDay</when>
								<otherwise>JobPositionSortKey</otherwise>
							</choose>
							<choose>
								<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
								<otherwise> DESC</otherwise>
							</choose>
				</if>
				<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
					JobPositionSortKey
				</if>
					) RNUM		
				  FROM vm_vacationplan A
		 		INNER JOIN sys_object_user U ON  EnterDate is not null AND A.UR_Code = U.UserCode
				INNER JOIN sys_object_user_basegroup B ON U.UserCode = b.UserCode AND JobType = 'Origin'	
			    WHERE YEAR = #{year}
				<if test='domainCode != null and domainCode !=""'>
					AND B.CompanyCode = #{domainCode}
				</if>
				and A.VacKind='PUBLIC'
				<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
					<choose>
						<when test='schTypeSel == "deptName"'>
							AND B.DeptName  LIKE '%' || #{schTxt} || '%'
						</when>
						<otherwise>
							AND DisplayName  LIKE '%' || #{schTxt} || '%'
						</otherwise>
					</choose>
				</if>
				<if test='schEmploySel != null and schEmploySel != ""'>
					<choose>
						<when test='schEmploySel == "INOFFICE"'>
							AND U.RetireDate IS NULL
							AND B.DeptCode NOT LIKE '%RetireDept'
						</when>
						<otherwise> <!-- RETIRE -->
							AND U.RetireDate IS NOT NULL
						</otherwise>
					</choose>
				</if>
				<if test='urCode != null and urCode !=""'>
					AND A.UR_CODE = #{urCode}
				</if>
			<trim prefix="ORDER BY"  prefixOverrides =",">
				<choose>
					<when test="orgOrders != null and orgOrders != '' ">
					  	<foreach collection="orgOrders" item="orgOrder" separator=",">
					  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
					  			B.JobTitleSortKey ASC
					  		</if>
					  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
					  			B.JobLevelSortKey ASC
					  		</if>
					  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
					  			B.JobPositionSortKey ASC
					  		</if>
			  				<if test="orgOrder != null and orgOrder == 'DN'">
					  			DisplayName ASC
					  		</if>
					  	</foreach>
					  	, B.SortKey ASC
				  	</when>
				</choose>
			</trim>
				) A
				
		<if test='pageSize != null and pageOffset != null'>
			<include refid="oracle.include.pagingRow"/>		
			order by rnum asc
		</if>
	</select>
	
	<select id="selectVacationDayListCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationDayListCnt */
		SELECT COUNT(*) as "cnt"
		  FROM vm_vacationplan A
		INNER JOIN sys_object_user U ON  EnterDate is not null AND A.UR_Code = U.UserCode
		INNER JOIN sys_object_user_basegroup B ON U.UserCode = b.UserCode AND JobType = 'Origin'	
	    WHERE YEAR = #{year}
		<if test='domainCode != null and domainCode !=""'>
			AND B.CompanyCode = #{domainCode}
		</if>
		and A.VacKind='PUBLIC'
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND B.DeptName  LIKE '%' || #{schTxt} || '%'
				</when>
				<otherwise>
					AND DisplayName  LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
		<if test='schEmploySel != null and schEmploySel != ""'>
			<choose>
				<when test='schEmploySel == "INOFFICE"'>
					AND U.RetireDate IS NULL
					AND B.DeptCode NOT LIKE '%RetireDept'
				</when>
				<otherwise> <!-- RETIRE -->
					AND U.RetireDate IS NOT NULL
				</otherwise>
			</choose>
		</if>
		<if test='urCode != null and urCode !=""'>
			AND A.UR_CODE = #{urCode}
		</if>
	</select>

	<select id="selectVacationDayListV2" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationDayListV2 */
	<include refid="oracle.include.pagingHeader"/>
		SELECT UR_Code AS "UR_Code"
			, YEAR AS "YEAR"
			, VacDay AS "VacDay"
			, DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
			, DisplayName AS "DisplayName"
			, EnterDate AS "EnterDate"
			, RetireDate AS "RetireDate"
			, CompanyCode AS "CompanyCode"
			, ExpDateStart AS "ExpDateStart"
			, ExpDateEnd AS "ExpDateEnd"
			, UseStartDate AS "UseStartDate"
			, UseEndDate AS "UseEndDate"
			, RegisterCode AS "RegisterCode"
			, UseVacDay AS "UseVacDay"
			, (VacDay - UseVacDay) AS "RemainVacDay"
			, Reason AS "Reason"
		FROM(
			SELECT A.UR_Code
			, A.YEAR
			, cast(cast(TO_CHAR(A.VacDay, 'fm90.000') as DECIMAL(9,3)) as float) AS VacDay
			, B.DeptName
			, B.DeptCode
			, B.JobPositionName
			, B.JobPositionSortKey
			, B.SortKey
			, B.DisplayName
			, B.EnterDate
			, B.RetireDate
			, B.CompanyCode
			, TO_CHAR(TO_DATE(A.UseStartDate,'YYYYMMDD'),'YYYY.MM.DD') AS ExpDateStart
			, TO_CHAR(TO_DATE(A.UseEndDate,'YYYYMMDD'),'YYYY.MM.DD') AS ExpDateEnd
			, A.UseStartDate
			, A.UseEndDate
			, A.RegisterCode
			, (SELECT NVL(SUM(VacDay), 0)
					FROM VM_VACATIONINFO
					WHERE TO_DATE(Sdate,'YYYY-MM-DD') between TO_DATE(A.UseStartDate,'YYYYMMDD') and TO_DATE(A.UseEndDate,'YYYYMMDD')
					AND TO_DATE(Edate,'YYYY-MM-DD') between TO_DATE(A.UseStartDate,'YYYYMMDD') and TO_DATE(A.UseEndDate,'YYYYMMDD')
					AND UR_Code = A.UR_Code
					AND GUBUN in ('VACATION_APPLY','VACATION_PUBLIC','VACATION_CANCEL','VACATION_PUBLIC_CANCEL')
					AND VacFlag IN (SELECT A.Code
					FROM ( SELECT *
					FROM SYS_BASE_CODE
					WHERE CodeGroup = 'VACATION_TYPE'
					AND IsUse = 'Y'
					AND Reserved1 = '+'
					AND DomainID = #{domainID}
					<!--AND (Reserved2 is null or Reserved2 = '')-->
				) A,
				( SELECT *
					FROM SYS_BASE_CODE
					WHERE CodeGroup = 'VACATION_KIND'
					AND IsUse = 'Y'
					AND DomainID = 0
					AND Code = 'PUBLIC'
				) B
				WHERE A.ReservedInt = B.CodeID
			)
			) AS UseVacDay
			, A.VmComment AS Reason
			FROM vm_vacationplan A
			INNER JOIN (
				SELECT A.UserCode
					, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
					, A.EnterDate
					, A.RetireDate
					, A.SortKey
					, B.CompanyCode
					, B.DeptCode
					, Fn_BaseGetDictionary_S(#{lang},NVL(B.DeptName, B.MultiDeptName)) AS DeptName
					, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
					, B.JobPositionSortKey
					, A.TargetYear
				FROM (select UserCode, EnterDate, MultiDisplayName, RetireDate, SortKey
						, CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]> TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
							EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
						ELSE
							EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR)) END AS TargetYear
					from sys_object_user  where EnterDate is not null
				) A
				INNER JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'

				<if test='domainCode != null and domainCode !=""'>
					WHERE B.CompanyCode = #{domainCode}
				</if>
			) B ON A.UR_Code = B.UserCode
				and A.year = B.TargetYear
				and A.VacKind='PUBLIC'
		) TBL
			WHERE 1=1
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "deptName"'>
						AND DeptName LIKE '%' || #{schTxt} || '%'
					</when>
					<otherwise>
						AND DisplayName LIKE '%' || #{schTxt} || '%'
					</otherwise>
				</choose>
			</if>
			<if test='schEmploySel != null and schEmploySel != ""'>
				<choose>
					<when test='schEmploySel == "INOFFICE"'>
						AND RetireDate IS NULL
						AND DeptCode NOT LIKE '%RetireDept'
					</when>
					<otherwise> <!-- RETIRE -->
						AND (RetireDate != '' OR RetireDate IS NOT NULL)
						AND EXTRACT(YEAR FROM TO_DATE(RetireDate)) = #{year}
					</otherwise>
				</choose>
			</if>
			<if test='urCode != null and urCode !=""'>
				AND UR_CODE = #{urCode}
			</if>
			<trim prefix='ORDER BY'>
				<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
					<choose>
						<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
						<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
						<when test='sortColumn.equalsIgnoreCase("EnterDate")'>EnterDate</when>
						<when test='sortColumn.equalsIgnoreCase("JobPositionName")'>JobPositionName</when>
						<otherwise>VacDay</otherwise>
					</choose>
					<choose>
						<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
						<otherwise> DESC</otherwise>
					</choose>
				</if>
				<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
					JobPositionSortKey, SortKey ASC
				</if>
			</trim>
		<include refid="oracle.include.pagingFooter"/>
	</select>

	<select id="selectVacationDayListCntV2" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationDayListCntV2 */
		SELECT COUNT(*) AS CNT
		FROM vm_vacationplan A
		INNER JOIN (
		SELECT A.UserCode
		, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
		, A.EnterDate
		, A.RetireDate
		, A.SortKey
		, B.CompanyCode
		, B.DeptCode
		, Fn_BaseGetDictionary_S(#{lang},NVL(B.DeptName, B.MultiDeptName)) AS DeptName
		, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
		, B.JobPositionSortKey
		, A.TargetYear
		FROM (select UserCode, EnterDate, MultiDisplayName, RetireDate, SortKey
		, CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]> TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
			EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
		ELSE
			EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR)) END AS TargetYear
		from sys_object_user where EnterDate is not null) A
		INNER JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'

		<if test='domainCode != null and domainCode !=""'>
			WHERE B.CompanyCode = #{domainCode}
		</if>
		) B ON A.UR_Code = B.UserCode
		and A.year = B.TargetYear
		and A.VacKind='PUBLIC'
		WHERE 1=1
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND B.DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
		<if test='schEmploySel != null and schEmploySel != ""'>
			<choose>
				<when test='schEmploySel == "INOFFICE"'>
					AND B.RetireDate IS NULL
					AND B.DeptCode NOT LIKE '%RetireDept'
				</when>
				<otherwise> <!-- RETIRE -->
					AND (B.RetireDate != '' OR B.RetireDate IS NOT NULL)
					AND EXTRACT(YEAR FROM TO_DATE(B.RetireDate)) = #{year}
				</otherwise>
			</choose>
		</if>
		<if test='urCode != null and urCode !=""'>
			AND A.UR_CODE = #{urCode}
		</if>
	</select>

  	<select id="selectVacationDayCnt" resultType="java.lang.Long">
  	/* groupware.vacation.selectVacationDayCnt */
		SELECT COUNT(UR_Code) as "cnt"
		FROM vm_vacationplan 
		WHERE YEAR = (TO_CHAR(SYSDATE, 'YYYY') + 1)
	</select>
	    
	<insert id="insertNextVacation" parameterType="cmap">
	/* groupware.vacation.insertNextVacation */
		INSERT
		  INTO vm_vacationplan (UR_Code, YEAR, VacDay
											)
	    VALUES 
        <foreach collection="vacationListVo.vacations" item="item" open="(" separator="),(" close=")">
        	#{item.urCode}, TO_CHAR(SYSDATE, 'YYYY'), #{item.vacDay}
        </foreach>
	</insert>
	
	<insert id="insertNextVacationByData" parameterType="cmap">
	/* groupware.vacation.insertNextVacationByData */
		INSERT
		  INTO vm_vacationplan ( UR_Code, YEAR, VacDay )
		SELECT A.UserCode, 
			   (TO_CHAR(SYSDATE, 'YYYY') + 1) AS year, 
			   Fn_GetVac(A.UserCode) AS vacDay 
		FROM sys_object_user A
		LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND B.JobType = 'Origin'
		WHERE IsUse = 'Y'
			AND A.IsDisplay = 'Y'
			AND A.IsHR = 'Y'
			AND B.CompanyCode = #{domainCode}
			AND A.EnterDate IS NOT NULL
		<!--  AND A.RetireDate IS NOT NULL -->
	</insert>
	
	<update id="updateVacDay" parameterType="cmap">
	/* groupware.vacation.updateVacDay */
		<selectKey keyProperty="LastVacDay" resultType="cmap" order="BEFORE">
			SELECT fn_GetLastVacDay(#{urCode}, #{year}, #{domainCode}) AS "LastVacDay" FROM dual
		</selectKey>
		UPDATE vm_vacationplan
			SET LongVacDay = #{vacDay} ,
		        LastVacDay = #{LastVacDay},
		        VacDay = #{vacDay} + #{LastVacDay} 
		WHERE UR_Code = #{urCode}
			AND YEAR = #{year}
		<if test='vacKind != null and vacKind !=""'>
			AND VacKind = #{vacKind}
		</if>
	</update>
	
	<update id="updateLastVacDay" parameterType="cmap">
	/* groupware.vacation.updateLastVacDay */
		<selectKey keyProperty="TargetYear,UseStartDate,UseEndDate,LastVacDay,BeforeVacDay,AfterVacDay" resultType="cmap" order="BEFORE">
			SELECT TargetYear AS "TargetYear", UseStartDate AS "UseStartDate", UseEndDate AS "UseEndDate"
			,fn_GetLastVacDay(#{urCode}, TargetYear ,DomainCode) AS "LastVacDay"
			,(select VacDay from vm_vacationplan where ur_code = #{urCode} and year = TargetYear and VacKind='PUBLIC') as "BeforeVacDay"
			,(select LongVacDay + fn_GetLastVacDay(#{urCode}, TargetYear , DomainCode) from vm_vacationplan where ur_code = #{urCode} and year = TargetYear and VacKind='PUBLIC') as "AfterVacDay"
			FROM (SELECT EXTRACT(YEAR FROM TO_DATE(CONCAT(year,'0101'),'YYYYMMDD') + (INTERVAL '1' YEAR)) AS TargetYear
			,TO_CHAR(TO_DATE(UseStartDate,'YYYYMMDD')+ (INTERVAL '1' YEAR ),'YYYYMMDD') AS UseStartDate
			,TO_CHAR(TO_DATE(UseEndDate,'YYYYMMDD')+ (INTERVAL '1' YEAR ),'YYYYMMDD') AS UseEndDate
			, (SELECT CompanyCode FROM sys_object_user_basegroup WHERE UserCode = #{urCode} AND JobType = 'Origin') AS DomainCode
			FROM vm_vacationplan 
			WHERE ur_code= #{urCode} 
			AND #{sDate} BETWEEN UseStartDate AND UseEndDate
			AND VacKind='PUBLIC')
		</selectKey>
		UPDATE vm_vacationplan
		   SET LastVacDay = #{LastVacDay} ,
		       VacDay = LongVacDay + #{LastVacDay}
		 WHERE UR_Code = #{urCode}
		   AND YEAR = #{TargetYear}
			AND VacKind = 'PUBLIC'
	</update>

	<select id="selectVacPeriodCode" parameterType="cmap" resultType="java.lang.String">
	/* groupware.vacation.selectVacPeriodCode */
		SELECT
			CASE WHEN periodCode = ';;' THEN
				''
			ELSE
				periodCode
			END as periodCode
		FROM (
			SELECT ';'||LISTAGG(Code,';') WITHIN GROUP (ORDER BY SORTKEY)||';' as periodCode
			FROM sys_base_code
			WHERE CodeGroup = 'VacationPromotionPeriod'
			AND DomainID = #{domainID}
		)
	</select>

	<insert id="insertVacPeriodCode" parameterType="cmap">
	/* groupware.vacation.insertVacPeriodCode */
		<foreach item="item" index="index" collection="insertPeriodList">
			INSERT INTO sys_base_code (
				BizSection
				, DomainID
				, CodeGroup
				, Code
				, SortKey
				, IsUse
				, CodeName
				, MultiCodeName
				, Reserved1
				, Reserved2
				, Reserved3
				, ReservedInt
				, Description
				, RegisterCode
				, RegistDate
			)
			SELECT BizSection
				, #{domainID} AS DomainID
				, CodeGroup
				, Code
				, SortKey
				, IsUse
				, CodeName
				, MultiCodeName
				, #{item.StartDate} AS Reserved1
				, #{item.EndDate} AS Reserved2
				, Reserved3
				, ReservedInt
				, Description
				, #{registerCode} AS RegisterCode
				, SYSDATE AS RegistDate
			FROM sys_base_code
			WHERE CodeGroup = 'VacationPromotionPeriod'
			AND Code = #{item.Code}
			AND DomainID = 0;
		</foreach>
	</insert>

	<update id="updateVacPeriodCode" parameterType="cmap">
	/* groupware.vacation.updateVacPeriodCode */
		{	CALL
				DECLARE
				BEGIN
				<foreach item="item" index="index" collection="periodList">
					UPDATE sys_base_code
					SET Reserved1 = #{item.StartDate},
				   	    Reserved2 = #{item.EndDate},
				   	    ModifierCode = #{modifierCode},
				   	    ModifyDate = SYSDATE
					 WHERE CodeGroup = 'VacationPromotionPeriod'
					 AND Code = #{item.Code}
					 AND DomainID = #{domainID};
				</foreach>
			END
		}
	</update>	
	
	<select id="selectVacationInfoList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationInfoList */
		<include refid="oracle.include.pagingHeader"/>
	    SELECT VacationInfoID AS "VacationInfoID"
	         , UR_Code AS "UR_Code"
			 , DisplayName AS "DisplayName"
	         , UR_Name AS "UR_Name"
	         , APPDATE AS "APPDATE"
	         , ENDDATE AS "ENDDATE"
	         , GUBUN AS "GUBUN"
	         , GubunName AS "GubunName"
	         , VacYear AS "VacYear"
	         , Sdate AS "Sdate"
	         , Edate AS "Edate"
	         , VacFlag AS "VacFlag"
	         , VacOffFlag AS "VacOffFlag"
	         , VacFlagName AS "VacFlagName"
	         , VacDay AS "VacDay"
	         , Reason AS "Reason"
	         , WorkItemID AS "WorkItemID"
	         , ProcessID  AS "ProcessID"
			 , EXIST_APPROVAL_FORM  AS "EXIST_APPROVAL_FORM"
			 , EXIST_REQUEST_FORM  AS "EXIST_REQUEST_FORM"
			 , ReqTitle  AS "ReqTitle"
	         , DeptName AS "DeptName"
	         , VACTEXT AS "VACTEXT"
	    FROM (
			SELECT VacationInfoID
		         , A.UR_Code
				 , DisplayName
		         , UR_Name
		         , APPDATE
		         , ENDDATE
		         , GUBUN
				 , Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName) AS GubunName
		         , VacYear
		         , Sdate
		         , Edate
		         , VacFlag
		         , VacOffFlag
		         , D.CodeName AS VacFlagName
		         , cast(cast(TO_CHAR(VacDay, 'fm90.000') as DECIMAL(9,3)) as float) AS VacDay
		         , Reason
		         , WorkItemID
		         , A.ProcessID
				 , NVL(AR.ProcessID,0) AS EXIST_APPROVAL_FORM
				 , NVL(AR2.ReqSeq,0) AS EXIST_REQUEST_FORM
				 , NVL(AR2.ReqTitle,'') AS ReqTitle
		         , Fn_BaseGetDictionary_S(#{lang}, B.DeptName) AS DeptName
		         , (CASE WHEN (GUBUN = 'VACATION_CANCEL' OR GUBUN = 'VACATION_PUBLIC' OR GUBUN = 'VACATION_PUBLIC_CANCEL') 
	  			   		 THEN '(' || C.CodeName || ')' || D.CodeName
						 ELSE D.CodeName 
						  END
				   ) AS VACTEXT
			  FROM vm_vacationinfo A
				LEFT JOIN (	SELECT A.UserCode
							, B.CompanyCode
							, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
							, Fn_BaseGetDictionary_S(#{lang}, B.MultiDeptName) AS DeptName
							, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
							FROM sys_object_user A
							LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
		     			) B ON A.UR_Code = B.UserCode
				LEFT JOIN sys_base_code C ON A.GUBUN = C.Code AND C.CodeGroup = 'VACATION_GUBUN' AND C.DomainID =0
				LEFT JOIN sys_base_code D ON A.VacFlag = D.Code AND D.CodeGroup = 'VACATION_TYPE' AND D.DomainID =#{domainID}
				LEFT JOIN attend_request AR ON A.ProcessID = AR.ProcessID
				LEFT JOIN attend_request AR2 ON A.ProcessID = AR2.ReqSeq
				WHERE VacYear = #{year}
			 <if test='vacationInfoID != null and vacationInfoID !=""'>
				AND A.VacationInfoID = #{vacationInfoID}
			 </if>
			 <if test='domainCode != null and domainCode != ""'>
				AND B.Companycode = #{domainCode}
			 </if>
			 <if test='reqType != null and reqType !=""'>
				<choose>
					<when test='reqType == "vacationInsert" or reqType == "myVacation" or reqType == "vacationInfo"'>
					   AND A.UR_Code = #{urCode}
		            </when>
					<when test='reqType == "vacationCancel"'>
		            </when>
		            <otherwise>
					   AND (GUBUN ='VACATION_PUBLIC' OR GUBUN ='VACATION_PUBLIC_CANCEL')
		            </otherwise>
				</choose>
			 </if>
			 <if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "deptName"'>
					   AND DeptName LIKE '%' || #{schTxt} || '%'
		            </when>
		            <otherwise>
		               AND UR_Name LIKE '%' || #{schTxt} || '%'
		            </otherwise>
				</choose>
			 </if>
		 )B
		 <trim prefix='ORDER BY'>
			<if test='sortColumn != null and sortDirection != null'>
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("APPDATE")'>APPDATE</when>
					<when test='sortColumn.equalsIgnoreCase("ENDDATE")'>ENDDATE</when>
					<when test='sortColumn.equalsIgnoreCase("VacFlagName")'>VacFlagName</when>
					<when test='sortColumn.equalsIgnoreCase("VacYear")'>VacYear</when>
					<when test='sortColumn.equalsIgnoreCase("Sdate")'>Sdate</when>
					<when test='sortColumn.equalsIgnoreCase("Edate")'>Edate</when>
					<when test='sortColumn.equalsIgnoreCase("VacDay")'>VacDay</when>
					<when test='sortColumn.equalsIgnoreCase("Reason")'>Reason</when>
					<when test='sortColumn.equalsIgnoreCase("GubunName")'>GubunName</when>
					<when test='sortColumn.equalsIgnoreCase("VACTEXT")'>VACTEXT</when>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
					<otherwise>VacationInfoID</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
				<include refid="oracle.include.listOrderBy"/>
			</if>
		 </trim>
		<include refid="oracle.include.pagingFooter"/>	 
	</select>
	
	<select id="selectVacationInfoListCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationInfoListCnt */
		SELECT COUNT(VacationInfoID) as "cnt"
		  FROM vm_vacationinfo A
		  LEFT JOIN (SELECT A.UserCode
					, B.CompanyCode
					, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
					, Fn_BaseGetDictionary_S(#{lang}, B.MultiDeptName) AS DeptName
					, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
					FROM sys_object_user A
					LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
			) B
		  	ON A.UR_Code = B.UserCode
		 WHERE VacYear = #{year}
		<if test='vacationInfoID != null and vacationInfoID !=""'>
			AND A.VacationInfoID = #{vacationInfoID}
		</if>
		<if test='domainCode != null and domainCode != ""'>
			AND B.Companycode = #{domainCode}
		</if>
		 <if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
				   AND DeptName LIKE '%' || #{schTxt} || '%'
	            </when>
	            <otherwise>
	               AND UR_Name LIKE '%' || #{schTxt} || '%'
	            </otherwise>
			</choose>
		 </if>		 
		 <if test='reqType != null and reqType !=""'>
			<choose>
				<when test='reqType == "vacationInsert" or reqType == "myVacation" or reqType == "vacationInfo"'>
				   AND UR_Code = #{urCode}
	            </when>
				<when test='reqType == "vacationCancel"'>
	            </when>	            
	            <otherwise>
				   AND (GUBUN ='VACATION_PUBLIC' OR GUBUN ='VACATION_PUBLIC_CANCEL')
	            </otherwise>
			</choose>
		 </if>		  
	</select>
	
	<select id="selectMyVacationInfoList" parameterType="cmap" resultType="cmap">
		/* groupware.vacation.selectMyVacationInfoList */
		<include refid="oracle.include.pagingHeader"/>
		SELECT VacationInfoID "VacationInfoID"
			, APPDATE "APPDATE"
			, ENDDATE "ENDDATE"
			, GUBUN "GUBUN"
			, Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName) AS "GubunName"
			, VacYear "VacYear"
			, Sdate "Sdate"
			, Edate "Edate"
			, VacFlag "VacFlag"
			, VacOffFlag "VacOffFlag"
	         , cast(cast(TO_CHAR(e.VacDay, 'fm90.000') as DECIMAL(9,3)) as float) AS "VacDay"
			, Reason "Reason"
			, WorkItemID "WorkItemID"
			, e.ProcessID "ProcessID"
			, nvl(AR.ProcessID,0) AS "EXIST_APPROVAL_FORM"
			, nvl(AR2.ReqSeq,0) AS "EXIST_REQUEST_FORM"
			, nvl(AR2.ReqTitle,'') AS "ReqTitle"
			, (CASE WHEN (GUBUN = 'VACATION_CANCEL' OR GUBUN = 'VACATION_PUBLIC' OR GUBUN = 'VACATION_PUBLIC_CANCEL' )	
					THEN '('|| Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName)|| ')'|| Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)
					ELSE Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)
					END ) AS "VACTEXT"
		FROM vm_vacationplan A
		<if test="VacKind == 'PUBLIC'">
	   	LEFT JOIN SYS_BASE_CODE k ON  k.CodeGroup = 'VACATION_TYPE' AND k.IsUse ='Y'	AND k.DomainID = #{domainID}
	   	</if>
		JOIN vm_vacationinfo e ON  a.UR_Code = e.UR_Code AND e.Sdate BETWEEN to_char(to_date(a.UseStartDate,'yyyy-mm-dd'),'yyyy-mm-dd') AND  to_char(to_date(a.UseEndDate ,'yyyy-mm-dd'),'yyyy-mm-dd')
		<if test="VacKind == 'PUBLIC'">
			AND k.Code =  e.VacFlag
		</if>
		<if test="VacKind != 'PUBLIC'">
			AND a.VacKind = e.VacFlag
		</if>
		LEFT JOIN attend_request AR ON e.ProcessID = AR.ProcessID
		LEFT JOIN attend_request AR2 ON e.ProcessID = AR2.ReqSeq
		LEFT JOIN sys_base_code C ON e.GUBUN = C.Code AND C.CodeGroup = 'VACATION_GUBUN' AND C.DomainID =0
		LEFT JOIN sys_base_code D ON e.VacFlag = D.Code AND D.CodeGroup = 'VACATION_TYPE' AND D.DomainID =#{domainID}
		WHERE A.UR_Code = #{urCode}
		AND   a.VacKind = #{VacKind}
		AND   a.UseStartDate = #{UseStartDate}
		<trim prefix='ORDER BY'>
			<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
				VacationInfoID DESC
			</if>
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("APPDATE")'>APPDATE</when>
					<when test='sortColumn.equalsIgnoreCase("ENDDATE")'>ENDDATE</when>
					<when test='sortColumn.equalsIgnoreCase("VacFlagName")'>VacFlagName</when>
					<when test='sortColumn.equalsIgnoreCase("VacYear")'>VacYear</when>
					<when test='sortColumn.equalsIgnoreCase("Sdate")'>Sdate</when>
					<when test='sortColumn.equalsIgnoreCase("Edate")'>Edate</when>
					<when test='sortColumn.equalsIgnoreCase("VacDay")'>VacDay</when>
					<when test='sortColumn.equalsIgnoreCase("Reason")'>Reason</when>
					<when test='sortColumn.equalsIgnoreCase("GubunName")'>GubunName</when>
					<when test='sortColumn.equalsIgnoreCase("VACTEXT")'>VACTEXT</when>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
					<otherwise>VacationInfoID</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter"/>	 
	</select>
	
	<select id="selectMyVacationInfoListCnt" resultType="java.lang.Long">
		/* groupware.vacation.selectMyVacationInfoListCnt */
		SELECT count(VacationInfoID)
		FROM vm_vacationplan A
		<if test="VacKind == 'PUBLIC'">
	   	LEFT JOIN SYS_BASE_CODE k ON  k.CodeGroup = 'VACATION_TYPE' AND k.IsUse ='Y'	AND k.DomainID = #{domainID}
	   	</if>
		JOIN vm_vacationinfo e ON  a.UR_Code = e.UR_Code AND e.Sdate BETWEEN to_char(to_date(a.UseStartDate,'yyyy-mm-dd'),'yyyy-mm-dd') AND  to_char(to_date(a.UseEndDate ,'yyyy-mm-dd'),'yyyy-mm-dd')
		<if test="VacKind == 'PUBLIC'">
			AND k.Code =  e.VacFlag
		</if>
		<if test="VacKind != 'PUBLIC'">
			AND a.VacKind = e.VacFlag
		</if>
		WHERE A.UR_Code = #{urCode}
		AND   a.VacKind = #{VacKind}
		AND   a.UseStartDate = #{UseStartDate}
	</select>
	
	<select id="selectVacationInfoListV2" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationInfoListV2 */
	<include refid="oracle.include.pagingHeader"/>
		SELECT VacationInfoID AS "VacationInfoID"
		, A.UR_Code AS "UR_Code"
		, DisplayName AS "DisplayName"
		, APPDATE
		, ENDDATE
		, GUBUN
		, Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName) AS "GubunName"
		, VacYear AS "VacYear"
		, Sdate AS "Sdate"
		, Edate AS "Edate"
		, VacFlag AS "VacFlag"
		, VacOffFlag AS "VacOffFlag"
		, Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName) AS "VacFlagName"
		, cast(cast(TO_CHAR(VacDay, 'fm90.000') as DECIMAL(9,3)) as float) AS "VacDay"
		, Reason AS "Reason"
		, WorkItemID AS "WorkItemID"
		, A.ProcessID AS "ProcessID"
		, NVL(AR.ProcessID,0) AS "EXIST_APPROVAL_FORM"
		, NVL(AR2.ReqSeq,0) AS "EXIST_REQUEST_FORM"
		, NVL(AR2.ReqTitle,'') AS "ReqTitle"
		, DeptName AS "DeptName"
		, JobPositionName AS "JobPositionName"
		, (CASE WHEN (GUBUN = 'VACATION_CANCEL' OR GUBUN = 'VACATION_PUBLIC' OR GUBUN = 'VACATION_PUBLIC_CANCEL' )
		THEN '(' || Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName) || ')' || Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)
		ELSE Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)
		END ) AS VACTEXT
		FROM vm_vacationinfo A
		LEFT JOIN (	SELECT A.UserCode
					, B.CompanyCode
					, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
					, Fn_BaseGetDictionary_S(#{lang}, NVL(E.DeptName, B.MultiDeptName)) AS DeptName
					, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
					, VacYearRange ,TargetYear
				FROM (select UserCode, EnterDate, MultiDisplayName, RetireDate, SortKey
						, (CASE WHEN TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD') + (INTERVAL '12' MONTH)   <![CDATA[<=]]>	SYSDATE THEN 1
							ELSE 0 END
							) as IsOneYear
						,CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') <![CDATA[<]]> TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(EnterDate,'YYYY-MM-DD'),'MMDD')),'YYYYMMDD') THEN
								TO_DATE(CONCAT(EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR )),TO_CHAR(TO_DATE(EnterDate,'YYYY-MM-DD'),'-MM-DD')),'YYYY-MM-DD')
							ELSE
								TO_DATE(CONCAT(EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')),TO_CHAR(TO_DATE(EnterDate,'YYYY-MM-DD'),'-MM-DD')),'YYYY-MM-DD')
							END AS VacYearRange
						, CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD')  <![CDATA[<=]]>  TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
								EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
							ELSE
								EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR )) END AS TargetYear
						from sys_object_user where ENTERDATE is not null) A
				LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
				LEFT JOIN vm_vacationplan E ON A.UserCode = E.UR_Code and E.year = TargetYear and E.VacKind='PUBLIC'
			) B ON A.UR_Code = B.UserCode
				AND TO_DATE(A.Sdate,'YYYY-MM-DD') <![CDATA[>=]]> B.VacYearRange
				AND TO_DATE(A.Edate,'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(B.VacYearRange) + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY)
		LEFT JOIN sys_base_code C ON A.GUBUN = C.Code AND C.CodeGroup = 'VACATION_GUBUN' AND C.DomainID =0
		LEFT JOIN sys_base_code D ON A.VacFlag = D.Code AND D.CodeGroup = 'VACATION_TYPE' AND D.DomainID =#{domainID}
		LEFT JOIN attend_request AR ON A.ProcessID = AR.ProcessID
		LEFT JOIN attend_request AR2 ON A.ProcessID = AR2.ReqSeq
		WHERE VacYear = #{year}
		<if test='vacationInfoID != null and vacationInfoID !=""'>
			AND A.VacationInfoID = #{vacationInfoID}
		</if>
		<if test='domainCode != null and domainCode != ""'>
			AND B.Companycode = #{domainCode}
		</if>
		<if test='reqType != null and reqType !=""'>
			<choose>
				<when
						test='reqType == "myVacation" or reqType == "vacationInfo"'>
					AND A.UR_Code = #{urCode}
				</when>
				<when test='reqType == "vacationCancel"'>
				</when>
				<otherwise>
					AND (GUBUN ='VACATION_PUBLIC' OR GUBUN ='VACATION_PUBLIC_CANCEL')
				</otherwise>
			</choose>
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
		<trim prefix='ORDER BY'>
			<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
				VacationInfoID DESC
			</if>
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("APPDATE")'>APPDATE</when>
					<when test='sortColumn.equalsIgnoreCase("ENDDATE")'>ENDDATE</when>
					<when test='sortColumn.equalsIgnoreCase("VacFlagName")'>D.MultiCodeName</when>
					<when test='sortColumn.equalsIgnoreCase("VacYear")'>VacYear</when>
					<when test='sortColumn.equalsIgnoreCase("Sdate")'>Sdate</when>
					<when test='sortColumn.equalsIgnoreCase("Edate")'>Edate</when>
					<when test='sortColumn.equalsIgnoreCase("VacDay")'>VacDay</when>
					<when test='sortColumn.equalsIgnoreCase("Reason")'>Reason</when>
					<when test='sortColumn.equalsIgnoreCase("GubunName")'>C.MultiCodeName</when>
					<when test='sortColumn.equalsIgnoreCase("VACTEXT")'>VACTEXT</when>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
					<otherwise>VacationInfoID</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter"/>
	</select>

	<select id="selectVacationInfoListCntV2" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationInfoListCntV2 */
		SELECT COUNT(VacationInfoID)
		FROM vm_vacationinfo A
		LEFT JOIN (	SELECT A.UserCode
						, B.CompanyCode
						, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
						, Fn_BaseGetDictionary_S(#{lang}, NVL(E.DeptName, B.MultiDeptName)) AS DeptName
						, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
						, VacYearRange ,TargetYear
					FROM (select UserCode, EnterDate, MultiDisplayName, RetireDate, SortKey
							, (CASE WHEN TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD') + (INTERVAL '12' MONTH)   <![CDATA[<=]]>   SYSDATE THEN 1
									ELSE 0 END
								) as IsOneYear
							,CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') <![CDATA[<]]> TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(EnterDate,'YYYY-MM-DD'),'MMDD')),'YYYYMMDD') THEN
									TO_DATE(CONCAT(EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR )),TO_CHAR(TO_DATE(EnterDate,'YYYY-MM-DD'),'-MM-DD')),'YYYY-MM-DD')
								ELSE
									TO_DATE(CONCAT(EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')),TO_CHAR(TO_DATE(EnterDate,'YYYY-MM-DD'),'-MM-DD')),'YYYY-MM-DD')
								END AS VacYearRange
							, CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD')  <![CDATA[<=]]>  TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
									EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
								ELSE
									EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR )) END AS TargetYear
							from sys_object_user where ENTERDATE is not null) A
							LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
							LEFT JOIN vm_vacationplan E ON A.UserCode = E.UR_Code and E.year = TargetYear and E.VacKind='PUBLIC'
					) B ON A.UR_Code = B.UserCode
						AND TO_DATE(A.Sdate,'YYYY-MM-DD') <![CDATA[>=]]> B.VacYearRange
						AND TO_DATE(A.Edate,'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(B.VacYearRange) + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY)
		WHERE VacYear = #{year}
		<if test='vacationInfoID != null and vacationInfoID !=""'>
			AND A.VacationInfoID = #{vacationInfoID}
		</if>
		<if test='domainCode != null and domainCode != ""'>
			AND B.Companycode = #{domainCode}
		</if>
		<if test='reqType != null and reqType !=""'>
			<choose>
				<when
						test='reqType == "myVacation" or reqType == "vacationInfo"'>
					AND UR_Code = #{urCode}
				</when>
				<when test='reqType == "vacationCancel"'>
				</when>
				<otherwise>
					AND (GUBUN ='VACATION_PUBLIC' OR GUBUN ='VACATION_PUBLIC_CANCEL')
				</otherwise>
			</choose>
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
	</select>

	<select id="selectNextVacationListForExcel" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectNextVacationListForExcel */
		SELECT A.UserCode AS "UserCode",
			   NVL(A.EnterDate,'') AS "EnterDate", 
			   A.DisplayName AS "DisplayName",  
			   NVL(B.DeptName,'') AS "DeptName",
		       EXTRACT(YEAR FROM SYSDATE) + 1 AS "year",
			   NVL(Fn_GetVac(A.UserCode),0) AS "vacDay"
		  FROM sys_object_user A
		  LEFT JOIN (SELECT UserCode, CompanyName, CompanyCode, DeptName
		  			  FROM sys_object_user_basegroup
		  			 WHERE JobType = 'Origin'
		  			) B
		    ON A.UserCode = B.UserCode
		  left join vm_config vc on vc.CompanyCode=B.CompanyCode
		 WHERE A.IsUse = 'Y'
		 AND A.IsDisplay = 'Y'
		 AND A.IsHR = 'Y'
		 AND B.CompanyCode = #{domainCode}
		 AND (EnterDate IS NOT NULL AND LENGTH2(REPLACE(EnterDate,'-',''))=8)
		 AND (RetireDate IS NULL OR RetireDate = '')
	</select>
	
	<select id="selectTargetUserListForExcel" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectTargetUserListForExcel */
		SELECT NVL(B.DeptName,'') AS "DeptName",
			   A.DisplayName AS "DisplayName", 
			   NVL(B.JobPositionName,'') AS "JobPositionName", 
			   A.UserCode AS "UserCode"
		  FROM sys_object_user A
		  INNER JOIN (SELECT UserCode, DeptName, JobPositionName
					   FROM sys_object_user_basegroup
					  WHERE JobType = 'Origin'
						AND	CompanyCode = #{domainCode}
					) B
		    ON A.UserCode = B.UserCode
		 WHERE A.UserCode IS NOT NULL
		 AND A.IsUse = 'Y'
		 AND A.IsDisplay = 'Y'
		 AND A.IsHR = 'Y'
	</select>
	
	<select id="selectUserRemaindVacation" resultType="cmap">
	/* groupware.vacation.selectUserRemaindVacation */
		SELECT (VacDay - FN_GetUseVacDay(#{urCode}, #{vacYear})) AS "cnt"
		  FROM vm_vacationplan
		 WHERE UR_Code = #{urCode}
		   AND YEAR = #{vacYear}
	</select>
	
	<select id="selectCommonVacationInfoList" resultType="cmap">
	/* groupware.vacation.selectCommonVacationInfoList */
		SELECT A.VacYear AS "VacYear"
			 , A.VacFlag AS "VacFlag"
			 , A.VacOffFlag AS "VacOffFlag"
			 , A.Sdate AS "Sdate"
			 , A.Edate AS "Edate"
			 , A.VacDay AS "VacDay"
			 , A.Reason AS "Reason"
			 , A.APPDATE
			 , A.ENDDATE
			 , A.WorkItemID AS "WorkItemID"
			 , A.ProcessID AS "ProcessID"
			 , A.GUBUN
			 , A.DEPUTY_NAME
			 , A.DEPUTY_CODE
		FROM (
			SELECT *
			FROM vm_vacationinfo 
			WHERE VacYear=#{vacYear} AND UR_Code=#{urCode} 
			AND SDate=#{sDate} AND EDate=#{eDate}
			AND GUBUN='VACATION_PUBLIC'
			AND (
				(SELECT COUNT(0) FROM vm_vacationinfo
				WHERE UR_Code=#{urCode} AND SDate=#{sDate} AND EDate=#{eDate}
				AND GUBUN='VACATION_PUBLIC')
				!=
				(SELECT COUNT(0) FROM vm_vacationinfo
				WHERE UR_Code=#{urCode} AND SDate=#{sDate} AND EDate=#{eDate}
				AND GUBUN='VACATION_PUBLIC_CANCEL')
			)
			ORDER BY VacationInfoID DESC
		) A
		WHERE ROWNUM = 1
	</select>
	
	<select id="selectCommonVacationInfoCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectCommonVacationInfoCnt */
		SELECT COUNT(0) FROM vm_vacationinfo
		WHERE VacYear = #{vacYear}
		AND UR_Code = #{urCode} 
		AND SDate = #{sDate}
		AND EDate = #{eDate}
		AND GUBUN = #{applyGubun}
		AND (
			(SELECT COUNT(0) FROM vm_vacationinfo
			WHERE UR_Code = #{urCode}
			AND SDate = #{sDate}
			AND EDate = #{eDate}
			AND GUBUN = #{applyGubun}) 
			!= 
			(SELECT COUNT(0) FROM vm_vacationinfo
			WHERE UR_Code = #{urCode}
			AND SDate = #{sDate}
			AND EDate = #{eDate}
			AND GUBUN = #{cancelGubun})
		)
	</select>
	
	<insert id="insertVacationInfo" parameterType="cmap">
	/* groupware.vacation.insertVacationInfo */
		INSERT
		  INTO vm_vacationinfo (VacYear, UR_Code, 
		  									 UR_Name, 
		  									 VacFlag, Sdate, Edate, VacDay, 
		  									 Reason, APPDATE, ENDDATE, GUBUN
		  						   			)
	    VALUES (#{vacYear}, #{urCode}, 
	    		(SELECT DisplayName
				   FROM sys_object_user
				  WHERE UserCode = #{urCode}
				),
	    		#{vacFlag}, #{sDate}, #{eDate}, #{vacDay},
	    		#{reason}, TO_CHAR(SYSDATE,'YYYY-MM-DD'), TO_CHAR(SYSDATE,'YYYY-MM-DD'), #{gubun}
	    	   )
		<selectKey keyProperty="VacationInfoID" resultType="int" order="AFTER">
			SELECT VM_VACATIONINFO_SEQ.CURRVAL FROM dual
		</selectKey>
	</insert>

	<insert id="insertVacationInfoDayPublicVac" parameterType="cmap">
	/* groupware.vacation.insertVacationInfoDayPublicVac */
		INSERT INTO vm_vacationinfo_day
		( UR_Code, VacFlag, VacOffFlag, VacDate, Gubun,
		StartTime, EndTime, VacDay , VacationInfoID)
		VALUES ( #{urCode}, #{vacFlag}, '0', #{VacDate}, #{gubun},
		null, null, #{vacDay}, #{vacationInfoID} )
	</insert>

	<insert id="insertVacationInfoDayApplyVac" parameterType="cmap">
	/* groupware.vacation.insertVacationInfoDayApplyVac */
		INSERT INTO vm_vacationinfo_day
		( UR_Code, VacFlag, VacOffFlag, VacDate, Gubun,
		StartTime, EndTime, VacDay , VacationInfoID)
		VALUES ( #{urCode}, #{vacFlag}, #{vacOffFlag}, #{VacDate}, #{gubun},
		#{startTime}, #{endTime},
		(SELECT
			CASE WHEN NVL(Reserved3, 1) = '' THEN
					CAST(1 AS DECIMAL(9,3))
				ELSE
					CAST(NVL(Reserved3, 1) AS DECIMAL(9,3))
				END
			FROM sys_base_code
			WHERE CodeGroup = 'VACATION_TYPE'
			AND DomainID =#{domainID}
			AND Code = #{vacFlag}
		),
		#{vacationInfoID} )
	</insert>

	<insert id="insertVacationCancel" parameterType="cmap">
	/* groupware.vacation.insertVacationCancel */
		INSERT
		  INTO vm_vacationinfo (VacYear, UR_Code, 
		  									 UR_Name, 
		  									 VacFlag, VacOffFlag, Sdate, Edate, VacDay, 
		  									 Reason, APPDATE, ENDDATE, GUBUN,
		  									 WorkItemID, ProcessID
		  						   			)
	    VALUES (#{vacYear}, #{urCode}, 
	    		(SELECT DisplayName
				   FROM sys_object_user
				  WHERE UserCode = #{urCode}
				),
	    		#{vacFlag}, #{vacOffFlag}, #{sDate}, #{eDate}, #{vacDay},
	    		#{reason}, SYSDATE, SYSDATE, #{gubun},
	    		#{workItemId}, #{processId}
	    	   )
	</insert>

	<delete id="deleteVacationInfoDayPublicVac" parameterType="cmap">
	/* groupware.vacation.deleteVacationInfoDayPublicVac */
		DELETE FROM vm_vacationinfo_day
		WHERE UR_Code = #{urCode}
		AND VacFlag =  #{vacFlag}
		AND VacOffFlag = '0'
		AND VacDate = #{VacDate}
		AND Gubun = #{gubun}
		AND VacDay = #{vacDay}
	</delete>

	<select id="selectUserVacationInfo" parameterType="cmap" resultType="cmap">
		/* groupware.vacation.selectUserVacationInfo */
		SELECT UserCode AS "UserCode"
		, Fn_BaseGetDictionary_S(#{lang},MultiDisplayName) AS "DisplayName"
		, EnterDate as "EnterDate"
		, Fn_BaseGetDictionary_S(#{lang},MultiDeptName) AS "DeptName"
		, Fn_BaseGetDictionary_S(#{lang},MultiJobPositionName) AS "JobPositionName"
		, CAST(CAST(OWNDAYS+BfUSEDAYS AS DECIMAL(9,4)) AS FLOAT) AS "OWNDAYS"
		, CAST(CAST(USEDAYS+BfUSEDAYS AS DECIMAL(9,4)) AS FLOAT) AS "USEDAYS"
		, CAST(CAST(OWNDAYS - USEDAYS AS DECIMAL(9,4)) AS FLOAT) AS "REMINDDAYS"
		, (YEAR - 1)||'-01-01 ~ '||(YEAR - 1)||'-12-31' AS "YESTERYEAR"
		, YEAR||'-01-01 ~ '||YEAR||'-12-31' AS "NOWYEAR"
		, TO_CHAR(SYSDATE,'YYYY.MM.DD') AS "TODAY"
		, YEAR AS "YEAR"
		, TargetYear AS "TargetYear"
		, TO_CHAR(SYSDATE,'MM') AS "MONTH"
		, (CASE WHEN USEDAYS > 0 AND OWNDAYS > 0 THEN NVL(ROUND((USEDAYS/OWNDAYS * 100),-1),0) ELSE 0 END) AS "PER"
		<if test='empType != null and !empType.equalsIgnoreCase("normal")'>
			, (SELECT VACPLAN FROM vm_useage_plan WHERE UR_CODE = #{urCode} AND YEAR = SUBSTR(EnterDate,1,4)) AS "VACPLAN"
		</if>
		<if test='empType == null or empType.equalsIgnoreCase("normal")'>
			, (SELECT VACPLAN FROM vm_useage_plan WHERE UR_CODE = #{urCode} AND YEAR = TargetYear) AS "VACPLAN"
		</if>
		, (fn_attend_getPromotionDateRage('F','Code1' ,VacLimit ,#{domainCode})) AS "VacLimitDayFrom"
		, (fn_attend_getPromotionDateRage('T','Code1'
		,TO_DATE(fn_attend_getPromotionDateRage('F','Code1'
		,VacLimit
		,#{domainCode}),'YYYY-MM-DD'), #{domainCode})) AS "VacLimitDayTo"
		, (fn_attend_getPromotionDateRage('F','Code2' ,VacLimit ,#{domainCode})) AS "VacLimitOneFrom"
		, (fn_attend_getPromotionDateRage('T','Code2'
		,TO_DATE(fn_attend_getPromotionDateRage('F','Code2'
		,VacLimit
		,#{domainCode}),'YYYY-MM-DD'), #{domainCode})) AS "VacLimitOneTo"
		, (fn_attend_getPromotionDateRage('F','Code3' ,VacLimit ,#{domainCode}))  AS "VacLimitTwoFrom"
		, (fn_attend_getPromotionDateRage('T','Code3'
		,TO_DATE(fn_attend_getPromotionDateRage('F','Code3'
		,VacLimit
		,#{domainCode}),'YYYY-MM-DD'), #{domainCode})) AS "VacLimitTwoTo"
		, (fn_attend_getPromotionDateRage('F','Code4' ,VacLimit ,#{domainCode})) AS "VacLimitLessFrom"
		, (fn_attend_getPromotionDateRage('T','Code4'
		,TO_DATE(fn_attend_getPromotionDateRage('F','Code4'
		,VacLimit
		,#{domainCode}),'YYYY-MM-DD'), #{domainCode})) AS "VacLimitLessTo"
		, (fn_attend_getPromotionDateRage('F','Code5' ,VacLimit ,#{domainCode})) AS "VacLimit091From"
		, (fn_attend_getPromotionDateRage('T','Code5'
		, TO_DATE(fn_attend_getPromotionDateRage('F','Code5'
		,VacLimit
		,#{domainCode}),'YYYY-MM-DD'), #{domainCode})) AS "VacLimit091To"
		, (fn_attend_getPromotionDateRage('F','Code6' ,VacLimit ,#{domainCode})) AS "VacLimit092From"
		, (fn_attend_getPromotionDateRage('T','Code6'
		, TO_DATE(fn_attend_getPromotionDateRage('F','Code6'
		,VacLimit
		,#{domainCode}),'YYYY-MM-DD'), #{domainCode})) AS "VacLimit092To"
		, (fn_attend_getPromotionDateRage('F','Code7' ,VacLimit ,#{domainCode})) AS "VacLimit021From"
		, (fn_attend_getPromotionDateRage('T','Code7'
		, TO_DATE(fn_attend_getPromotionDateRage('F','Code7'
		,VacLimit
		,#{domainCode}),'YYYY-MM-DD'), #{domainCode})) AS "VacLimit021To"
		, (fn_attend_getPromotionDateRage('F','Code8' ,VacLimit ,#{domainCode})) AS "VacLimit022From"
		, (fn_attend_getPromotionDateRage('T','Code8'
		, TO_DATE(fn_attend_getPromotionDateRage('F','Code8'
		,VacLimit
		,#{domainCode}),'YYYY-MM-DD'), #{domainCode})) AS "VacLimit022To"
		FROM (
		SELECT A.UserCode, A.MultiDisplayName, A.EnterDate
		, B.MultiDeptName , B.MultiJobPositionName
		, #{year} as YEAR
		, A.TargetYear
		, CASE WHEN A.IsOneYear = 0 THEN
				ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'), 12)
			ELSE
				ADD_MONTHS(TO_DATE(#{year}||'-01-01','YYYY-MM-DD'), 12) END AS VacLimit
		, (SELECT
			NVL(SUM(VacDay),0)
			FROM VM_VACATIONPLAN vp
			LEFT JOIN (select Code, Fn_BaseGetDictionary_S(#{lang}, NVL(MultiCodeName, CodeName)) AS CodeName, SortKey
						from sys_base_code
						where IsUse = 'Y'
						and DomainID = (SELECT DomainID FROM sys_object_domain WHERE DomainCode = #{domainCode})
						and CodeGroup = 'VACATION_TYPE') G ON G.Code = vp.VacKind
				WHERE UR_Code = #{urCode}
				AND YEAR = #{year}
				AND (VacKind = 'PUBLIC' OR (VacKind != 'PUBLIC' AND G.Code is not null) )
		) AS OWNDAYS
		, NVL(F.USEDAYS,0) as USEDAYS
		<if test='bfYear != null and bfYear != ""'>
			, (SELECT TO_CHAR(NVL(SUM(CASE WHEN B.CodeID IS NOT NULL THEN VacDay ELSE 0 END),0),'fm990.000')
				FROM VM_VACATIONINFO A
				LEFT JOIN sys_base_code B ON B.CodeGroup = 'VACATION_TYPE' AND	B.Reserved1 = '+' AND B.IsUse = 'Y' AND A.VacFlag = B.Code AND B.DomainID = #{domainID}
				WHERE A.VacYear = #{bfYear}
					AND   UR_Code = #{urCode}
			) AS BfUSEDAYS
		</if>
		<if test='bfYear == null or bfYear == ""'>
			, 0 AS BfUSEDAYS
		</if>
		FROM (select UserCode, EnterDate, MultiDisplayName, RetireDate, SortKey
			, (CASE WHEN ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'), 12)  <![CDATA[<=]]> SYSDATE THEN 1
					ELSE 0 END
				) as IsOneYear
			, (CASE WHEN ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'), 12)  <![CDATA[<=]]>  SYSDATE THEN
					#{year}
				ELSE
					CASE WHEN TO_DATE(#{year}||TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD'),'YYYYMMDD') <![CDATA[<=]]> TO_DATE(#{year}||TO_CHAR(SYSDATE,'MMDD'),'YYYYMMDD') THEN
						#{year}
					ELSE
						TO_CHAR(EXTRACT(YEAR FROM ADD_MONTHS(TO_DATE(#{year}||'0101','YYYYMMDD'), -12 ) ))
					END
				END
				) as TargetYear
			from sys_object_user)  A
			LEFT JOIN sys_object_user_basegroup b ON JobType = 'Origin' AND A.UserCode = B.UserCode
			LEFT JOIN (	SELECT UR_Code
						, TO_CHAR(NVL(SUM(CASE WHEN B.CodeID IS NOT NULL THEN VacDay ELSE 0 END),0),'fm990.000') AS USEDAYS
						FROM VM_VACATIONINFO A
						LEFT JOIN (select * from sys_base_code
									where DomainID = (SELECT DomainID FROM sys_object_domain WHERE DomainCode = #{domainCode})
									and CodeGroup = 'VACATION_TYPE'
									and IsUse = 'Y'
									<!--AND (Reserved2 is null or Reserved2 ='')-->
									and Reserved1 = '+') B
						ON   A.VacFlag = B.Code
						WHERE A.VacYear = #{year}
						AND   UR_Code = #{urCode}
						GROUP BY A.UR_Code
			) F ON A.UserCode = F.UR_Code
		WHERE A.UserCode = #{urCode}
	) TBL

	</select>

	<select id="selectUserVacationInfoV2" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectUserVacationInfoV2 */
		SELECT UserCode AS "UserCode"
			, Fn_BaseGetDictionary_S(#{lang},MultiDisplayName) AS "DisplayName"
			, EnterDate AS "EnterDate"
			, Fn_BaseGetDictionary_S(#{lang},MultiDeptName) AS "DeptName"
			, Fn_BaseGetDictionary_S(#{lang},MultiJobPositionName) AS "JobPositionName"
			, CAST(CAST(OWNDAYS+NVL(EtcOWNDAYS,0.0)+BfUSEDAYS AS DECIMAL(9,4)) AS float) AS OWNDAYS
			, CAST(CAST(USEDAYS+BfUSEDAYS AS DECIMAL(9,4)) AS float) AS USEDAYS
			, CAST(CAST((OWNDAYS+NVL(EtcOWNDAYS,0.0)) - USEDAYS AS DECIMAL(9,4)) AS float) AS REMINDDAYS
			, TO_CHAR(VacYear - (INTERVAL '1' YEAR),'YYYY-MM-DD') || ' ~ ' || TO_CHAR(VacYear - (INTERVAL '1' DAY),'YYYY-MM-DD') AS YESTERYEAR
			, TO_CHAR(VacYear,'YYYY-MM-DD') || ' ~ ' || TO_CHAR(VacYear + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY),'YYYY-MM-DD') AS NOWYEAR
			, TO_CHAR(SYSDATE,'YYYY.MM.DD') AS TODAY
			, #{year} AS YEAR
			, Tyear AS "TargetYear"
			, TO_CHAR(SYSDATE,'MM') AS MONTH
			, TO_CHAR(CASE WHEN USEDAYS > 0 AND OWNDAYS > 0
					   THEN NVL(ROUND((USEDAYS/OWNDAYS * 100),-1),0)
					   ELSE 0
		    		END, 'fm90'
		    	) AS PER
			<if test='empType != null and !empType.equalsIgnoreCase("normal")'>
				, (SELECT VACPLAN FROM vm_useage_plan WHERE UR_CODE = #{urCode} AND YEAR = SUBSTR(EnterDate,1,4)) AS "VACPLAN"
			</if>
			<if test='empType == null or empType.equalsIgnoreCase("normal")'>
				, (SELECT  VACPLAN FROM vm_useage_plan WHERE UR_CODE  = #{urCode} AND YEAR = Tyear) AS "VACPLAN"
			</if>	
			, VacLimitDayFrom AS "VacLimitDayFrom"
			, VacLimitOneFrom AS "VacLimitOneFrom"
			, VacLimitTwoFrom AS "VacLimitTwoFrom"
			, VacLimitLessFrom AS "VacLimitLessFrom"
			, VacLimit091From AS "VacLimit091From"
			, VacLimit092From AS "VacLimit092From"
			, VacLimit021From AS "VacLimit021From"
			, VacLimit022From AS "VacLimit022From"
			, fn_attend_getPromotionDateRage('T','Code1' , TO_DATE(VacLimitDayFrom,'YYYY-MM-DD') ,#{domainCode})  AS "VacLimitDayTo"
			, fn_attend_getPromotionDateRage('T','Code2' , TO_DATE(VacLimitOneFrom,'YYYY-MM-DD') ,#{domainCode})  AS "VacLimitOneTo"
			, fn_attend_getPromotionDateRage('T','Code3' , TO_DATE(VacLimitTwoFrom,'YYYY-MM-DD') ,#{domainCode})  AS "VacLimitTwoTo"
			, fn_attend_getPromotionDateRage('T','Code4' , TO_DATE(VacLimitLessFrom,'YYYY-MM-DD') ,#{domainCode})  AS "VacLimitLessTo"
			, fn_attend_getPromotionDateRage('T','Code5' , TO_DATE(VacLimit091From,'YYYY-MM-DD') ,#{domainCode}) AS "VacLimit091To"
			, fn_attend_getPromotionDateRage('T','Code6' , TO_DATE(VacLimit092From,'YYYY-MM-DD') ,#{domainCode}) AS "VacLimit092To"
			, fn_attend_getPromotionDateRage('T','Code7' , TO_DATE(VacLimit021From,'YYYY-MM-DD') ,#{domainCode}) AS "VacLimit021To"
			, fn_attend_getPromotionDateRage('T','Code8' , TO_DATE(VacLimit022From,'YYYY-MM-DD') ,#{domainCode}) AS "VacLimit022To"
		FROM (
			SELECT UserCode, MultiDisplayName, EnterDate, MultiDeptName , MultiJobPositionName
				, Tyear, VacYear, VacLimit, BfUSEDAYS, USEDAYS
				, OWNDAYS, EtcOWNDAYS
				, CASE WHEN EXTRACT(YEAR FROM TO_DATE(fn_attend_getPromotionDateRage('F','Code1' ,VacLimit ,#{domainCode}),'YYYY-MM-DD')) <![CDATA[<]]> #{year} THEN
						fn_attend_getPromotionDateRage('F','Code1' ,ADD_MONTHS(VacLimit, 12) ,#{domainCode})
					ELSE
						fn_attend_getPromotionDateRage('F','Code1' ,VacLimit ,#{domainCode})
					END AS VacLimitDayFrom
				, CASE WHEN EXTRACT(YEAR FROM TO_DATE(fn_attend_getPromotionDateRage('F','Code2' ,VacLimit ,#{domainCode}),'YYYY-MM-DD')) <![CDATA[<]]> #{year} THEN
						fn_attend_getPromotionDateRage('F','Code2' ,ADD_MONTHS(VacLimit, 12) ,#{domainCode})
					ELSE
						fn_attend_getPromotionDateRage('F','Code2' ,VacLimit ,#{domainCode})
					END AS VacLimitOneFrom
				, CASE WHEN EXTRACT(YEAR FROM TO_DATE(fn_attend_getPromotionDateRage('F','Code3' ,VacLimit ,#{domainCode}),'YYYY-MM-DD')) <![CDATA[<]]> #{year} THEN
						fn_attend_getPromotionDateRage('F','Code3' ,ADD_MONTHS(VacLimit, 12) ,#{domainCode})
					ELSE
						fn_attend_getPromotionDateRage('F','Code3' ,VacLimit ,#{domainCode})
					END AS VacLimitTwoFrom
				, fn_attend_getPromotionDateRage('F','Code4' ,VacLimit ,#{domainCode}) AS VacLimitLessFrom
				, fn_attend_getPromotionDateRage('F','Code5' ,VacLimit ,#{domainCode}) AS VacLimit091From
				, fn_attend_getPromotionDateRage('F','Code6' ,VacLimit ,#{domainCode}) AS VacLimit092From
				, fn_attend_getPromotionDateRage('F','Code7' ,VacLimit ,#{domainCode}) AS VacLimit021From
				, fn_attend_getPromotionDateRage('F','Code8' ,VacLimit ,#{domainCode}) AS VacLimit022From
			FROM (SELECT A.UserCode
					, A.MultiDisplayName
					, A.EnterDate
					, B.MultiDeptName
					, B.MultiJobPositionName
					, Tyear
					, TO_DATE(CONCAT(Tyear,TO_CHAR(TO_DATE(EnterDate,'YYYYMMDD'),'-MM-DD')),'YYYY-MM-DD') AS VacYear
					, CASE WHEN  IsOneYear = 0 THEN
							ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'), 12)
						WHEN CFG.CreateMethod = 'J' THEN
							TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'-MM-DD')))
						ELSE
							ADD_MONTHS(TO_DATE(CONCAT(#{year},'-01-01'),'YYYY-MM-DD'), 12) END AS VacLimit
					, (SELECT NVL(SUM(VacDay),0) FROM VM_VACATIONPLAN WHERE UR_Code = #{urCode} AND VacKind='PUBLIC' AND YEAR   = Tyear) AS OWNDAYS
					, (SELECT NVL(SUM(VacDay),0.0)
						FROM VM_VACATIONPLAN
						WHERE UR_Code = #{urCode}
						 AND VacKind <![CDATA[<>]]> 'PUBLIC'
						AND VacKind IN (SELECT Code
										FROM SYS_BASE_CODE
										WHERE CodeGroup = 'VACATION_TYPE'
										AND IsUse ='Y'
										AND DomainID = (SELECT DomainID FROM sys_object_domain WHERE DomainCode = #{domainCode})
										AND Reserved1 ='+'
										AND (Reserved2 is null or Reserved2 ='')
						)
						 AND TO_DATE(UseStartDate,'YYYYMMDD') <![CDATA[>=]]> Sdate
						 AND TO_DATE(UseEndDate,'YYYYMMDD') <![CDATA[<=]]> Edate
					   ) AS EtcOWNDAYS
				<if test='bfYear != null and bfYear != ""'>
					, (SELECT TO_CHAR(NVL(SUM(CASE WHEN B.CodeID IS NOT NULL THEN VacDay ELSE 0 END) ,0), 'fm90.000')
						FROM VM_VACATIONINFO A
						LEFT JOIN sys_base_code B ON B.CodeGroup     = 'VACATION_TYPE'
										   AND B.Reserved1 = '+'
										   AND B.IsUse = 'Y'
										   AND A.VacFlag = B.Code
										   AND B.DomainID = (SELECT DomainID FROM sys_object_domain WHERE DomainCode = #{domainCode})
						 WHERE A.VacYear   = (Tyear-1)
								 AND UR_Code = #{urCode}
					   ) AS BfUSEDAYS
				</if>
				<if test='bfYear == null or bfYear == ""'>
					, 0 AS BfUSEDAYS
				</if>

					, NVL(F.USEDAYS,0) AS USEDAYS
				FROM (SELECT UserCode
							, MultiDisplayName
							, EnterDate
							, Tyear
							, TO_DATE(CONCAT(Tyear,TO_CHAR(TO_DATE(EnterDate,'YYYYMMDD'),'MMDD')),'YYYYMMDD') as Sdate
							, TO_DATE(CONCAT(Tyear,TO_CHAR(TO_DATE(EnterDate,'YYYYMMDD'),'MMDD')),'YYYYMMDD') + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY ) as Edate
							, (CASE WHEN TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD') + (INTERVAL '12' MONTH) <![CDATA[<=]]> SYSDATE
								THEN 1
								ELSE 0
							END) as IsOneYear
							FROM (SELECT UserCode
							, MultiDisplayName
							, REPLACE(EnterDate,'-','') AS EnterDate
							, CASE WHEN TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12),'YYYYMMDD') <![CDATA[<=]]> TO_CHAR(SYSDATE,'YYYYMMDD')
									THEN EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
								ELSE EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR)) 
							END AS Tyear
						FROM sys_object_user
							where USERCODE = #{urCode}) a) A
						LEFT JOIN sys_object_user_basegroup b ON JobType = 'Origin' AND A.UserCode = B.UserCode
						LEFT JOIN vm_config CFG ON CFG.CompanyCode = B.CompanyCode
						LEFT JOIN (	SELECT UR_Code ,
										SUM(VacDay) AS USEDAYS
										FROM (
										SELECT UR_CODE, VACDAY
											FROM VM_VACATIONINFO V
											LEFT JOIN    (SELECT UserCode, MultiDisplayName, EnterDate
												,CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') <![CDATA[<]]> TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') THEN
													TO_DATE(CONCAT(EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR )),TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'-MM-DD')),'YYYY-MM-DD')
												ELSE
													TO_DATE(CONCAT(EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')),TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'-MM-DD')),'YYYY-MM-DD')
												END AS VacYearRange
											FROM sys_object_user
												where USERCODE = #{urCode}) A ON V.UR_Code = A.UserCode
											WHERE TO_DATE(V.Sdate,'YYYY-MM-DD') <![CDATA[>=]]> A.VacYearRange
											AND TO_DATE(V.Edate,'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(A.VacYearRange) + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY)
											AND   UR_Code = #{urCode}
										<if test='termDate != null and termDate != ""'>
											AND A.EDATE <![CDATA[<=]]> #{termDate}
										</if>
											AND V.VacFlag in (SELECT Code
															FROM SYS_BASE_CODE
															WHERE CodeGroup = 'VACATION_TYPE'
															AND IsUse = 'Y'
															AND DomainID =
															(SELECT DomainID FROM sys_object_domain WHERE DomainCode = #{domainCode})
															AND Reserved1 = '+'
															AND (Reserved2 is null or Reserved2 = ''))
											) V
								GROUP BY V.UR_Code
					) F ON A.UserCode = F.UR_Code
				WHERE A.UserCode = #{urCode}
			) T
		) TBL
	</select>
	
	<select id="selectVacationListByType" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationListByType */
		SELECT UserCode "UR_Code"
		, Fn_BaseGetDictionary_S(#{lang}, MAX(a.DisplayName)) AS "DisplayName"
		, Fn_BaseGetDictionary_S(#{lang}, nvl(MAX(P.DeptName), MAX(a.DeptName))) AS "DeptName"
		, Fn_BaseGetDictionary_S(#{lang}, MAX(JobPositionName)) AS "JobPositionName"
		, Fn_BaseGetDictionary_S(#{lang}, MAX(JobTitleName)) AS "JobTitleName"
		, MAX(JobPositionName)  "JobPositionName"
		, MAX(JobTitleName) "JobTitleName"
		, MAX(year) as "year"
		, MAX(EnterDate) "EnterDate"
		, MAX(RetireDate) "RetireDate"

		, CAST(nvl(MAX(P.VacDay),0) 
			<if test='hideExtraVacation eq "N" '> + IFNULL((SELECT SUM(pe.vacday) FROM vm_vacationplan pe where 	pe.VacKind != 'PUBLIC' AND pe.UR_Code = a.UserCode 		AND  pe.UseStartDate between p.UseStartDate AND p.UseEnddate ),0)</if>
			as float)AS "planVacDay"
		, CAST(nvl(SUM(CASE WHEN v.Reserved1 = '+' <if test='hideExtraVacation eq "Y" '>AND t.Code = 'PUBLIC' </if>  THEN  d.VacDay ELSE 0 END),0) as float) "useDays"
		, CAST(nvl(MAX(P.VacDay),0) 
			<if test='hideExtraVacation eq "N" '> + IFNULL((SELECT SUM(pe.vacday) FROM vm_vacationplan pe where 	pe.VacKind != 'PUBLIC' AND pe.UR_Code = a.UserCode 		AND  pe.UseStartDate between p.UseStartDate AND p.UseEnddate ),0)</if>
		 - nvl(SUM(CASE WHEN v.Reserved1 = '+' <if test='hideExtraVacation eq "Y" '>AND t.Code = 'PUBLIC' </if>  THEN  d.VacDay ELSE 0 END),0) as float) "remindDays"
		, MAX(p.Year) "Year"
		, MAX(p.UseStartDate) "UseStartDate"
		, MAX(p.UseEndDate) "UseEndDate"
		<foreach collection="colList" item="col">
			, CAST(nvl(SUM(CASE WHEN VacFlag = #{col.Code} <if test='hideExtraVacation eq "Y" '>AND t.Code = 'PUBLIC' </if> THEN d.VacDay ELSE 0 END),0)as float) "VAC_${col.Code}"
		</foreach>
		,CAST(nvl(SUM(CASE WHEN VacFlag NOT IN
		<foreach item="col" index="index" collection="colList" open="(" close=")" separator=",">
			#{col.Code}
		</foreach> <if test='hideExtraVacation eq "Y" '>AND t.Code = 'PUBLIC' </if> THEN d.VacDay ELSE 0 END),0) as float) "EtcVac"
	FROM(
		SELECT u.UserCode
				, Fn_BaseGetDictionary_S(#{lang}, u.MultiDisplayName) AS DisplayName
				, Fn_BaseGetDictionary_S(#{lang}, ub.MultiDeptName) AS DeptName
				, EnterDate
				, RetireDate
				, u.SortKey
				, ub.DeptCode
				, JobTitleSortKey
				, JobPositionSortKey
				, JobLevelSortKey
				, Fn_BaseGetDictionary_S(#{lang}, ub.MultiJobPositionName) AS JobPositionName
				, Fn_BaseGetDictionary_S(#{lang}, ub.MultiJobTitleName) AS JobTitleName
				, row_number() over(ORDER BY 
				<if test='sortColumn == null or sortColumn == "" or sortDirection == null or sortDirection == ""'>
					JobPositionSortKey, u.SortKey ASC
				</if>
				<if test='sortColumn != null and sortColumn != "" and sortDirection != null and sortDirection != ""'>
					<choose>
						<when test='sortColumn.equalsIgnoreCase("DisplayName")'>u.DisplayName</when>
						<when test='sortColumn.equalsIgnoreCase("JobPositionName")'>JobPositionName</when>
						<when test='sortColumn.equalsIgnoreCase("EnterDate")'>EnterDate</when>
						<when test='sortColumn.equalsIgnoreCase("RetireDate")'>RetireDate</when>
						<otherwise>DeptName</otherwise>
					</choose>
					<choose>
						<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
						<otherwise> DESC</otherwise>
					</choose>
				</if>
			)  rnum
		FROM sys_object_user u
		JOIN sys_object_user_basegroup ub ON u.UserCode = ub.UserCode and JobType = 'Origin'
		JOIN sys_object_group g ON ub.DeptCode = g.GroupCode 
			<if test='deptCode != null and deptCode != ""'> and ';'||GroupPath LIKE '%;'||#{deptCode} ||';%'</if>
			<if test='schDeptID != null and schDeptID != ""'> and ';'||GroupPath LIKE '%;'||#{schDeptID} ||';%'</if>
		WHERE ( substr(u.EnterDate,0,4) <![CDATA[<=]]> #{year}
		AND substr(nvl(u.RetireDate,'2099'),0,4)  >= #{year} )
			<if test='domainCode != null and domainCode != ""'>
				AND ub.Companycode = #{domainCode}
			</if>
			<if test='schEmploySel != null and schEmploySel != ""'>
				<choose>
					<when test='schEmploySel == "INOFFICE"'>
						AND u.RetireDate is null
						AND ub.DeptCode NOT LIKE '%RetireDept'
					</when>
					<otherwise> <!-- RETIRE -->
						AND u.RetireDate is not null
					</otherwise>
				</choose>
			</if>
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "deptName"'>
						AND ub.DeptName LIKE CONCAT('%', #{schTxt}, '%')
					</when>
					<otherwise>
						AND u.DisplayName LIKE CONCAT('%', #{schTxt}, '%')
					</otherwise>
				</choose>
			</if>
		) A
		LEFT JOIN vm_vacationplan p ON 	p.VacKind = 'PUBLIC' AND p.UR_Code = a.UserCode 
			AND <if test='stndCur == "Y"'>to_char(sysdate,'yyyy') BETWEEN  UseStartDate AND UseEndDate </if>
				<if test='stndCur != "Y"'>p.year=#{year}</if>	
		LEFT JOIN vm_vacationinfo_day d  on a.UserCode = d.UR_Code AND d.VacDate BETWEEN to_char(to_date(p.UseStartDate, 'yyyy-mm-dd'), 'yyyy-mm-dd') AND  to_char(to_date(P.UseEndDate , 'yyyy-mm-dd'), 'yyyy-mm-dd')
	    LEFT JOIN sys_base_code v ON  d.VacFlag =  v.CODE AND v.CodeGroup = 'VACATION_TYPE' AND v.IsUse ='Y'	AND v.DomainID = #{domainID} 
	    LEFT JOIN sys_base_code t ON  v.ReservedInt = t.CodeID  <if test='hideExtraVacation eq "Y" '>AND t.Code = 'PUBLIC' </if>
		WHERE rnum BETWEEN #{rowStart} AND #{rowEnd}
		GROUP BY a.UserCode, rnum, JobTitleSortKey, JobLevelSortKey, JobPositionSortKey
		<trim prefix="ORDER BY"  prefixOverrides =",">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			JobTitleSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			JobLevelSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			JobPositionSortKey ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			"DisplayName" ASC
				  		</if>
				  	</foreach>
				  	, rnum
			  	</when>
			</choose>
		</trim>	
	</select>
	
	<select id="selectVacationListCntByType" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationListCntByType */
		SELECT count(u.UserCode)
		FROM sys_object_user u
		JOIN sys_object_user_basegroup ub ON u.UserCode = ub.UserCode and JobType = 'Origin'
		JOIN sys_object_group g ON ub.DeptCode = g.GroupCode 
			<if test='deptCode != null and deptCode != ""'> and ';'||GroupPath LIKE '%;'||#{deptCode} ||';%'</if>
			<if test='schDeptID != null and schDeptID != ""'> and ';'||GroupPath LIKE '%;'||#{schDeptID} ||';%'</if>
		WHERE ( substr(u.EnterDate,0,4) <![CDATA[<=]]> #{year}
		AND substr(nvl(u.RetireDate,'2099'),0,4)  >= #{year} )
			<if test='domainCode != null and domainCode != ""'>
				AND ub.Companycode = #{domainCode}
			</if>
			<if test='schEmploySel != null and schEmploySel != ""'>
				<choose>
					<when test='schEmploySel == "INOFFICE"'>
						AND u.RetireDate is null
						AND ub.DeptCode NOT LIKE '%RetireDept'
					</when>
					<otherwise> <!-- RETIRE -->
						AND u.RetireDate is not null
					</otherwise>
				</choose>
			</if>
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "deptName"'>
						AND ub.DeptName LIKE '%'|| #{schTxt}|| '%'
					</when>
					<otherwise>
						AND u.DisplayName LIKE '%'|| #{schTxt}|| '%'
					</otherwise>
				</choose>
			</if>
	</select>
	
	<select id="selectVacationListByTypeV2" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationListByTypeV2 */
	<include refid="oracle.include.pagingHeader"/>
		SELECT UserCode AS "UR_Code"
			, DisplayName AS "DisplayName"
			, CAST(planVacDay as float) AS "planVacDay"
			, CAST(VacDay as float) AS "useDays"
			, CAST(planVacDay - VacDay  as float) AS "remindDays"
			, DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
			, JobTitleName AS "JobTitleName"
			, TargetYear AS "year"
			, UseStartDate AS "UseStartDate"
			, UseEndDate AS "UseEndDate"
			, EnterDate AS "EnterDate"
			, RetireDate AS "RetireDate"
			, NVL((SELECT SUM(RewardVacDay) RewardVacDay FROM vm_vacationplan_history H WHERE H.UR_Code = A.UserCode AND	YEAR = #{year}),0) AS "RewardVacDay"
			<foreach collection="colList" item="col">
				, cast(cast(VAC_${col.Code} as DECIMAL(9,4)) as float) as "VAC_${col.Code}"
			</foreach>
			, cast(cast(EtcVac as DECIMAL(9,4)) as float) as "EtcVac"
		FROM(
			SELECT MAX(UserCode) as UserCode
				, MAX(Fn_BaseGetDictionary_S(#{lang}, DisplayName)) AS DisplayName
				, MAX(Fn_BaseGetDictionary_S(#{lang}, NVL(P.DeptName, A.DeptName))) AS DeptName
				, MAX(NVL(P.VacDay,0)) AS planVacDay
				, MAX(EnterDate) as EnterDate
				, MAX(RetireDate) as RetireDate
				, MAX(a.SortKey) as SortKey
				, MAX(A.DeptCode) as DeptCode
				, MAX(JobTitleSortKey) as JobTitleSortKey
				, MAX(JobPositionSortKey) as JobPositionSortKey
				, MAX(Fn_BaseGetDictionary_S(#{lang}, JobPositionName)) AS JobPositionName
				, MAX(Fn_BaseGetDictionary_S(#{lang}, JobTitleName)) AS JobTitleName
				<foreach collection="colList" item="col">
					, NVL(SUM(CASE WHEN V.VacFlag = #{col.Code} and V.Reserved1 = '+' THEN V.VacDay ELSE 0 END),0) VAC_${col.Code}
				</foreach>
				,NVL(SUM(CASE WHEN V.VacFlag NOT IN
				<foreach item="col" index="index" collection="colList" open="(" close=")" separator=",">
					#{col.Code}
				</foreach>
				and V.Reserved1 = '+'
				THEN V.VacDay ELSE 0 END),0) EtcVac
				, SUM(CASE WHEN V.Reserved1 = '+' THEN  V.VacDay ELSE 0 END) VacDay
				, MAX(A.TargetYear) as TargetYear
				, MAX(P.UseStartDate) as UseStartDate
				, MAX(P.UseEndDate) as UseEndDate
			FROM (
				SELECT A.UserCode
					, A.MultiDeptName AS DeptName
					, A.DeptCode
					, B.MultiDisplayName AS DisplayName
					, TO_CHAR(TO_DATE(REPLACE(B.EnterDate,'-',''),'YYYYMMDD'),'YYYY-MM-DD') AS EnterDate
					, B.RetireDate
					, CAST(B.SortKey AS INTEGER) AS SortKey
					, A.JobTitleSortKey
					, A.JobPositionSortKey
					, MultiJobPositionName AS JobPositionName
					, MultiJobTitleName AS JobTitleName
					, B.TargetYear
				FROM (	SELECT *
				FROM sys_object_user_basegroup
				<if test='userCodeList != null and userCodeList != ""'>
					<if test='userCodeList.size != 0'>
						<foreach collection="userCodeList" item="user" open="WHERE UserCode IN (" close=")" separator=",">
							#{user.UserCode}
						</foreach>
					</if>
				</if>
				) A
				LEFT JOIN (select UserCode, EnterDate, MultiDisplayName, RetireDate, SortKey
							, CASE WHEN TO_DATE(#{year}||TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD'),'YYYYMMDD')  <![CDATA[<=]]> TO_DATE(#{year}||TO_CHAR(SYSDATE,'MMDD'),'YYYYMMDD') THEN
								EXTRACT(YEAR FROM TO_DATE(#{year}||'0101','YYYYMMDD'))
							ELSE
								EXTRACT(YEAR FROM TO_DATE(#{year}||'0101','YYYYMMDD') - (INTERVAL '1' YEAR )) END AS TargetYear
							from sys_object_user where ENTERDATE is not null) B ON A.UserCode = B.UserCode
				<if test='deptCode != null and deptCode != ""'>
					JOIN (
					SELECT GroupCode
					FROM sys_object_group
					WHERE ';'||GroupPath LIKE '%;' || #{deptCode} || ';%'
					) C ON A.DeptCode = C.GroupCode
				</if>
				<if test='schDeptID != null and schDeptID != ""'>
					JOIN (
					SELECT GroupCode
					FROM sys_object_group
					WHERE ';'||GroupPath LIKE '%;' || #{schDeptID} || ';%'
					) C ON A.DeptCode = C.GroupCode
				</if>
				WHERE A.JobType = 'Origin'
				AND ( EXTRACT(YEAR FROM TO_DATE(REPLACE(B.EnterDate,'-','')))  <![CDATA[<=]]>  TO_NUMBER(#{year})
					AND EXTRACT(YEAR FROM TO_DATE(CASE WHEN B.RetireDate = '' OR B.RetireDate is null THEN '2999-01-01' ELSE B.RetireDate END)) >= TO_NUMBER(#{year})
				)
				<if test='domainCode != null and domainCode != ""'>
					AND A.Companycode = #{domainCode}
				</if>
				<if test='schEmploySel != null and schEmploySel != ""'>
					<choose>
						<when test='schEmploySel == "INOFFICE"'>
							AND B.RetireDate is null
							AND A.DeptCode NOT LIKE '%RetireDept'
						</when>
						<otherwise> <!-- RETIRE -->
							AND B.RetireDate is not null
							AND EXTRACT(YEAR FROM TO_DATE(REPLACE(B.RetireDate,'-',''),'YYYYMMDD')) = TO_NUMBER(#{year})
						</otherwise>
					</choose>
				</if>
			) A
			<if test='hideExtraVacation eq "N" '>
			LEFT JOIN (
				select YEAR, UR_Code, DeptName, NVL(VacDay,0.0)+NVL(EtcVacDay,0.0) as VacDay, UseStartDate, UseEndDate
				from (
					select YEAR, UR_Code, DeptName, UseStartDate, UseEndDate
						, NVL(VacDay,0.0) as VacDay
						, (select  SUM(VacDay)
								from vm_vacationplan vmp
								left join (select *
											from sys_base_code
											where  DomainID = #{domainID}
											and CodeGroup = 'VACATION_TYPE') bc
								on vmp.VacKind = bc.Code
								where vmp.VacKind <![CDATA[<>]]> 'PUBLIC'
								and bc.Reserved1 = '+'
								and vmp.UR_Code = p1.UR_Code
								and vmp.UseStartDate <![CDATA[>=]]> p1.UseStartDate
								and vmp.UseEndDate  <![CDATA[<=]]>  p1.UseEndDate
							) as EtcVacDay
						from (select UR_Code, YEAR, UseStartDate, UseEndDate, VacDay, DeptName, VacKind
								from vm_vacationplan
								where VacKind = 'PUBLIC'
						) p1
					) t
				) P ON P.YEAR = A.TargetYear AND  P.UR_Code = A.UserCode
			</if>
			<if test='hideExtraVacation eq "Y" '>
			LEFT JOIN (select UR_Code, YEAR, UseStartDate, UseEndDate, VacDay, DeptName, VacKind
				from vm_vacationplan
				where VacKind = 'PUBLIC'
			) P ON P.YEAR = A.TargetYear AND A.UserCode = P.UR_Code
			</if>
			LEFT JOIN (select vi.VacDay, vi.VACFLAG, C.GroupCode, vi.Sdate, vi.Edate, vi.UR_Code, C.Reserved1
				from vm_vacationinfo vi
				LEFT JOIN (SELECT B.Code
						, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
								Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
							ELSE
								B.CodeName
							END    AS CodeName
						, B.Reserved1
						, A.Code as GroupCode
						, B.SortKey
						, B.CodeID
					FROM (select * from sys_base_code
							WHERE IsUse = 'Y'
							AND DomainID = 0
					) A,
					sys_base_code B
					WHERE A.CodeID = B.ReservedInt
					AND B.IsUse = 'Y'
					AND B.DomainID = #{domainID}) C ON vi.VacFlag = C.Code
				) V
				ON A.UserCode = V.UR_Code
				<if test='hideExtraVacation eq "Y" '>
				AND V.GroupCode = 'PUBLIC'
				</if>
				AND V.Reserved1 = '+'
				AND TO_DATE(V.Sdate,'YYYY-MM-DD')  <![CDATA[>=]]>  TO_DATE(P.UseStartDate,'YYYYMMDD')
				AND TO_DATE(V.Edate,'YYYY-MM-DD')  <![CDATA[<=]]>  TO_DATE(P.UseEndDate,'YYYYMMDD')
			LEFT JOIN (SELECT  B.Code
			, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
					Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
				ELSE
					B.CodeName
				END AS CodeName
			,A.Code as GroupCode
			,B.Reserved1
			FROM
				(select *
					from sys_base_code
					WHERE IsUse = 'Y'
					AND DomainID = 0
					AND CodeGroup = 'VACATION_KIND'
				) A,
				sys_base_code B
			WHERE A.CodeID = B.ReservedInt
				AND B.IsUse = 'Y'
				AND B.DomainID = #{domainID}) C ON NVL(C.Reserved1,'N') = '+' AND  V.VacFlag = C.Code
				GROUP BY A.UserCode
		) A
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					WHERE DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<otherwise>
					WHERE DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
		<trim prefix='ORDER BY'>
			<if test='sortColumn == null or sortColumn == "" or sortDirection == null or sortDirection == ""'>
				JobPositionSortKey, SortKey ASC
			</if>
			<if test='sortColumn != null and sortColumn != "" and sortDirection != null and sortDirection != ""'>
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("JobPositionName")'>JobPositionName</when>
					<otherwise>DeptName</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter"/>
	</select>

	<select id="selectVacationListCntByTypeV2" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationListCntByTypeV2 */
		SELECT COUNT(*)
		FROM(
			SELECT UserCode
			, Fn_BaseGetDictionary_S(#{lang}, DisplayName) AS DisplayName
			, Fn_BaseGetDictionary_S(#{lang}, A.DeptName) AS DeptName
			, (select MAX(VacDay) from vm_vacationplan where A.UserCode = UR_Code and year = #{year}) AS planVacDay
			, EnterDate
			, RetireDate
			, A.DeptCode
			, Fn_BaseGetDictionary_S(#{lang}, JobPositionName) AS JobPositionName
			, Fn_BaseGetDictionary_S(#{lang}, JobTitleName) AS JobTitleName
			FROM (
				SELECT A.UserCode
				, A.MultiDeptName AS DeptName
				, A.DeptCode
				, B.MultiDisplayName AS DisplayName
				, B.EnterDate
				, B.RetireDate
				, CAST(B.SortKey AS INT) AS SortKey
				, A.JobTitleSortKey
				, A.JobPositionSortKey
				, MultiJobPositionName AS JobPositionName
				, MultiJobTitleName AS JobTitleName
				FROM (	SELECT *
				FROM sys_object_user_basegroup
				<if test='userCodeList != null and userCodeList != ""'>
					<if test='userCodeList.size != 0'>
						<foreach collection="userCodeList" item="user" open="WHERE UserCode IN (" close=")" separator=",">
							#{user.UserCode}
						</foreach>
					</if>
				</if>
				) A
				LEFT JOIN sys_object_user B ON A.UserCode = B.UserCode
				<if test='deptCode != null and deptCode != ""'>
					JOIN (
					SELECT GroupCode
					FROM sys_object_group
					WHERE CONCAT(';',GroupPath) LIKE '%;' || #{deptCode} || ';%'
					) C ON A.DeptCode = C.GroupCode
				</if>
				<if test='schDeptID != null and schDeptID != ""'>
					JOIN (
					SELECT GroupCode
					FROM sys_object_group
					WHERE CONCAT(';',GroupPath) LIKE '%;' || #{schDeptID} || ';%'
					) C ON A.DeptCode = C.GroupCode
				</if>
				WHERE A.JobType = 'Origin'
				AND ( EXTRACT(YEAR FROM TO_DATE(B.EnterDate)) <![CDATA[<=]]> #{year}
				AND EXTRACT(YEAR FROM TO_DATE(CASE WHEN B.RetireDate = '' THEN '2999-01-01' ELSE	B.RetireDate END)) >= #{year} )
				<if test='domainCode != null and domainCode != ""'>
					AND A.Companycode = #{domainCode}
				</if>
				<if test='schEmploySel != null and schEmploySel != ""'>
					<choose>
						<when test='schEmploySel == "INOFFICE"'>
							AND B.RetireDate IS NULL
							AND A.DeptCode NOT LIKE '%RetireDept'
						</when>
						<otherwise> <!-- RETIRE -->
							AND (B.RetireDate != '' OR B.RetireDate IS NOT NULL)
							AND EXTRACT(YEAR FROM TO_DATE(B.RetireDate)) = #{year}
						</otherwise>
					</choose>
				</if>
			) A
		) C
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					WHERE DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<otherwise>
					WHERE DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
	</select>

	<update id="updateVacationPlan" parameterType="cmap">
	/* groupware.vacation.updateVacationPlan */
		<selectKey keyProperty="FromDate,ToDate,DeptCode,DeptName,LastVacDay" resultType="cmap" order="BEFORE">
			SELECT
				CONCAT(#{year},'0101') AS "FromDate"
				, CONCAT(#{year},'1231') AS "ToDate"
				, (
					SELECT DeptCode FROM sys_object_user_basegroup WHERE UserCode = #{urCode} AND JobType = 'Origin'
				) AS "DeptCode"
				, (
					SELECT Fn_BaseGetDictionary_S(#{lang},NVL(MultiDeptName, DeptName)) AS DeptName FROM sys_object_user_basegroup WHERE UserCode = #{urCode} AND JobType = 'Origin'
				) AS "DeptName"
				, fn_GetLastVacDay(#{urCode}, #{year}, #{domainCode}) AS "LastVacDay"
			FROM dual
		</selectKey>

	    MERGE INTO VM_VACATIONPLAN G
		USING DUAL ON (G.UR_Code = #{urCode} AND G.YEAR =  #{year} AND G.VACKIND = 'PUBLIC')
		WHEN MATCHED THEN
		UPDATE SET G.VacDay = #{longVacDay}+#{LastVacDay}
			, G.UseStartDate =  #{FromDate}
			, G.UseEndDate = #{ToDate}
			, G.LongVacDay = #{longVacDay}
			, G.LastVacDay = #{LastVacDay}
		WHEN NOT MATCHED THEN 
		INSERT (G.UR_Code, G.YEAR, G.VacDay, G.LongVacDay, G.LastVacDay, G.UseStartDate, G.UseEndDate, G.RegisterCode, G.RegistDate, G.DeptCode, G.DeptName)
		VALUES (#{urCode}, #{year}, #{longVacDay}+#{LastVacDay}
			, #{longVacDay}
			, #{LastVacDay}
			, #{FromDate}
			, #{ToDate}
			, #{registerCode}
			, sysdate
			, #{DeptCode}
			, #{DeptName}
		)
	</update>

	<update id="updateVacationPlanV2" parameterType="cmap">
		/* groupware.vacation.updateVacationPlanV2 */
		<selectKey keyProperty="FromDate,ToDate,DeptCode,DeptName,LastVacDay" resultType="cmap" order="BEFORE">
			SELECT
				 (select CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]> TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
						EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))||TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')
					ELSE
						EXTRACT(YEAR FROM ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), -12 ))||TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')
					END
					from sys_object_user
					where USERCODE = #{urCode}
				) AS "FromDate"
				, (select CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]> TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
						TO_CHAR(ADD_MONTHS(TO_DATE(EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))||TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD'),'YYYYMMDD'), 12)-1,'YYYYMMDD')
					ELSE
						TO_CHAR(ADD_MONTHS(TO_DATE(EXTRACT(YEAR FROM ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), -12 ))||TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD'),'YYYYMMDD'), 12)-1,'YYYYMMDD')
					END
					from sys_object_user
					where USERCODE = #{urCode}
				) AS "ToDate"
				, (
					SELECT DeptCode FROM sys_object_user_basegroup WHERE UserCode = #{urCode} AND JobType = 'Origin'
				) AS "DeptCode"
				, (
					SELECT NVL(MultiDeptName, DeptName) AS DeptName FROM sys_object_user_basegroup WHERE UserCode = #{urCode} AND JobType = 'Origin'
				) AS "DeptName"
				,fn_GetLastVacDay(#{urCode}, TO_NUMBER(SUBSTR((select CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]> TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
						EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))||TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')
					ELSE
						EXTRACT(YEAR FROM ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), -12 ))||TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')
					END
					from sys_object_user
					where USERCODE = #{urCode}
				),1,4)), #{domainCode}) AS "LastVacDay"
			FROM dual
		</selectKey>

		MERGE INTO VM_VACATIONPLAN G
		USING DUAL ON (G.UR_Code = #{urCode} AND G.YEAR = TO_NUMBER(SUBSTR(#{FromDate},1,4)) AND G.VACKIND = 'PUBLIC')
		WHEN MATCHED THEN
		UPDATE SET G.VacDay = #{longVacDay}+#{LastVacDay}
			, G.UseStartDate =  #{FromDate}
			, G.UseEndDate = #{ToDate}
			, G.LongVacDay = #{longVacDay}
			, G.LastVacDay = #{LastVacDay}
		WHEN NOT MATCHED THEN
		INSERT (G.UR_Code, G.YEAR, G.VacDay, G.LongVacDay, G.LastVacDay, G.UseStartDate, G.UseEndDate, G.RegisterCode, G.RegistDate, G.DeptCode, G.DeptName)
		VALUES (#{urCode}, TO_NUMBER(SUBSTR(#{FromDate},1,4)),  #{longVacDay}+#{LastVacDay}
		, #{longVacDay}
		, #{LastVacDay}
		, #{FromDate}
		, #{ToDate}
		, #{registerCode}
		, sysdate
		, #{DeptCode}
		, #{DeptName}
		)
	</update>
	
	<update id="updateVacationMessageRead" parameterType="cmap">
	/* groupware.vacation.updateVacationMessageRead */
		MERGE INTO vm_message_reader G
		USING DUAL ON (G.MessageID = #{messageId} AND G.ReaderCode = #{readerCode} AND G.YEAR = #{year})
		WHEN MATCHED THEN 
		UPDATE SET G.ReadDate = SYSDATE
		WHEN NOT MATCHED THEN 
		INSERT (G.MessageID, G.ReaderCode, G.ReadDate, G.Year)
		VALUES (#{messageId}, #{readerCode}, SYSDATE, #{year})
	</update>
	
	<select id="selectVacationListByMonth" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationListByMonth */
	SELECT 	UserCode "UR_Code"
		, Fn_BaseGetDictionary_S(#{lang}, MAX(a.DisplayName)) AS "DisplayName"
		, Fn_BaseGetDictionary_S(#{lang}, nvl(MAX(P.DeptName), MAX(a.DeptName))) AS "DeptName"
		, Fn_BaseGetDictionary_S(#{lang}, MAX(JobPositionName)) AS "JobPositionName"
		, Fn_BaseGetDictionary_S(#{lang}, MAX(JobTitleName)) AS "JobTitleName"
		, MAX(JobPositionName)  "JobPositionName"
		, MAX(JobTitleName) "JobTitleName"
		, MAX(year) as "year"
		, MAX(EnterDate) "EnterDate"
		, MAX(RetireDate) "RetireDate"

		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '01' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_1"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '02' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_2"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '03' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_3"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '04' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_4"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '05' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_5"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '06' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_6"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '07' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_7"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '08' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_8"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '09' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_9"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '10' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_10"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '11' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_11"
		, CAST(nvl(SUM(CASE WHEN to_char(to_date(d.VacDate,'yyyy-mm-dd'),'mm') = '12' AND v.Reserved1 = '+'  THEN d.VacDay ELSE 0 END),0) as float) AS "VacDay_12"
		, CAST(nvl(max(p.VacDay),0.0) as float) AS "planVacDay"
		, CAST(nvl(SUM(CASE WHEN v.Reserved1 = '+' THEN  d.VacDay ELSE 0 END),0) as float) "useDays"
		, CAST(nvl(max(P.VacDay),0) 
		 - nvl(SUM(CASE WHEN v.Reserved1 = '+' THEN  d.VacDay ELSE 0 END),0) as float) "remindDays"
	FROM(
		SELECT u.UserCode
				, Fn_BaseGetDictionary_S(#{lang}, u.MultiDisplayName) AS DisplayName
				, Fn_BaseGetDictionary_S(#{lang}, ub.MultiDeptName) AS DeptName
				, EnterDate
				, RetireDate
				, u.SortKey
				, ub.DeptCode
				, JobTitleSortKey
				, JobPositionSortKey
				, JobLevelSortKey
				, Fn_BaseGetDictionary_S(#{lang}, ub.MultiJobPositionName) AS JobPositionName
				, Fn_BaseGetDictionary_S(#{lang}, ub.MultiJobTitleName) AS JobTitleName
				, row_number() over(ORDER BY 
				<if test='sortColumn == null or sortColumn == "" or sortDirection == null or sortDirection == ""'>
					JobPositionSortKey, u.SortKey ASC
				</if>
				<if test='sortColumn != null and sortColumn != "" and sortDirection != null and sortDirection != ""'>
					<choose>
						<when test='sortColumn.equalsIgnoreCase("DisplayName")'>u.DisplayName</when>
						<when test='sortColumn.equalsIgnoreCase("JobPositionName")'>JobPositionName</when>
						<when test='sortColumn.equalsIgnoreCase("EnterDate")'>EnterDate</when>
						<when test='sortColumn.equalsIgnoreCase("RetireDate")'>RetireDate</when>
						<otherwise>ub.DeptName</otherwise>
					</choose>
					<choose>
						<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
						<otherwise> DESC</otherwise>
					</choose>
				</if>)  rnum
		FROM sys_object_user u
		JOIN sys_object_user_basegroup ub ON u.UserCode = ub.UserCode and JobType = 'Origin'
		JOIN sys_object_group g ON ub.DeptCode = g.GroupCode 
			<if test='deptCode != null and deptCode != ""'> and ';'||GroupPath LIKE '%;'||#{deptCode} ||';%'</if>
			<if test='schDeptID != null and schDeptID != ""'> and ';'||GroupPath LIKE '%;'||#{schDeptID} ||';%'</if>
		WHERE ( substr(u.EnterDate,0,4) <![CDATA[<=]]> #{year}
		AND substr(nvl(u.RetireDate,'2099'),0,4)  >= #{year} )
			<if test='domainCode != null and domainCode != ""'>
				AND ub.Companycode = #{domainCode}
			</if>
			<if test='schEmploySel != null and schEmploySel != ""'>
				<choose>
					<when test='schEmploySel == "INOFFICE"'>
						AND u.RetireDate is null
						AND ub.DeptCode NOT LIKE '%RetireDept'
					</when>
					<otherwise> <!-- RETIRE -->
						AND u.RetireDate is not null
					</otherwise>
				</choose>
			</if>
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "deptName"'>
						AND ub.DeptName LIKE CONCAT('%', #{schTxt}, '%')
					</when>
					<otherwise>
						AND u.DisplayName LIKE CONCAT('%', #{schTxt}, '%')
					</otherwise>
				</choose>
			</if>
		) A
		LEFT JOIN vm_vacationplan p ON 	p.VacKind = 'PUBLIC' AND p.UR_Code = a.UserCode 
			AND <if test='stndCur == "Y"'>to_char(sysdate,'yyyy') BETWEEN  UseStartDate AND UseEndDate </if>
				<if test='stndCur != "Y"'>p.year=#{year}</if>	
		LEFT JOIN vm_vacationinfo_day d  on a.UserCode = d.UR_Code AND d.VacDate BETWEEN to_char(to_date(p.UseStartDate, 'yyyy-mm-dd'), 'yyyy-mm-dd') AND  to_char(to_date(P.UseEndDate , 'yyyy-mm-dd'), 'yyyy-mm-dd')
	    LEFT JOIN sys_base_code v ON  d.VacFlag =  v.CODE AND v.CodeGroup = 'VACATION_TYPE' AND v.IsUse ='Y'	AND v.DomainID = #{domainID} 
	    LEFT JOIN sys_base_code t ON  v.ReservedInt = t.CodeID  <if test='hideExtraVacation eq "Y" '>AND t.Code = 'PUBLIC' </if>
		WHERE rnum BETWEEN #{rowStart} AND #{rowEnd}
		GROUP BY a.UserCode, rnum, JobTitleSortKey, JobLevelSortKey, JobPositionSortKey, DisplayName
		<trim prefix="ORDER BY"  prefixOverrides =",">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			JobTitleSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			JobLevelSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			JobPositionSortKey ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			DisplayName ASC
				  		</if>
				  	</foreach>
				  	, rnum
			  	</when>
			</choose>
		</trim>
	</select>
	
	<select id="selectVacationListCntByMonth" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationListCntByMonth */
		SELECT count(u.UserCode)
		FROM sys_object_user u
		JOIN sys_object_user_basegroup ub ON u.UserCode = ub.UserCode and JobType = 'Origin'
		JOIN sys_object_group g ON ub.DeptCode = g.GroupCode 
			<if test='deptCode != null and deptCode != ""'> and ';'||GroupPath LIKE '%;'||#{deptCode} ||';%'</if>
			<if test='schDeptID != null and schDeptID != ""'> and ';'||GroupPath LIKE '%;'||#{schDeptID} ||';%'</if>
		WHERE ( substr(u.EnterDate,0,4) <![CDATA[<=]]> #{year}
		AND substr(nvl(u.RetireDate,'2099'),0,4)  >= #{year} )
			<if test='domainCode != null and domainCode != ""'>
				AND ub.Companycode = #{domainCode}
			</if>
			<if test='schEmploySel != null and schEmploySel != ""'>
				<choose>
					<when test='schEmploySel == "INOFFICE"'>
						AND u.RetireDate is null
						AND ub.DeptCode NOT LIKE '%RetireDept'
					</when>
					<otherwise> <!-- RETIRE -->
						AND u.RetireDate is not null
					</otherwise>
				</choose>
			</if>
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "deptName"'>
						AND ub.DeptName LIKE '%'|| #{schTxt}|| '%'
					</when>
					<otherwise>
						AND u.DisplayName LIKE '%'|| #{schTxt}|| '%'
					</otherwise>
				</choose>
			</if>
	</select>

	<select id="selectVacationListByMonthV2" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationListByMonthV2 */
	<include refid="oracle.include.pagingHeader"/>
		SELECT UR_Code AS "UR_Code"
		, DisplayName AS "DisplayName"
		, NVL(planVacDay,0.0) AS "planVacDay"
		<if test='hideEarlyVacation eq "Y" '>
			, cast(cast(TO_CHAR(NVL(totVacDays,0.0), 'fm90.000') as DECIMAL(9,3)) as float) AS "useDays"
			, cast(cast(TO_CHAR(NVL(planVacDay,0.0) - NVL(totVacDays,0.0), 'fm90.000') as DECIMAL(9,3)) as float) AS "remindDays"
		</if>
		<if test='hideEarlyVacation eq "N" '>
			, cast(cast(TO_CHAR(NVL(totVacDays,0.0) + NVL(aforeTotVacDays,0.0), 'fm90.000') as DECIMAL(9,3)) as float) AS "useDays"
			, cast(cast(TO_CHAR(NVL(planVacDay,0.0) - (NVL(totVacDays,0.0) + NVL(aforeTotVacDays,0.0)), 'fm90.000') as DECIMAL(9,3)) as float) AS "remindDays"
		</if>
		, cast(cast(janTotVacDay as DECIMAL(9,3)) as float) AS "janTotVacDay"
		, cast(cast(febTotVacDay as DECIMAL(9,3)) as float) AS "febTotVacDay"
		, cast(cast(marTotVacDay as DECIMAL(9,3)) as float) AS "marTotVacDay"
		, cast(cast(aprTotVacDay as DECIMAL(9,3)) as float) AS "aprTotVacDay"
		, cast(cast(mayTotVacDay as DECIMAL(9,3)) as float) AS "mayTotVacDay"
		, cast(cast(junTotVacDay as DECIMAL(9,3)) as float) AS "junTotVacDay"
		, cast(cast(julTotVacDay as DECIMAL(9,3)) as float) AS "julTotVacDay"
		, cast(cast(augTotVacDay as DECIMAL(9,3)) as float) AS "augTotVacDay"
		, cast(cast(sepTotVacDay as DECIMAL(9,3)) as float) AS "sepTotVacDay"
		, cast(cast(octTotVacDay as DECIMAL(9,3)) as float) AS "octTotVacDay"
		, cast(cast(novTotVacDay as DECIMAL(9,3)) as float) AS "novTotVacDay"
		, cast(cast(decTotVacDay as DECIMAL(9,3)) as float) AS "decTotVacDay"
		, Fn_BaseGetDictionary_S(#{lang}, DeptName) AS "DeptName"
		, Fn_BaseGetDictionary_S(#{lang}, JobPositionName) AS "JobPositionName"
		, Fn_BaseGetDictionary_S(#{lang}, JobTitleName) AS "JobTitleName"
		, #{year} AS "year"
		, EnterDate AS "EnterDate"
		, RetireDate AS "RetireDate"
		FROM (
			SELECT
				UR_Code, DisplayName
				, janTotVacDay, febTotVacDay, marTotVacDay, aprTotVacDay, mayTotVacDay, junTotVacDay
				, julTotVacDay, augTotVacDay, sepTotVacDay, octTotVacDay, novTotVacDay, decTotVacDay
				, DeptName, JobPositionName, JobTitleName, totVacDays, aforeTotVacDays
				, EnterDate, RetireDate, DeptCode, SortKey, JobTitleSortKey
				, JobPositionSortKey, TargetYear
				, (select
					<if test='hideExtraVacation eq "Y" '>
						cast(cast(TO_CHAR(SUM(VacDay), 'fm90.000') as DECIMAL(9,3)) as float)
					</if>
					<if test='hideExtraVacation eq "N" '>
						cast(cast(TO_CHAR(SUM(VacDay) + SUM(EtcVacDay), 'fm90.000') as DECIMAL(9,3)) as float)
					</if>
					from (select UR_Code, YEAR
							, NVL(VacDay,0.0) as VacDay
							<if test='hideExtraVacation eq "N" '>
								, (select NVL(SUM(VacDay),0.0)
								from vm_vacationplan vmp
								left join (select *
											from sys_base_code
											where  DomainID = #{domainID}
											and CodeGroup = 'VACATION_TYPE') bc
								on vmp.VacKind = bc.Code
								where vmp.VacKind not in ('PUBLIC')
								and bc.Reserved1 = '+'
								and vmp.UR_Code =  p1.UR_Code
								and TO_DATE(UseStartDate,'YYYYMMDD')  <![CDATA[>=]]>  TO_DATE(p1.UseStartDate,'YYYYMMDD')
								and TO_DATE(UseEndDate,'YYYYMMDD')   <![CDATA[<=]]>   TO_DATE(p1.UseEndDate,'YYYYMMDD')
								) as EtcVacDay
							</if>
							from
							(select UR_Code, YEAR, UseStartDate, UseEndDate, VacDay, DeptName, VacKind
								from vm_vacationplan
								where VacKind in ('PUBLIC')) p1
							) P
					WHERE P.YEAR = A.TargetYear
					AND A.UR_Code = P.UR_Code
				) AS planVacDay
		FROM
		(
		SELECT UserCode AS UR_Code
		, DisplayName
		, NVL(janTotVacDay,0) AS janTotVacDay
		, NVL(febTotVacDay,0) AS febTotVacDay
		, NVL(marTotVacDay,0) AS marTotVacDay
		, NVL(aprTotVacDay,0) AS aprTotVacDay
		, NVL(mayTotVacDay,0) AS mayTotVacDay
		, NVL(junTotVacDay,0) AS junTotVacDay
		, NVL(julTotVacDay,0) AS julTotVacDay
		, NVL(augTotVacDay,0) AS augTotVacDay
		, NVL(sepTotVacDay,0) AS sepTotVacDay
		, NVL(octTotVacDay,0) AS octTotVacDay
		, NVL(novTotVacDay,0) AS novTotVacDay
		, NVL(decTotVacDay,0) AS decTotVacDay
		, DeptName
		, JobPositionName
		, JobTitleName
		, NVL(totVacDays,0) AS totVacDays
		, NVL(aforeTotVacDays,0) AS aforeTotVacDays
		, EnterDate
		, RetireDate
		, DeptCode
		, SortKey
		, JobTitleSortKey
		, JobPositionSortKey
		, TargetYear
		FROM (
		SELECT A.UserCode
		, NVL(D.DeptName, A.MultiDeptName) AS DeptName
		, A.DeptCode
		, Fn_BaseGetDictionary_S(#{lang},  B.MultiDisplayName) AS DisplayName
		, B.EnterDate
		, B.RetireDate
		, CAST(B.SortKey AS INTEGER) AS SortKey
		, A.JobTitleSortKey
		, A.JobPositionSortKey
		, JobTitleName
		, JobPositionName
		, B.TargetYear
		FROM sys_object_user_basegroup A
		LEFT JOIN (select UserCode, EnterDate, MultiDisplayName, RetireDate, SortKey
				, CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]>  TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
					EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
				ELSE
					EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR )) END AS TargetYear
				from sys_object_user where ENTERDATE is not null ) B ON A.UserCode = B.UserCode
		LEFT JOIN vm_vacationplan D ON A.UserCode = D.UR_Code AND	D.year = #{year} AND D.VacKind='PUBLIC'
		<if test='deptCode != null and deptCode != ""'>
			JOIN (
			SELECT GroupCode
			FROM sys_object_group
			WHERE CONCAT(';',GroupPath) LIKE '%;' || #{deptCode} || ';%'
			) C ON A.DeptCode = C.GroupCode
		</if>
		<if test='schDeptID != null and schDeptID != ""'>
			JOIN (
			SELECT GroupCode
			FROM sys_object_group
			WHERE CONCAT(';',GroupPath) LIKE '%;' || #{schDeptID} || ';%'
			) C ON A.DeptCode = C.GroupCode
		</if>
		WHERE A.JobType = 'Origin'
		AND ( EXTRACT(YEAR FROM TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD')) <![CDATA[<=]]> #{year} AND EXTRACT(YEAR FROM TO_DATE(CASE WHEN B.RetireDate = '' or B.RetireDate is null THEN '2999-01-01' ELSE	B.RetireDate END)) >= #{year} )
		<if test='domainCode != null and domainCode != ""'>
			AND A.Companycode = #{domainCode}
		</if>
		<if test='schEmploySel != null and schEmploySel != ""'>
			<choose>
				<when test='schEmploySel == "INOFFICE"'>
					AND (B.RetireDate IS NULL OR B.RetireDate = '')
					AND A.DeptCode NOT LIKE '%RetireDept'
				</when>
				<otherwise> <!-- RETIRE -->
					AND (B.RetireDate != '' AND B.RetireDate IS NOT NULL)
					AND EXTRACT(YEAR FROM TO_DATE(B.RetireDate)) = #{year}
				</otherwise>
			</choose>
		</if>
		) A
		LEFT JOIN (
		SELECT P.UR_Code as UR_Code
		, P.YEAR as YEAR
		, SUM(CASE WHEN (V.CodeID IS NOT NULL AND NVL(V.Reserved2, ' ') = ' ') THEN V.VacDay ELSE 0 END) AS totVacDays
		, SUM(CASE WHEN (V.CodeID IS NOT NULL AND NVL(V.Reserved2, ' ') != ' ') THEN V.VacDay ELSE 0 END) AS aforeTotVacDays

		<if test='hideEarlyVacation eq "Y" '>
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 1 AND NVL(V.Reserved2, ' ') = ' ' THEN V.VacDay ELSE 0 END) AS janTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 2 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0	END) AS febTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 3 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0 END) AS marTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 4 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0	END) AS aprTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 5 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0 END) AS mayTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 6 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0	END) AS junTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 7 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0 END) AS julTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 8 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0	END) AS augTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 9 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0 END) AS sepTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 10 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0 END) AS octTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 11 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0 END) AS novTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 12 AND NVL(V.Reserved2, ' ') = ' '  THEN V.VacDay ELSE 0 END) AS decTotVacDay
		</if>
		<if test='hideEarlyVacation eq "N" '>
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 1 THEN V.VacDay ELSE 0 END) AS janTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 2 THEN V.VacDay ELSE 0	END) AS febTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 3 THEN V.VacDay ELSE 0 END) AS marTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 4 THEN V.VacDay ELSE 0	END) AS aprTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 5 THEN V.VacDay ELSE 0 END) AS mayTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 6 THEN V.VacDay ELSE 0	END) AS junTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 7 THEN V.VacDay ELSE 0 END) AS julTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 8 THEN V.VacDay ELSE 0	END) AS augTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 9 THEN V.VacDay ELSE 0 END) AS sepTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 10 THEN V.VacDay ELSE 0 END) AS octTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 11 THEN V.VacDay ELSE 0 END) AS novTotVacDay
		, SUM(CASE WHEN EXTRACT(MONTH FROM TO_DATE(V.Sdate, 'YYYY-MM-DD')) = 12 THEN V.VacDay ELSE 0 END) AS decTotVacDay
		</if>
		FROM (select * from VM_VACATIONPLAN where VACKIND='PUBLIC') P
		LEFT JOIN (select NVL(vi.VacDay,0.0) AS VacDay, vi.VACFLAG, C.GroupCode, vi.Sdate, vi.Edate, vi.UR_Code, C.Reserved1, C.RESERVED2, C.CODEID
		from vm_vacationinfo vi
		,(SELECT B.Code
		, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
		Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
		ELSE
		B.CodeName
		END    AS CodeName
		, B.Reserved1
		, A.Code as GroupCode
		, B.SortKey
		, B.CodeID
		, B.RESERVED2
		FROM (select * from sys_base_code
		WHERE IsUse = 'Y'
		AND DomainID = 0
		) A,
		sys_base_code B
		WHERE A.CodeID = B.ReservedInt
		AND B.IsUse = 'Y'
		AND B.DomainID = #{domainID}) C WHERE vi.VacFlag = C.Code
		) V
		ON  V.UR_CODE = P.UR_CODE AND   V.Reserved1 = '+'
		<if test='hideExtraVacation eq "Y" '>
		AND  V.GroupCode = 'PUBLIC'
		</if>
		AND TO_DATE(V.Sdate,'YYYY-MM-DD')  <![CDATA[>=]]>  TO_DATE(P.UseStartDate,'YYYYMMDD')
		AND TO_DATE(V.Edate,'YYYY-MM-DD')  <![CDATA[<=]]>  TO_DATE(P.UseEndDate,'YYYYMMDD')



		GROUP BY P.UR_Code, P.YEAR, V.UR_CODE
		) B ON A.UserCode = B.UR_Code  AND B.YEAR = A.TargetYear
		<if test='displayName != null and displayName != ""'>
			WHERE DisplayName LIKE '%' || #{displayName} || '%'
		</if>
		) A
	) T
		<trim prefix='ORDER BY'>
			<if test='sortColumn == null or sortColumn == "" or sortDirection == null or sortDirection == ""'>
				JobPositionSortKey, SortKey ASC
			</if>
			<if test='sortColumn != null and sortColumn != "" and sortDirection != null and sortDirection != ""'>
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<otherwise>DeptName</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter"/>
	</select>

	<select id="selectVacationListCntByMonthV2" resultType="java.lang.Long">
		SELECT COUNT(UserCode)
		FROM (
		SELECT UserCode
		FROM (
		SELECT A.UserCode
		, Fn_BaseGetDictionary_S(#{lang},  B.MultiDisplayName) AS DisplayName
		FROM sys_object_user_basegroup A
		LEFT JOIN sys_object_user B ON A.UserCode = B.UserCode
		<if test='deptCode != null and deptCode != ""'>
			INNER JOIN (
			SELECT GroupCode
			FROM sys_object_group
			WHERE CONCAT(';',GroupPath) LIKE '%;' || #{deptCode} || ';%'
			) C ON A.DeptCode = C.GroupCode
		</if>
		<if test='schDeptID != null and schDeptID != ""'>
			INNER JOIN (
			SELECT GroupCode
			FROM sys_object_group
			WHERE CONCAT(';',GroupPath) LIKE '%;' || #{schDeptID} || ';%'
			) C ON A.DeptCode = C.GroupCode
		</if>
		WHERE A.JobType = 'Origin'
		AND ( EXTRACT(YEAR FROM TO_DATE(B.EnterDate)) <![CDATA[<=]]> #{year} AND EXTRACT(YEAR FROM TO_DATE(CASE WHEN B.RetireDate = '' THEN '2999-01-01' ELSE	B.RetireDate END)) >= #{year} )
		<if test='domainCode != null and domainCode != ""'>
			AND A.Companycode = #{domainCode}
		</if>
		<if test='schEmploySel != null and schEmploySel != ""'>
			<choose>
				<when test='schEmploySel == "INOFFICE"'>
					AND B.RetireDate IS NULL
					AND A.DeptCode NOT LIKE '%RetireDept'
				</when>
				<otherwise> <!-- RETIRE -->
					AND (B.RetireDate != '' OR B.RetireDate IS NOT NULL)
					AND EXTRACT(YEAR FROM TO_DATE(B.RetireDate)) = #{year}
				</otherwise>
			</choose>
		</if>
		) A
		<if test='displayName != null and displayName != ""'>
			WHERE DisplayName LIKE '%' || #{displayName} || '%'
		</if>
		) A
	</select>
	
	<select id="selectVacationMessageReadList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationMessageReadList */
		<include refid="oracle.include.pagingHeader"/>
	    SELECT UserCode AS "UserCode"
	    		, DisplayName AS "DisplayName"
	    		, DeptName AS "DeptName"
	    		, JobPositionName AS "JobPositionName"
	    		, EnterDate AS "EnterDate"
	    		, RetireDate AS "RetireDate"
			    , TO_CHAR(B.ReadDate, 'YYYY.MM.DD HH24:MI:SS') AS "ReadDate"
		FROM (SELECT A.UserCode
					   , Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
					   , A.EnterDate
					   , A.RetireDate
					   , B.DeptCode
					   , Fn_BaseGetDictionary_S(#{lang}, B.MultiDeptName) AS DeptName
					   , Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
					   , B.CompanyCode
				  FROM sys_object_user A
				  LEFT JOIN (SELECT UserCode,  DeptCode, MultiDeptName, MultiJobPositionName, CompanyCode
						  	   FROM sys_object_user_basegroup 
						  	  WHERE JobType = 'Origin'
						  	) B
				    ON A.UserCode = B.UserCode
				    WHERE B.CompanyCode = #{domainCode}
				    <!-- 
				    AND A.IsUse = 'Y'
					AND A.IsDisplay = 'Y'
					AND A.IsHR = 'Y'
					 -->
				    ) A
		LEFT JOIN (SELECT MessageID, ReaderCode, ReadDate 
		  			   FROM vm_message_reader 
		  			  WHERE YEAR = #{year} AND MessageID = #{messageId}) B
		ON A.UserCode = B.ReaderCode 
		WHERE 1 = 1 
		<include refid="chooseEmpType"/>
	 	<if test='schReadTypeSel != null and schReadTypeSel !=""'>
		 	<choose>
				<when test='schReadTypeSel == "read"'>
					AND ReadDate IS NOT NULL
	            </when>
	            <otherwise>
	            	AND ReadDate IS NULL
	            </otherwise>
			</choose>
	 	</if>
	 	<if test='schEmploySel != null and schEmploySel != ""'>
			<choose>
				<when test='schEmploySel == "INOFFICE"'>
					AND A.RetireDate IS NULL
					AND A.DeptCode NOT LIKE '%RetireDept'
				</when>
				<otherwise> <!-- RETIRE -->
					AND A.RetireDate IS NOT NULL
					AND EXTRACT(YEAR FROM TO_DATE(A.RetireDate, 'YYYY-MM-DD')) = #{year}
				</otherwise>
			</choose>
		</if>
	 	<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
				   AND DeptName LIKE '%' || #{schTxt} || '%'
	            </when>
	            <otherwise>
	               AND DisplayName LIKE '%' || #{schTxt} || '%'
	            </otherwise>
			</choose>
	 	</if>		 
	 	<trim prefix='ORDER BY'>
			<if test='sortColumn != null and sortColumn != "" and sortDirection != null and sortDirection != ""'>
				<choose>
					<when test='sortColumn.equalsIgnoreCase("JobPositionName")'>JobPositionName</when>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("EnterDate")'>EnterDate</when>
					<when test='sortColumn.equalsIgnoreCase("RetireDate")'>RetireDate</when>
					<when test='sortColumn.equalsIgnoreCase("ReadDate")'>ReadDate</when>
					<otherwise>DeptName</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
				<include refid="oracle.include.listOrderBy"/>
			</if>
	 	</trim>
	 	<include refid="oracle.include.pagingFooter"/>
	</select>
	
	<select id="selectVacationMessageReadListCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationMessageReadListCnt */
		SELECT COUNT(UserCode) as "cnt"
		  FROM (SELECT A.UserCode, A.DisplayName, A.EnterDate, A.RetireDate,
					   B.DeptCode, B.DeptName, B.JobPositionName
				  FROM sys_object_user A
				  LEFT JOIN (SELECT UserCode, DeptCode, DeptName, JobPositionName, CompanyCode
						  	   FROM sys_object_user_basegroup 
						  	  WHERE JobType = 'Origin'
						  	) B
				    ON A.UserCode = B.UserCode
				    WHERE B.CompanyCode = #{domainCode}	
					<!-- 
				    AND A.IsUse = 'Y'
					AND A.IsDisplay = 'Y'
					AND A.IsHR = 'Y'
					 -->
				    ) A
		  LEFT JOIN (SELECT MessageID, ReaderCode, ReadDate 
		  			   FROM vm_message_reader 
		  			  WHERE YEAR = #{year} AND MessageID = #{messageId}) B
		    ON A.UserCode = B.ReaderCode 
		 WHERE 1 = 1
		 <include refid="chooseEmpType"/>
	 	 <if test='schReadTypeSel != null and schReadTypeSel !=""'>
		 	<choose>
				<when test='schReadTypeSel == "read"'>
					AND ReadDate IS NOT NULL
	            </when>
	            <otherwise>
	            	AND ReadDate IS NULL
	            </otherwise>
			</choose>
		 </if>
		 <if test='schEmploySel != null and schEmploySel != ""'>
			<choose>
				<when test='schEmploySel == "INOFFICE"'>
					AND A.RetireDate IS NULL
					AND A.DeptCode NOT LIKE '%RetireDept'
				</when>
				<otherwise> <!-- RETIRE -->
					AND A.RetireDate IS NOT NULL
					AND EXTRACT(YEAR FROM TO_DATE(A.RetireDate, 'YYYY-MM-DD')) = #{year}
				</otherwise>
			</choose>
		 </if>
		 <if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
				   AND DeptName LIKE '%' || #{schTxt} || '%'
	            </when>
	            <otherwise>
	               AND DisplayName LIKE '%' || #{schTxt} || '%'
	            </otherwise>
			</choose>
		 </if>		 
	</select>
	
	<select id="selectVacationUsePlanList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationUsePlanList */
		<include refid="oracle.include.pagingHeader"/>
		SELECT DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
			, UserCode AS "UserCode"
			, DisplayName AS "DisplayName"
			, EnterDate AS "EnterDate"
			, TargetYear AS "TargetYear"
			, IsOneYear AS "IsOneYear"
			, #{year} AS "YEAR"
			, VacDayPublic+VacDayExtra AS "OWNDAYS"
			, USEDAYS AS "USEDAYS"
			, (VacDayPublic+VacDayExtra) - USEDAYS AS "REMINDDAYS"
			, VACPLAN AS "VACPLAN"
		FROM (
			SELECT A.DeptName
				, A.JobPositionName
				, A.UserCode
				, A.DisplayName
				, A.EnterDate
				, A.TargetYear
				, IsOneYear
				, JobPositionSortKey
				, SortKey
				, CAST(NVL(B.VacDay, 0.0) AS FLOAT)      AS VacDayPublic
				, (SELECT CAST(NVL(SUM(E.VacDay), 0.0) AS FLOAT)
					FROM vm_vacationplan E
					WHERE E.VacKind <![CDATA[<>]]> 'PUBLIC'
						and E.UseStartDate <![CDATA[>=]]> B.UseStartDate
						and E.UseEndDate <![CDATA[<=]]> B.UseEndDate
						and E.UR_Code = B.UR_Code
				) AS VacDayExtra
				, (SELECT CAST(NVL(SUM(VacDay), 0.0) AS FLOAT) FROM vm_vacationinfo WHERE A.UserCode = UR_Code
					AND TO_DATE(Sdate, 'YYYY-MM-DD') <![CDATA[>=]]> TO_DATE(B.UseStartDate, 'YYYYMMDD')
					AND TO_DATE(Edate, 'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(B.UseEndDate, 'YYYYMMDD')
					AND VacFlag IN (SELECT code FROM sys_base_code cd WHERE cd.domainid= #{domainID} AND cd.CodeGroup = 'VACATION_TYPE' AND NVL(Reserved1,'N') = '+' )
				) AS USEDAYS
				, C.VACPLAN
			FROM (
				SELECT *
				FROM (
					SELECT U.UserCode
						, U.SortKey
						, Fn_BaseGetDictionary_S(#{lang}, U.MultiDisplayName) AS DisplayName
						, U.EnterDate
						, U.RetireDate
						, UB.CompanyCode
						, UB.DeptCode
						, Fn_BaseGetDictionary_S(#{lang}, NVL(UB.MultiDeptName, UB.DeptName)) AS DeptName
						, Fn_BaseGetDictionary_S(#{lang}, UB.MultiJobPositionName) AS JobPositionName
						, UB.JobPositionSortKey
						, CASE WHEN CFG.CreateMethod = 'J' THEN
								CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]> TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
									EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
								ELSE
									EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR ))
								END
						  ELSE
								CASE WHEN TO_DATE(REPLACE(U.EnterDate,'-',''),'YYYYMMDD') + (INTERVAL '12' MONTH)  <![CDATA[<=]]>  SYSDATE THEN
									EXTRACT(YEAR FROM TO_DATE(#{year},'YYYY'))
								ELSE
									EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR ))
								END
						  END AS TargetYear
						  , (CASE WHEN TO_CHAR(TO_DATE(REPLACE(U.EnterDate,'-',''),'YYYYMMDD') + (INTERVAL '12' MONTH), 'YYYYMMDD') <![CDATA[<=]]> TO_CHAR(SYSDATE, 'YYYYMMDD')	-- 입사 1년 이상
							THEN 1
							ELSE 0 END
							) as IsOneYear
				   FROM sys_object_user U
				   LEFT JOIN vm_config CFG ON CFG.CompanyCode = #{domainCode}
				   LEFT JOIN sys_object_user_basegroup UB ON U.UserCode = UB.UserCode AND UB.JobType = 'Origin'
				) U
				WHERE U.EnterDate IS NOT NULL
					AND LENGTH(REPLACE(U.EnterDate,'-','')) = 8
				<if test='empType != null and empType != ""'>
					<choose>
						<when test='empType == "normal"'>
						AND U.IsOneYear = 1
						</when>
						<when test='empType != "normal"'>
							AND U.IsOneYear = 0
						</when>
					</choose>
				</if>
				<if test='domainCode != null and domainCode != ""'>
					AND U.CompanyCode = #{domainCode}
				</if>
				<if test='urCode != null and urCode != ""'>
					AND U.UserCode = #{urCode}
				</if>
				<if	test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
					<choose>
						<when test='schTypeSel == "deptName"'>
							AND U.DeptName LIKE '%' || #{schTxt} || '%'
						</when>
						<otherwise>
							AND U.DisplayName LIKE '%' || #{schTxt} || '%'
						</otherwise>
					</choose>
				</if>
				<if test='schEmploySel != null and schEmploySel != ""'>
					<choose>
						<when test='schEmploySel == "INOFFICE"'>
							AND (U.RetireDate = '' OR U.RetireDate IS NULL)
							AND U.DeptCode NOT LIKE '%RetireDept'
						</when>
						<otherwise> <!-- RETIRE -->
							AND (U.RetireDate != '' OR U.RetireDate IS NOT NULL)
							AND EXTRACT(YEAR FROM TO_DATE(U.RetireDate)) = #{year}
						</otherwise>
					</choose>
				</if>
			) A
			LEFT JOIN vm_vacationplan B ON A.UserCode = B.UR_Code AND B.YEAR = A.TargetYear  AND B.VacKind = 'PUBLIC'
			LEFT JOIN vm_useage_plan C ON A.UserCode = C.UR_Code AND C.YEAR = A.TargetYear
			<trim prefix='ORDER BY'>
				<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
					JobPositionSortKey ASC, A.SortKey ASC
				</if>
				<if test='sortColumn != null and sortColumn != "" and sortDirection != null and sortDirection != ""'>
					<choose>
						<when test='sortColumn.equalsIgnoreCase("JobPositionName")'>JobPositionName</when>
						<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
						<otherwise>DeptName</otherwise>
					</choose>
					<choose>
						<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
						<otherwise> DESC</otherwise>
					</choose>
				</if>
			</trim>
		) TBL
		<include refid="oracle.include.pagingFooter"/>
	</select>
	
	<select id="selectVacationUsePlanListCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationUsePlanListCnt */
		SELECT COUNT(UserCode) AS "cnt"
		FROM (
			SELECT A.UserCode 
			FROM ( SELECT U.UserCode
				   FROM sys_object_user U
				   LEFT JOIN sys_object_user_basegroup UB ON U.UserCode = UB.UserCode AND UB.JobType = 'Origin'
				   <trim prefix="WHERE" prefixOverrides="AND|OR">
					   <include refid="chooseEmpType"/>
					   <if test='domainCode != null and domainCode != ""'>
							AND UB.CompanyCode = #{domainCode}
					   </if>
					   <if test='urCode != null and urCode != ""'>
							AND U.UserCode = #{urCode}
					   </if> 
					   <if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
							<choose>
								<when test='schTypeSel == "deptName"'>
								   AND UB.DeptName LIKE '%' || #{schTxt} || '%'
								</when>
								<otherwise>
								   AND U.DisplayName LIKE '%' || #{schTxt} || '%'
								</otherwise>
							</choose>
					   </if>
					   <if test='schEmploySel != null and schEmploySel != ""'>
							<choose>
								<when test='schEmploySel == "INOFFICE"'>
									AND U.RetireDate IS NULL
									AND UB.DeptCode NOT LIKE '%RetireDept'
								</when>
								<otherwise> <!-- RETIRE -->
									AND U.RetireDate IS NOT NULL
									AND EXTRACT(YEAR FROM TO_DATE(U.RetireDate, 'YYYY-MM-DD')) = #{year}
								</otherwise>
							</choose>
					   </if>
				   </trim>	
			) A
			LEFT JOIN vm_useage_plan C ON A.UserCode = C.UR_Code AND C.YEAR = #{year}
			GROUP BY A.UserCode, TO_CHAR(C.VACPLAN)
		) A 
	</select>
		
	<update id="updateVacationUsePlan" parameterType="cmap">
	/* groupware.vacation.updateVacationUsePlan */
		MERGE INTO VM_USEAGE_PLAN G
		USING (
		    SELECT B.DeptCode, B.DeptName, A.UserCode, A.DisplayName
		    FROM SYS_OBJECT_USER A
		    LEFT OUTER JOIN (
		        SELECT UserCode, DeptCode, DeptName
		        FROM sys_object_user_basegroup
		        WHERE JobType = 'Origin'
		    ) B
		    ON A.UserCode = B.UserCode
		    WHERE A.UserCode = #{urCode}
		)E ON (G.UR_Code = #{urCode} AND G.YEAR = #{year})
		WHEN MATCHED THEN 
		    UPDATE SET G.VACPLAN = #{usePlan}, G.INSERT_DATE = SYSDATE
		WHEN NOT MATCHED THEN 
		    INSERT (G.GR_CODE, G.GR_NAME, G.UR_CODE, G.UR_NAME, G.YEAR, G.VACPLAN, G.INSERT_DATE) 
		    VALUES (E.DeptCode, E.DeptName, E.UserCode, E.DisplayName, #{year}, #{usePlan}, SYSDATE)
	</update>
	
	<select id="selectVacationCancelDocList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationCancelDocList */
		<include refid="oracle.include.pagingHeader"/>
		SELECT UR_Code AS "UR_Code",
			   formKey AS "formKey",
			   DocSubject AS "DocSubject", 
			   InitiatorUnitName AS "InitiatorUnitName", 
			   InitiatorName AS "InitiatorName", 
			   FormName AS "FormName", 
			   EndDate AS "EndDate"
		FROM (
			SELECT A.UR_Code,
				   A.WorkItemID || ';' || A.ProcessID AS formKey,
				   B.DocSubject,
				   B.InitiatorUnitName,
				   B.InitiatorName,
				   B.FormName, 
				   B.EndDate
		  FROM vm_vacationinfo A
		  LEFT JOIN (SELECT ProcessArchiveID, DocSubject, InitiatorUnitName, InitiatorName, FormName, EndDate
					   FROM covi_approval4j_archive.jwf_processarchive
					) B
			ON A.ProcessID = B.ProcessArchiveID
		 WHERE A.ProcessID IS NOT NULL
		   AND A.GUBUN = 'VACATION_APPLY'
		   AND UR_Code = #{urCode}
		) A
		<trim prefix='ORDER BY'>
			<if test='sortColumn != null and sortColumn != "" and sortDirection != null and sortDirection != ""'>
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DocSubject")'>DocSubject</when>
					<when test='sortColumn.equalsIgnoreCase("InitiatorUnitName")'>InitiatorUnitName</when>
					<when test='sortColumn.equalsIgnoreCase("InitiatorName")'>InitiatorName</when>
					<when test='sortColumn.equalsIgnoreCase("FormName")'>FormName</when>
					<otherwise>EndDate</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
				<include refid="oracle.include.listOrderBy"/>
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter"/>
	</select>
		
	<select id="selectVacationCancelDocListCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationCancelDocListCnt */
		SELECT COUNT(VacationInfoID) AS cnt
		  FROM VM_VACATIONINFO
		 WHERE ProcessID IS NOT NULL
		   AND GUBUN = 'VACATION_APPLY'
		   AND UR_Code = #{urCode}
	</select>
	
	<select id="selectVacationToday" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationToday */
		SELECT A.UR_Code AS "UR_Code",
				A.UR_Name AS "UR_Name",
			   A.VacFlag AS "VacFlag",
			   C.CodeName AS "VacFlagName", 
			   (CASE WHEN A.Sdate = A.Edate THEN A.Sdate 
			   		 ELSE A.Sdate || ' ~ ' || A.Edate
			   		  END) AS "period",
			   B.DeptCode AS "DeptCode", 
			   B.DeptName AS "DeptName", 
			   B.JobPositionName AS "JobPositionName", 
			   A.DEPUTY_NAME AS "DEPUTY_NAME", 
			   A.GUBUN AS "GUBUN"
		  FROM VM_VACATIONINFO A
		  LEFT JOIN (SELECT A.UserCode, A.DisplayName, B.DeptName, B.JobPositionName, B.DeptCode, B.CompanyCode, (';'||C.GroupPath) AS GroupPath
					FROM sys_object_user A
					LEFT JOIN (SELECT UserCode, DeptName, JobPositionName, DeptCode, CompanyCode
					           FROM sys_object_user_basegroup 
					           WHERE JobType = 'Origin' ) B ON A.UserCode = B.UserCode
					LEFT JOIN sys_object_group C ON B.DeptCode = C.GroupCode
		  ) B ON A.UR_Code = B.UserCode
		  LEFT JOIN sys_base_code C
		    ON A.VacFlag = C.Code
		 WHERE VacYear = #{year}
		   AND B.GroupPath LIKE '%;'||#{deptCode}||';%'
		   AND GUBUN IN ('VACATION_APPLY', 'VACATION_CANCEL')
		   AND Sdate <![CDATA[<=]]> TRUNC(TO_DATE(#{localCurrentDate},'YYYY-MM-DD HH24:MI:SS')+7)
		   AND Edate <![CDATA[>=]]> TRUNC(TO_DATE(#{localCurrentDate},'YYYY-MM-DD HH24:MI:SS'))
		   AND C.DomainID = #{domainID}
		   ORDER BY "period", UR_Name
	</select>
	
	<select id="selectPromotionBtnVisible" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectPromotionBtnVisible */
		SELECT Code AS "Code"
				, Reserved1 AS "Reserved1"
				, Reserved2 AS "Reserved2"
		FROM sys_base_code sbc
		WHERE CodeGroup = 'VacationPromotionPeriod'
		AND IsUse = 'Y'
		AND DomainID = (SELECT NVL(MAX(DomainID), 0) FROM SYS_BASE_CODE WHERE Code = sbc.Code AND CodeGroup = 'VacationPromotionPeriod' AND DomainID = #{domainID})
		ORDER BY SortKey 
	</select>
	<select id="selectAutoIncreaseMonthlyVacation" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectAutoIncreaseMonthlyVacation */
	<![CDATA[
		select 
			  NVL(vacday,0)+1 as "Vacday"
			, '[스케줄러] '||TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS')||' 월차1개 추가' as "VmComment"
			, ur_code as "UrCode"
			, vacKind as "VacKind"
			, year as "Year"
			, UseStartDate as "UseStartDate"
			, UseEndDate as "UseEndDate"
		from vm_vacationplan
		WHERE YEAR = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))
    	  AND VACKIND = 'PUBLIC'
		  AND ur_code IN(
			SELECT u.usercode
			FROM sys_object_user u
					 LEFT JOIN sys_object_user_basegroup ub ON u.UserCode = ub.UserCode AND JobType = 'Origin'
			where u.IsUse = 'Y'
			   AND u.EnterDate IS NOT NULL
			  AND LENGTH(REPLACE(u.EnterDate,'-','')) = 8
			  AND ub.CompanyCode = #{domainCode}
			  AND (TO_NUMBER(TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'YYYY')) = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))
				OR (TO_NUMBER(TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'YYYY')) = TO_NUMBER(TO_CHAR(add_months(SYSDATE,-12),'YYYY'))
					AND (
							(TO_NUMBER(TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MM')) <=  7  AND TO_NUMBER(TO_CHAR(SYSDATE,'MM')) <  7)
							OR (TO_NUMBER(TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MM')) > 7 AND ROUND(TO_NUMBER(MONTHS_BETWEEN(SYSDATE, TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'))))  <  12 )
						)
				)
			  )
			  AND ROUND(TO_NUMBER(
					MONTHS_BETWEEN(
							TO_DATE(TO_CHAR(trunc(SYSDATE,'MM'),'YYYY-MM-DD'),'YYYY-MM-DD'),
							TO_DATE(TO_CHAR(trunc(TO_DATE(REPLACE(u.EnterDate,'-',''),'YYYYMMDD'),'MM'),'YYYY-MM-DD'),'YYYY-MM-DD')
						)
				)) > 0
			  AND ( TO_NUMBER(TO_CHAR(TO_DATE(REPLACE(u.EnterDate,'-',''),'YYYYMMDD'),'DD')) = TO_NUMBER(TO_CHAR(SYSDATE,'DD'))
				OR (TO_DATE(REPLACE(u.EnterDate,'-',''),'YYYYMMDD') = TO_DATE(TO_CHAR(LAST_DAY(SYSDATE),'YYYY-MM-DD'),'YYYY-MM-DD')
					AND TO_NUMBER(TO_CHAR(TO_DATE(REPLACE(u.EnterDate,'-',''),'YYYYMMDD'),'DD')) > TO_NUMBER(TO_CHAR(TO_DATE(TO_CHAR(LAST_DAY(SYSDATE),'YYYY-MM-DD'),'YYYY-MM-DD'),'DD')) )
				)
		)
	]]>
	</select>
	<!-- 본사운영: 2020-01-01 이후 연차 자동생성 쿼리 -->
	<!-- 신규입사자 월차 자동증가 -->
	<update id="updateAutoIncreaseMonthlyVacation" parameterType="cmap">
	/* groupware.vacation.updateAutoIncreaseMonthlyVacation */
	<![CDATA[
		UPDATE vm_vacationplan
		SET VacDay = #{vacday}
		, LongVacDay = #{vacday}-LastVacDay
		WHERE UR_Code = #{urCode}
		AND  VacKind = #{vacKind}
		AND  YEAR = #{year}
	]]>
	</update>

	<!-- 월차 자동증가 전, 연차 생성안된 사용자 연차 생성 -->
	<insert id="insertNewAnnualVacation" parameterType="cmap">
	/* groupware.vacation.insertNewAnnualVacation */
		INSERT INTO vm_vacationplan (UR_Code, DeptCode, DeptName, YEAR, VacDay, VacKind, UseStartDate, UseEndDate, RegistDate)
		SELECT a.UserCode, b.DeptCode, b.MultiDeptName, TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')), 0, 'PUBLIC', TO_CHAR(SYSDATE,'YYYY')||'0101', TO_CHAR(SYSDATE,'YYYY')||'1231', SYSDATE
		FROM sys_object_user a
		INNER JOIN sys_object_user_basegroup b
		ON a.usercode = b.usercode AND b.JobType = 'Origin'
		WHERE a.UserCode NOT IN(SELECT ur_code FROM vm_vacationplan WHERE YEAR = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))  AND VACKIND = 'PUBLIC')
		AND a.IsUse = 'Y'
		AND a.IsHR = 'Y'
		AND a.IsDisplay = 'Y'
		AND (a.EnterDate IS NOT NULL AND LENGTH(REPLACE(a.EnterDate,'-','')) = 8)
		AND b.CompanyCode = #{domainCode}
	</insert>

	<!-- 신규입사자 입사 다음해 06/30 연차 정산 -->
	<!-- [본사 운영]
	전년도 1월~7월 입사자
	  [(15일 * 입사년도일수 / 365일) + 11일] - 입사년도부터 6/30일 이전까지 발생한 연차
	전년도 8월~12월 입사자
	  (15일 * 입사년도일수 / 365일)
	-->
	<update id="updateAutoUpdateAnnualVacation" parameterType="cmap">
		/* groupware.vacation.updateAutoUpdateAnnualVacation */
		UPDATE vm_vacationplan a
		SET vacday = (a.vacDay +
			(
				SELECT
					CASE ROUND(c.tempCal) WHEN c.tempCal THEN
						CASE WHEN TRUNC(c.tempCal,1) > #{MaxCnt} THEN
							#{MaxCnt}
						ELSE
							TRUNC(c.tempCal,1)
						END
					WHEN FLOOR(c.tempCal) THEN
						CASE WHEN FLOOR(c.tempCal) + 0.5 > #{MaxCnt} THEN
							#{MaxCnt}
						ELSE
							FLOOR(c.tempCal) + 0.5
						END
					ELSE
						CASE WHEN ROUND(c.tempCal) > #{MaxCnt} THEN
							#{MaxCnt}
						ELSE
							ROUND(c.tempCal)
						END
					END AS vacationCal
				FROM (	SELECT u.usercode,
						CASE WHEN TO_NUMBER(TO_CHAR(TO_DATE(REPLACE(enterDate,'-',''),'YYYYMMDD'),'MM'))  <![CDATA[<=]]>   7
							THEN (#{InitCnt} * ( (TRUNC(TO_DATE(CONCAT(TO_CHAR(TO_DATE(REPLACE(enterDate,'-',''),'YYYYMMDD'),'YYYY'), '1231'),'YYYYMMDD')) - TRUNC(TO_DATE(REPLACE(enterDate,'-',''),'YYYYMMDD')) ) + 1) / 365 + 11
								- (TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(REPLACE(enterDate,'-',''),'YYYYMMDD'))) )
								) * #{IncCnt}
						ELSE (#{InitCnt} * ((TRUNC(TO_DATE(CONCAT(TO_CHAR(TO_DATE(REPLACE(enterDate,'-',''),'YYYYMMDD'),'YYYY'), '1231'),'YYYYMMDD')) - TRUNC(TO_DATE(REPLACE(enterDate,'-',''),'YYYYMMDD')) ) + 1) / 365) * #{IncCnt} END AS tempCal
						FROM sys_object_user u
						LEFT JOIN sys_object_user_basegroup ub ON u.UserCode = ub.UserCode AND ub.JobType = 'Origin'
						WHERE u.isuse = 'Y'
						AND u.EnterDate IS NOT NULL
						AND LENGTH(REPLACE(u.enterDate,'-','')) = 8
						AND ub.CompanyCode = 'GENERAL'
						AND EXTRACT(YEAR FROM TO_DATE(REPLACE(enterDate,'-',''), 'YYYYMMDD')) = EXTRACT(YEAR FROM SYSDATE - (INTERVAL '1' YEAR))
					) c
					where c.USERCODE = a.UR_CODE
				)
			)
		, a.VmComment = a.VmComment || ' [스케줄러] ' || SYSDATE || ' 6월 정산; '
		WHERE a.YEAR = EXTRACT(YEAR FROM SYSDATE)
		AND a.VACKIND = 'PUBLIC'
		AND a.UR_CODE in (
				SELECT u.usercode
				FROM sys_object_user u
				LEFT JOIN sys_object_user_basegroup ub ON u.UserCode = ub.UserCode
				WHERE u.isuse = 'Y'
				AND u.EnterDate IS NOT NULL
				AND LENGTH(REPLACE(u.enterDate,'-','')) = 8
				AND ub.CompanyCode = #{domainCode}
				AND EXTRACT(YEAR FROM TO_DATE(REPLACE(enterDate,'-',''), 'YYYYMMDD')) = EXTRACT(YEAR FROM SYSDATE - (INTERVAL '1' YEAR))
		)
	</update>

	<select id="selectAutoCreateAnnualVacation" parameterType="cmap" resultType="cmap">
		/* groupware.vacation.selectAutoCreateAnnualVacation */
		SELECT
			YEAR AS "YEAR"
			, UR_Code AS "UR_Code"
			, VacKind AS "VacKind"
			, UseStartDate AS "UseStartDate"
			, UseEndDate AS "UseEndDate"
			, DeptCode AS "DeptCode"
			, DeptName AS "DeptName"
			, CASE WHEN LongVacDay > #{MaxCnt} THEN
					#{MaxCnt}
				ELSE
					LongVacDay
				END AS "LongVacDay"
			, fn_GetLastVacDay(UR_Code, EXTRACT(YEAR FROM SYSDATE + (INTERVAL '1' YEAR)), #{domainCode}) AS "LastVacDay"
			, RewardVacDay AS "RewardVacDay"
			, RegisterCode AS "RegisterCode"
		FROM (
			SELECT EXTRACT(YEAR FROM SYSDATE + (INTERVAL '1' YEAR)) AS YEAR,
				A.usercode AS UR_Code,
				'PUBLIC' AS VacKind,
				CONCAT(EXTRACT(YEAR FROM SYSDATE + (INTERVAL '1' YEAR)),'0101') AS UseStartDate,
				CONCAT(EXTRACT(YEAR FROM SYSDATE + (INTERVAL '1' YEAR)),'1231') AS UseEndDate,
				B.DeptCode AS DeptCode,
				B.MultiDeptName AS DeptName,
				CASE WHEN (EXTRACT(YEAR FROM TO_DATE(enterdate)) != EXTRACT(YEAR FROM SYSDATE)) THEN
					#{InitCnt} + FLOOR( ((EXTRACT(YEAR FROM SYSDATE + (INTERVAL '1' YEAR)) - EXTRACT(YEAR FROM TO_DATE(REPLACE(A.EnterDate,'-',''),'YYYYMMDD')) - 1) / #{IncTerm}) ) * #{IncCnt}
				ELSE 0 END AS LongVacDay
					, 0 AS RewardVacDay
				,'system' AS RegisterCode
			FROM sys_object_user A
			LEFT JOIN (SELECT UserCode, CompanyName, CompanyCode, DeptCode, MultiDeptName
			FROM sys_object_user_basegroup
			WHERE JobType = 'Origin'
		) B ON A.UserCode = B.UserCode
			WHERE A.IsUse = 'Y'
			AND A.IsDisplay = 'Y'
			AND A.IsHR = 'Y'
			AND B.CompanyCode = #{domainCode}
			AND EnterDate IS NOT NULL
			AND LENGTH(REPLACE(EnterDate,'-','')) = 8
			AND (RetireDate IS NULL  OR TRIM(RetireDate) = '')
			AND A.usercode NOT IN (SELECT UR_Code FROM vm_vacationplan WHERE UR_Code = A.usercode AND YEAR = EXTRACT(YEAR FROM SYSDATE + (INTERVAL '1' YEAR)) AND VacKind = 'PUBLIC')
		) TBL

	</select>

	<insert id="insertAutoCreateAnnualVacation" parameterType="cmap">
	/* groupware.vacation.insertAutoCreateAnnualVacation */
		INSERT INTO vm_vacationplan (
			  YEAR, UR_CODE, VACKIND, USESTARTDATE, USEENDDATE
			, DEPTCODE, DEPTNAME, LONGVACDAY, LASTVACDAY, VACDAY, VMCOMMENT, REWARDVACDAY
			, REGISTERCODE, REGISTDATE
		)VALUES(
			  #{year}, #{urCode}, #{vacKind}, #{useStartDate}, #{useEndDate}
			, #{deptCode}, #{deptName}, #{longVacDay}, #{lastVacDay}, #{longVacDay}+#{lastVacDay}, #{vmComment}, #{rewardVacDay}
			, #{registerCode}, SYSDATE
		)
	</insert>
	
	<!-- 해당 연도 부서정보 update -->
	<update id="updateDeptInfo" parameterType="cmap">
	/* groupware.vacation.updateDeptInfo */
		UPDATE vm_vacationplan A
		SET A.DeptCode = (SELECT DeptCode FROM sys_object_user_basegroup WHERE UserCode = A.UR_CODE AND JobType = 'Origin'), 
		    A.DeptName = (SELECT DeptName FROM sys_object_user_basegroup WHERE UserCode = A.UR_CODE AND JobType = 'Origin')
		WHERE A.YEAR = TO_CHAR(SYSDATE, 'YYYY')
	</update>

	<!-- 휴가유형 리스트 조회 -->
	<select id="selectVacTypeList" parameterType="cmap" resultType= "cmap">
	/* groupware.vacation.selectVacTypeList */
		<include refid="oracle.include.pagingHeader" />
		SELECT
			C.CODEID AS "CodeID"
			, C.CODEGROUP AS "CodeGroup"
			, C.CODE AS "Code"
			, C.ISUSE AS "IsUse"
			, C.CODENAME AS "CodeName"
			, C.MULTICODENAME AS "MultiCodeName"
			, CASE WHEN NVL(C.RESERVED1, 'N') = '+' THEN 'Y' ELSE'N' END AS "Reserved1"
			, C.RESERVED2 AS "Reserved2"
			, NVL(CASE WHEN C.RESERVED3 = '' THEN '1' ELSE C.RESERVED3 END, '1') AS "Reserved3"
			, C.RESERVEDINT AS "ReservedInt"
			, C.SORTKEY AS "SortKey"
			, (SELECT FN_BASEGETDICTIONARY_S(#{lang}, A.CODENAME)  FROM SYS_BASE_CODE A WHERE A.CODEGROUP = 'AttendVacGroup' AND C.RESERVEDINT = A.CODEID) AS "attCodeName"
			, b.Code AS "GroupCode"
			, b.CodeName AS "GroupCodeName"
		FROM SYS_BASE_CODE C
		LEFT JOIN sys_base_code b ON b.DomainID = 0 AND b.IsUse = 'Y' AND b.CodeGroup = 'VACATION_KIND' AND b.CodeID = c.ReservedInt
		WHERE C.CODEGROUP = 'VACATION_TYPE'
		<if test='showAll != null and showAll != ""'>
			<choose>
				<when test='showAll == "Y"'> </when>
				<otherwise> AND C.IsUse = 'Y'</otherwise>
			</choose>
		</if>
		AND C.DOMAINID = #{domainID}
		<if test='hideExtraVacation eq "Y" '>
			AND b.Code <![CDATA[<>]]> 'EXTRA'
		</if>
		<if test='columnYn eq "Y" '>
			AND NVL(C.RESERVED1, 'N') = '+'
		</if>
		<if test='Code != null and Code != ""'>
			AND C.CODE = #{Code}
		</if>
		<trim prefix='ORDER BY'>
			<if test='sortColumn != null and sortColumn != "" and sortDirection != null and sortDirection != ""'>
				<choose>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
					<when test='sortColumn.equalsIgnoreCase("Code")'>Code</when>
					<when test='sortColumn.equalsIgnoreCase("CodeName")'>CodeName</when>
					<when test='sortColumn.equalsIgnoreCase("SortKey")'>c.SortKey</when>
					<when test='sortColumn.equalsIgnoreCase("Reserved1")'>Reserved1</when>
					<otherwise>CodeID</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
				<include refid="oracle.include.listOrderBy"/>
			</if>
			<if test = "sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
				c.SORTKEY
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>

	<select id="selectVacTypeListCnt" parameterType="cmap" resultType="java.lang.Long">
	/* groupware.vacation.selectVacTypeListCnt */
		SELECT
			COUNT(1) AS "cnt"
		FROM SYS_BASE_CODE C
			LEFT JOIN (
				SELECT MULTICODENAME ATTCODENAME , CODEID ATTCODEID FROM SYS_BASE_CODE WHERE CODEGROUP = 'AttendVacGroup'
			) A ON C.RESERVEDINT = A.ATTCODEID
		WHERE CODEGROUP = 'VACATION_TYPE'
		AND C.DOMAINID = #{domainID}
		<if test='columnYn eq "Y" '>
			AND NVL(RESERVED1, 'N') = '+'
		</if>
	</select>

	<select id="selectVacTypeEtcList" parameterType="cmap" resultType= "cmap">
		SELECT c.Code AS "Code"
			, Fn_BaseGetDictionary_S(#{lang}, c.MultiCodeName) AS "MultiCodeName"
			, b.Code AS "GroupCode"
			, b.CodeName AS "GroupCodeName"
		FROM sys_base_code c
		LEFT JOIN sys_base_code b ON b.DomainID = 0 AND b.IsUse = 'Y' AND b.CodeGroup = 'VACATION_KIND' AND b.CodeID = c.ReservedInt
		WHERE c.codegroup = 'VACATION_TYPE'
			AND c.IsUse = 'Y'
			AND c.DomainID = #{domainID}
			AND NVL(c.Reserved1,'N') = '+'
			AND b.Code not in ('PUBLIC', 'VACATION_REWARD')
	</select>

	<!-- 휴가 유형 수정 -->
	<update id="updVacationType" parameterType="cmap">
	/* groupware.vacation.updVacationType */
		UPDATE SYS_BASE_CODE SET
			CODENAME = #{CodeName}
			, MULTICODENAME = #{MultiCodeName}
			, SORTKEY = #{SortKey}
			, ISUSE = #{IsUse}
			, RESERVED1 = #{Reserved1}
			, RESERVED2 = #{Reserved2}
			, RESERVED3 = #{Reserved3}
			, ReservedInt = #{ReservedInt}
			, MODIFIERCODE = #{RegUserCode}
			, MODIFYDATE = SYSDATE
		WHERE CODEID = #{CodeID}
	</update>

	<!-- 휴가유형 등록 -->
	<insert id="setVacationType" parameterType="cmap" >
	/* groupware.vacation.setVacationType */
		INSERT INTO SYS_BASE_CODE (
			BIZSECTION
			, CODEGROUP
			, CODE
			, DomainID
			, SORTKEY
			, ISUSE
			, CODENAME
			, MULTICODENAME
			, RESERVED1
			, RESERVED2
			, RESERVED3
			, RESERVEDINT
			, REGISTERCODE
			, REGISTDATE
			, MODIFIERCODE
			, MODIFYDATE
		) VALUES (
			'Approval'
			, 'VACATION_TYPE'
			, #{Code}
			, #{DomainID}
			, NVL(#{SortKey}, 1)
			, #{IsUse}
			, #{CodeName}
			, #{MultiCodeName}
			, #{Reserved1}
			, #{Reserved2}
			, #{Reserved3}
			, #{ReservedInt}
			, #{RegUserCode}
			, SYSDATE
			, #{RegUserCode}
			, SYSDATE
		)
	</insert>

	<!-- 휴가유형 삭제 -->
	<delete id="delVacationType" parameterType="cmap" >
	/* groupware.vacation.delVacationType */
		DELETE FROM SYS_BASE_CODE
		WHERE CodeGroup = 'VACATION_TYPE'
		AND CodeID = #{CodeID}
	</delete>

	<select id="selectDeptList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectDeptList */
		SELECT
			GR.GROUPID AS "GroupID"
			, GR.GROUPCODE AS "GroupCode"
			, GR.COMPANYCODE AS "CompanyCode"
			, GR.GROUPTYPE AS "GroupType"
			, GR.MEMBEROF AS "MemberOf"
			, GR.DISPLAYNAME AS "DisplayName"
			, FN_BASEGETDICTIONARY_S(#{lang}, GR.MULTIDISPLAYNAME) AS "MultiDisplayName"
			, LENGTH(GR.SORTPATH) - LENGTH(REPLACE(GR.SORTPATH,';','')) AS "SortDepth"
			,SortPath "SortPath"
		FROM SYS_OBJECT_GROUP GR
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			AND GR.ISUSE = 'Y'
			AND GR.ISDISPLAY = 'Y'
			AND (GR.MEMBEROF != 'NOUSE' OR GR.MEMBEROF IS NULL)
			AND (GR.MEMBEROF != 'NOUNIT' OR GR.MEMBEROF IS NULL)
			AND GR.GROUPTYPE IN ('Dept','Company')
			AND GR.COMPANYCODE = #{CompanyCode}
			<if test='isAdmin neq "Y"'>
				AND ';'||GR.GROUPPATH LIKE '%;'||#{DeptCode}||';%'
			</if>
		</trim>
		ORDER BY SORTPATH
	</select>
	
	<select id="selectVacationInfoCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationInfoCnt */
		SELECT COUNT(*)
		FROM vm_vacationinfo
		WHERE 1=1
		AND UR_Code = #{urCode}
		AND GUBUN = #{gubun}
		<![CDATA[
		AND (
			Sdate <= TO_DATE(#{eDate}, 'YYYY-MM-DD') AND Edate >= TO_DATE(#{eDate}, 'YYYY-MM-DD') OR
			Sdate <= TO_DATE(#{sDate}, 'YYYY-MM-DD') AND Edate >= TO_DATE(#{sDate}, 'YYYY-MM-DD') OR
			Sdate >= TO_DATE(#{sDate}, 'YYYY-MM-DD') AND Edate <= TO_DATE(#{eDate}, 'YYYY-MM-DD')
		)
		]]>
	</select>
	
	<select id="selectVacationType" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationType */
		/* queryId = groupware.vacation.selectVacationType */
		SELECT	
				CODE as "CODE"
			 	, Fn_BaseGetDictionary_S(#{lang}, MultiCodeName) AS "CodeName"
			 	, NVL(Reserved3, '1') AS "Reserved3"
		FROM 	sys_base_code
		WHERE	1=1
		AND 	CodeGroup = 'VACATION_TYPE'
		AND	 	DomainID = #{domainId}
		AND		IsUse = 'Y'
		AND   	Reserved1 = '+'
		ORDER BY SortKey ASC
	</select>

	<select id="selectExtraVacationKind" parameterType="cmap" resultType="cmap">
		/* queryId = groupware.vacation.selectExtraVacationKind */
		SELECT B.Code AS "Code"
			, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
				Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
			ELSE
				B.CodeName
			END AS "CodeName"
		FROM (select *
				from sys_base_code
			WHERE CodeGroup = 'VACATION_KIND'
				AND IsUse = 'Y'
				AND Code = 'EXTRA'
				AND DomainID = 0
			) A,
			sys_base_code B
		WHERE A.CodeID = B.ReservedInt
			AND B.IsUse = 'Y'
			AND B.DomainID = #{domainId}
			ORDER BY B.SortKey ASC
	</select>

	<select id="selectVacationListByAll" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationListByAll */
		SELECT a.UR_Code "UR_Code"
				,a.UR_Name "UR_Name"
				,a.JobPositionName "JobPositionName"
				,a.Gubun "Gubun"
        		,case when Gubun ='Vac' then Fn_GetBaseCodeName(#{DN_ID},'VACATION_TYPE',Gubun2) else Gubun2 end "Gubun2"
				,a.Gubun3 "Gubun3"
        		,A.Sdate "Sdate"
        		,A.Edate "Edate"
				,a.Stime "Stime"
				,a.Etime "Etime"
				,a.DeptCode "DeptCode"
				,a.MEMO "MEMO"
		FROM (
			SELECT distinct C.UserCode UR_Code
					,MAX(C.MultiDisplayName) UR_Name
					,MAX(B.MultiJobPositionName) JobPositionName
					,'Vac' Gubun
					,max(VacFlag)  Gubun2
					,MAX(A.VacOffFlag) Gubun3
					,MAX(A.Sdate) Sdate
					,MAX(A.Edate) Edate
					,'' Stime
					,'' Etime
					,MAX(b.DeptCode) DeptCode
					,'' MEMO
					,MAX(JobLevelSortKey) JobLevelSortKey
			 FROM  attend_daylist d 
		     JOIN vm_vacationinfo a ON d.dayList BETWEEN a.Sdate AND a.eDate
	   INNER JOIN sys_object_user_basegroup B ON A.UR_Code = B.UserCode AND JobType='Origin'
	   INNER JOIN sys_object_user C ON B.UserCode = C.UserCode AND C.IsUse='Y'
			WHERE B.CompanyCode= #{CompanyCode}
			  AND d.dayList between  TO_DATE(#{sDate}, 'YYYY-MM-DD') AND  ADD_MONTHS(TO_DATE(#{sDate}, 'YYYY-MM-DD'), 1) 
         GROUP BY  c.UserCode, dayList
           HAVING  SUM(fn_attend_calVacDay(VacFlag, VacOffFlag, GUBUN))>0
        UNION ALL
           SELECT C.UserCode UR_Code
					,C.MultiDisplayName UR_Name
					,B.MultiJobPositionName JobPositionName
					,'Att' Gubun
					,A.JobStsName Gubun2
					,'' Gubun3
					,to_char(A.JobDate,'YYYY-MM-DD') Sdate
					,to_char(A.JobDate,'YYYY-MM-DD') Edate
					,A.StartTime Stime
					,A.EndTime Etime
					,B.DeptCode
					,A.Etc MEMO
					,JobLevelSortKey
			  FROM attend_job_history A
		INNER JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType='Origin'
		INNER JOIN sys_object_user C ON B.UserCode = C.UserCode AND C.IsUse='Y'
	   	     WHERE A.CompanyCode = #{CompanyCode}
			   AND A.JobDate BETWEEN  TO_DATE(#{sDate}, 'YYYY-MM-DD')  and  ADD_MONTHS(TO_DATE(#{sDate}, 'YYYY-MM-DD'), 1 ) 

		) a
		ORDER BY a.JobLevelSortKey ASC, a.Sdate ASC
	</select>

	<select id="getVacationListByUse" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.getVacationListByUse */
		<include refid="oracle.include.pagingHeader" />
		SELECT a.VacationInfoID "VacationInfoID"
			, A.UR_Code "UR_Code"
			, VacYear "VacYear"
			, VacDate "VacDate"
			, VacFlag "VacFlag"
			, VacOffFlag "VacOffFlag"
			, Fn_BaseGetDictionary_S(#{lang}, b.MultiDisplayName) AS "DisplayName"
			, Fn_BaseGetDictionary_S(#{lang}, nvl(E.DeptName, b.MultiDeptName)) AS "DeptName"
			, Fn_BaseGetDictionary_S(#{lang}, b.MultiJobPositionName) AS "JobPositionName"
			, Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName) AS "VacFlagName"
			, TO_CHAR(b.VacDay, 'fm90.0') AS "VacDay"
			, Reason "Reason"
			, WorkItemID "WorkItemID"
			, ProcessID "ProcessID"
		FROM vm_vacationinfo A
        JOIN (SELECT   vm.UR_Code , ad.dayList VacDate
   						,u.MultiDisplayName
   						,bg.MultiDeptName
   						,bg.MultiJobPositionName
        				,SUM(fn_attend_calVacDay(VacFlag, VacOffFlag, GUBUN))  VacDay
   						,MAX(case when Gubun IN ('VACATION_APPLY','VACATION_PUBLIC') then VacationInfoID END) vacationinfoid
			  FROM      vm_vacationinfo  vm 	
			  JOIN      attend_daylist ad ON ad.dayList BETWEEN vm.Sdate AND vm.Edate
		      LEFT JOIN sys_object_user u ON vm.UR_Code = u.UserCode
		      LEFT JOIN sys_object_user_basegroup bg ON u.UserCode = bg.UserCode AND JobType = 'Origin'
			  WHERE     vacYear =#{year}
			  AND       bg.Companycode = #{domainCode}
				<if test='DEPTID != null and DEPTID != ""'>
					AND DeptCode = #{DEPTID}
				</if>
				<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
					<choose>
						<when test='schTypeSel == "deptName"'>
							AND DeptName LIKE '%'|| #{schTxt}|| '%'
						</when>
						<otherwise>
							AND DisplayName LIKE '%'|| #{schTxt}|| '%'
						</otherwise>
					</choose>
				</if>
				<if test='schUrName != null and schUrName !="" '>
					AND DisplayName LIKE '%'|| #{schUrName}|| '%'
				</if>
				<if test='sDate != null and sDate !="" and eDate != null and eDate !=""'>
					 AND ad.dayList between to_date( #{sDate},'YYYYMMDD') AND to_date(#{eDate},'YYYYMMDD')
				</if>
				  	 
				<if test='vacFlag != null and vacFlag !="" '>
					AND vacFlag = #{vacFlag}
				</if>
	   	      GROUP BY  vm.Ur_Code, ad.dayList,u.MultiDisplayName,bg.MultiDeptName,bg.MultiJobPositionName
			  HAVING    SUM(fn_attend_calVacDay(VacFlag, VacOffFlag, GUBUN))>0 ) b ON A.vacationinfoid = b.vacationinfoid
  LEFT JOIN vm_vacationplan E ON A.UR_Code = E.UR_Code and E.year = a.VacYear
  LEFT JOIN sys_base_code D ON A.VacFlag = D.Code AND D.CodeGroup = 'VACATION_TYPE' AND D.DomainID =#{domainID}
		WHERE	  1 =1
		<trim prefix='ORDER BY'>
			<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
				VacDate DESC
			</if>
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("VacFlagName")'>VacFlagName</when>
					<when test='sortColumn.equalsIgnoreCase("VacYear")'>VacYear</when>
					<when test='sortColumn.equalsIgnoreCase("VacDate")'>VacDate</when>
					<when test='sortColumn.equalsIgnoreCase("VacDay")'>VacDay</when>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
					<otherwise>VacDate</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>

	<select id="getVacationListByUseCnt" parameterType="cmap" resultType="java.lang.Long">
	/* groupware.vacation.getVacationListByUseCnt */
		SELECT count(*)
		FROM vm_vacationinfo A
        JOIN (SELECT vm.UR_Code , ad.dayList, SUM(fn_attend_calVacDay(VacFlag, VacOffFlag, GUBUN)) 
   						, MAX(case when Gubun IN ('VACATION_APPLY','VACATION_PUBLIC') then VacationInfoID END) vacationinfoid
			  FROM     vm_vacationinfo  vm 	
			  JOIN     attend_daylist ad ON ad.dayList BETWEEN vm.Sdate AND vm.Edate
		      LEFT JOIN sys_object_user u ON vm.UR_Code = u.UserCode
		      LEFT JOIN sys_object_user_basegroup bg ON u.UserCode = bg.UserCode AND JobType = 'Origin'
			  WHERE     vacYear =#{year}
			  AND       bg.Companycode = #{domainCode}
				<if test='DEPTID != null and DEPTID != ""'>
					AND DeptCode = #{DEPTID}
				</if>
				<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
					<choose>
						<when test='schTypeSel == "deptName"'>
							AND DeptName LIKE '%'|| #{schTxt}|| '%'
						</when>
						<otherwise>
							AND DisplayName LIKE '%'|| #{schTxt}|| '%'
						</otherwise>
					</choose>
				</if>
				<if test='schUrName != null and schUrName !="" '>
					AND DisplayName LIKE '%'|| #{schUrName}|| '%'
				</if>
				<if test='sDate != null and sDate !="" and eDate != null and eDate !=""'>
					 AND ad.dayList between to_date( #{sDate},'YYYYMMDD') AND to_date(#{eDate},'YYYYMMDD')
				</if>
				  	 
				<if test='vacFlag != null and vacFlag !="" '>
					AND vacFlag = #{vacFlag}
				</if>
	   	      GROUP BY  vm.Ur_Code, ad.dayList
			  HAVING    SUM(fn_attend_calVacDay(VacFlag, VacOffFlag, GUBUN))>0 ) b ON A.vacationinfoid = b.vacationinfoid
		WHERE	  1 =1
		<if test='month != null and month !="" '>
			 AND concat(#{year},#{month}) BETWEEN  TO_CHAR(SDate,'YYYYMM') AND TO_CHAR(EDate,'YYYYMM')
		</if>
		  	 
		<if test='vacFlag != null and vacFlag !="" '>
			AND vacFlag = #{vacFlag}
		</if>
	</select>

	<select id="getVacationListByUseHist" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.getVacationListByUseHist */
		<include refid="oracle.include.pagingHeader" />
		SELECT VacationInfoID AS "VacationInfoID"
			, UR_Code AS "UR_Code"
			, AppDate AS "AppDate"
			, EndDate AS "EndDate"
			, VacYear AS "VacYear"
	    	, Sdate AS "Sdate"
	    	, Edate AS "Edate"
			, VacFlag AS "VacFlag"
			, VacOffFlag AS "VacOffFlag"
			, DisplayName AS "DisplayName"
			, DeptName AS "DeptName"
			, UpDeptName AS "UpDeptName"
			, JobPositionName AS "JobPositionName"
			, JobPositionSortKey AS "JobPositionSortKey"
			, JobLevelSortKey AS "JobLevelSortKey"
			, JobTitleSortKey AS "JobTitleSortKey"
			, VacFlagName AS "VacFlagName"
			, VacDay AS "VacDay"
			, Reason AS "Reason"
			, WorkItemID AS "WorkItemID"
			, ProcessID AS "ProcessID"
			, Gubun AS "Gubun"
			, GubunName AS "GubunName"
			, VacText AS "VacText"
		FROM (
			SELECT vm.VacationInfoID
				, vm.UR_Code
				, nvl(j.StartDate, APPDATE) AppDate
				, nvl(j.EndDate, vm.EndDate) EndDate
				, VacYear
				, SDate whSDate
				, EDate whEDate
		    	, Sdate|| ' ('|| CASE  TO_CHAR(TO_DATE(Sdate,'YYYY-MM-DD'),'D')  WHEN '2' THEN 'Mon'  WHEN '3' THEN 'Tue'  WHEN '4' THEN 'Wed'  WHEN '5' THEN 'Thu'  WHEN '6' THEN 'Fri'  WHEN '7' THEN 'Sat' ELSE 'Sun'  END||')' as Sdate
		    	, Edate|| ' ('|| CASE  TO_CHAR(TO_DATE(Edate,'YYYY-MM-DD'),'D')  WHEN '2' THEN 'Mon'  WHEN '3' THEN 'Tue'  WHEN '4' THEN 'Wed'  WHEN '5' THEN 'Thu'  WHEN '6' THEN 'Fri'  WHEN '7' THEN 'Sat' ELSE 'Sun'  END||')' as Edate
				, VacFlag
				, VacOffFlag
				, Fn_BaseGetDictionary_S(#{lang}, u.MultiDisplayName) AS DisplayName
				, Fn_BaseGetDictionary_S(#{lang}, nvl(E.DeptName, bg.MultiDeptName)) AS DeptName
				, (SELECT Fn_BaseGetDictionary_S(#{lang}, ug.MultiDisplayName) FROM sys_object_group g
						JOIN sys_object_group ug ON  ug.GroupType ='Dept' AND ug.GroupCode = g.MemberOf
				 		WHERE g.GroupType ='Dept' AND g.GroupCode = nvl(E.DeptCode, bg.DeptCode)) AS UpDeptName
				, Fn_BaseGetDictionary_S(#{lang}, bg.MultiJobPositionName) AS JobPositionName
				, Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName) AS VacFlagName
				, cast(cast(TO_CHAR(vm.VacDay, 'fm90.000') as DECIMAL(9,3)) as float) AS VacDay
				, Reason
				, WorkItemID
				, vm.ProcessID
				, vm.Gubun
				, Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName) AS GubunName
				, CASE WHEN GUBUN in  ('VACATION_CANCEL' ,'VACATION_PUBLIC' ,'VACATION_PUBLIC_CANCEL' )
						THEN '('|| Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName)|| ')' ELSE ''
						END|| Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)  AS VacText
				, bg.Companycode
				, bg.DeptCode
				, bg.JobPositionSortKey
				, bg.JobLevelSortKey
				, bg.JobTitleSortKey
		  FROM vm_vacationinfo vm
	      LEFT JOIN sys_object_user u ON vm.UR_Code = u.UserCode
	      LEFT JOIN sys_object_user_basegroup bg ON u.UserCode = bg.UserCode AND JobType = 'Origin'
		  LEFT JOIN vm_vacationplan E ON vm.UR_Code = E.UR_Code and vm.VacYear = e.year
		  LEFT JOIN sys_base_code C ON vm.GUBUN = C.Code AND C.CodeGroup = 'VACATION_GUBUN' AND C.DomainID =0
		  LEFT JOIN sys_base_code D ON vm.VacFlag = D.Code AND D.CodeGroup = 'VACATION_TYPE' AND D.DomainID =#{domainID}
		  LEFT JOIN jwf_process j ON vm.processid = j.processid
		) TBL
		WHERE 1=1
			AND vacYear =#{year}
			AND Companycode = #{domainCode}
		<if test='DEPTID != null and DEPTID != ""'>
			AND DeptCode = #{DEPTID}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%'|| #{schTxt}|| '%'
				</when>
				<otherwise>
					AND DisplayName LIKE '%'|| #{schTxt}|| '%'
				</otherwise>
			</choose>
		</if>
		<if test='schUrName != null and schUrName !="" '>
			AND DisplayName LIKE '%'|| #{schUrName}|| '%'
		</if>
		  	 
		<if test='vacFlag != null and vacFlag !="" '>
			AND vacFlag = #{vacFlag}
		</if>
		<if test='month != null and month !="" '>
			 AND #{year}||#{month} BETWEEN   TO_CHAR(TO_DATE(whSDate,'YYYY-MM-DD'),'YYYYMM') AND TO_CHAR(TO_DATE(whEDate,'YYYY-MM-DD'),'YYYYMM')
		</if>
		<trim prefix="ORDER BY"  prefixOverrides =",">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			"JobTitleSortKey" ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			"JobLevelSortKey" ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			"JobPositionSortKey" ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			"DisplayName" ASC
				  		</if>
				  	</foreach>
				  	, Sdate DESC
			  	</when>
			</choose>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>

	<select id="getVacationListByUseHistCnt" parameterType="cmap" resultType="java.lang.Long">
	/* groupware.vacation.getVacationListByUseHistCnt */
		  SELECT count(*)
		  FROM vm_vacationinfo vm
	      LEFT JOIN sys_object_user u ON vm.UR_Code = u.UserCode
	      LEFT JOIN sys_object_user_basegroup bg ON u.UserCode = bg.UserCode AND JobType = 'Origin'
		  WHERE     vacYear =#{year}
		  AND       bg.Companycode = #{domainCode}
			<if test='DEPTID != null and DEPTID != ""'>
				AND bg.DeptCode = #{DEPTID}
			</if>
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "deptName"'>
						AND bg.DeptName LIKE '%'|| #{schTxt}|| '%'
					</when>
					<otherwise>
						AND DisplayName LIKE '%'|| #{schTxt}|| '%'
					</otherwise>
				</choose>
			</if>
			<if test='schUrName != null and schUrName !="" '>
				AND DisplayName LIKE '%'|| #{schUrName}|| '%'
			</if>
			<if test='vacFlag != null and vacFlag !="" '>
				AND vacFlag = #{vacFlag}
			</if>
		<if test='month != null and month !="" '>
			 AND #{year}||#{month} BETWEEN   TO_CHAR(TO_DATE(SDate,'YYYY-MM-DD'),'YYYYMM') AND  TO_CHAR(TO_DATE(EDate,'YYYY-MM-DD'),'YYYYMM')
		</if>
		  	 
		<if test='vacFlag != null and vacFlag !="" '>
			AND vacFlag = #{vacFlag}
		</if>
	</select>

	<select id="selectVacationExtraListCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationExtraListCnt */
		SELECT COUNT(*)
		FROM vm_vacationplan A
		LEFT JOIN (	SELECT A.UserCode
						, B.CompanyCode
						, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
						, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
					FROM sys_object_user A
					LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
		) B ON A.UR_Code = B.UserCode
		WHERE A.Year = #{year}
			AND A.VacKind <![CDATA[ <> ]]> 'PUBLIC'
		<if test='domainCode != null and domainCode != ""'>
			AND B.Companycode = #{domainCode}
		</if>
		<if test='vacKind != null and vacKind != ""'>
			AND A.VacKind = #{vacKind}
		</if>
		<if test='sDate != null and sDate != ""'>
			AND A.UseStartDate = #{sDate}
		</if>
		<if test='eDate != null and eDate != ""'>
			AND A.UseEndDate = #{eDate}
		</if>
		<if test='urCode != null and urCode != ""'>
			AND A.UR_Code = #{urCode}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<when test='schTypeSel == "userCode"'>
					AND A.UR_Code = #{schTxt}
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
	</select>

	<select id="selectVacationExtraList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationExtraList */
	<if test='pageSize != null and pageOffset != null and pageSize >= 0 and pageOffset >= 0'>
		<include refid="oracle.include.pagingHeader"/>
	</if>
		SELECT UR_Code AS "UR_Code"
			, DisplayName AS "DisplayName"
			, DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
			, JobPositionSortKey AS "JobPositionSortKey"
			, JobLevelSortKey AS "JobLevelSortKey"
			, JobTitleSortKey AS "JobTitleSortKey"
			, CodeName AS "ExtVacName"
			, IsUse AS "IsUse"
			, Year as "ExtVacYear"
			, UseStartDate as "ExtSdate"
			, UseEndDate as "ExtEdate"
			, VacKind as "ExtVacType"
			, ExtVacDay AS "ExtVacDay"
			, VmComment as "ExtReason"
			, RegisterName AS "RegisterName"
			, RegisterCode AS "RegisterCode"
			, RegistDate AS "RegistDate"
			, ExpDate AS "ExpDate"
			, CAST(NVL(ExtUseVacDay,0.0) AS FLOAT)    AS "ExtUseVacDay"
			, CAST(ExtVacDay - NVL(ExtUseVacDay,0.0) as float) AS "ExtRemainVacDay"
		FROM (

			SELECT A.UR_Code
				, B.DisplayName
				, Fn_BaseGetDictionary_S(#{lang}, NVL(B.MultiDeptName, A.DeptName)) AS DeptName
				, B.JobPositionName
				, B.JobPositionSortKey
				, B.JobLevelSortKey
				, B.JobTitleSortKey
				, C.CodeName
				, C.IsUse
				, Year
				, UseStartDate
				, UseEndDate
				, VacKind
				, cast(cast(A.VacDay as DECIMAL(9,3)) as float) AS ExtVacDay
				, VmComment
				, CASE WHEN RegisterName is not null THEN
						RegisterName
					ELSE
						A.RegisterCode
					END AS RegisterName
				, A.RegisterCode
				, TO_CHAR(A.RegistDate, 'YYYY-MM-DD') AS RegistDate
				, TO_CHAR(TO_DATE(A.UseStartDate), 'YYYY.MM.DD') || ' ~ ' || TO_CHAR(TO_DATE(A.UseEndDate), 'YYYY.MM.DD') AS ExpDate
				, (SELECT SUM(NVL(VacDay,0.0)) FROM vm_vacationinfo_day
					WHERE A.UR_Code = UR_Code AND TRIM(VacFlag) = A.VacKind
						AND TO_DATE(VacDate,'YYYY-MM-DD') between TO_DATE(A.UseStartDate,'YYYY-MM-DD') and TO_DATE(A.UseEndDate,'YYYY-MM-DD')
					) AS ExtUseVacDay
				, B.CompanyCode
			FROM vm_vacationplan A
			LEFT JOIN (	SELECT A.UserCode
						, B.CompanyCode
						, B.MultiDeptName
						, B.JobPositionSortKey
						, B.JobLevelSortKey
						, B.JobTitleSortKey
						, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
						, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
						FROM sys_object_user A
						LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
			) B ON A.UR_Code = B.UserCode
			LEFT JOIN (SELECT  B.Code
						, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
								Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
							ELSE
								B.CodeName
							END AS CodeName
						, CASE WHEN A.IsUse = 'N' OR B.IsUse = 'N' THEN
							'N' ELSE 'Y' END AS IsUse
						FROM (select *
								from sys_base_code
								WHERE CodeGroup = 'VACATION_KIND'
								AND DomainID = 0
								) A,
								(select *
									from sys_base_code
									where DomainID = #{domainID}
									AND CodeGroup = 'VACATION_TYPE'
								) B
								WHERE A.CodeID = B.ReservedInt
							) C ON A.VacKind = C.Code
			LEFT JOIN (SELECT UserCode ,Fn_BaseGetDictionary_S(#{lang}, MultiDisplayName) AS RegisterName
						FROM sys_object_user ) E ON A.RegisterCode = E.UserCode
		) TBL
		WHERE Year = #{year}
			AND VacKind <![CDATA[ <> ]]> 'PUBLIC'
		<if test='domainCode != null and domainCode != ""'>
			AND CompanyCode = #{domainCode}
		</if>
		<if test='vacKind != null and vacKind != ""'>
			AND VacKind = #{vacKind}
		</if>
		<if test='sDate != null and sDate != ""'>
			AND UseStartDate = #{sDate}
		</if>
		<if test='eDate != null and eDate != ""'>
			AND UseEndDate = #{eDate}
		</if>
		<if test='urCode != null and urCode != ""'>
			AND UR_Code = #{urCode}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<when test='schTypeSel == "userCode"'>
					AND UR_Code = #{schTxt}
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
		<trim prefix="ORDER BY"  prefixOverrides =",">
			<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			JobTitleSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			JobLevelSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			JobPositionSortKey ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			DisplayName ASC
				  		</if>
				  	</foreach>
				  	, VacKind, RegistDate ASC
			  	</when>
			</choose>
			</if>
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>"DeptName"</when>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>"DisplayName"</when>
					<when test='sortColumn.equalsIgnoreCase("ExtVacName")'>"ExtVacName"</when>
					<when test='sortColumn.equalsIgnoreCase("ExtVacDay")'>"ExtVacDay"</when>
					<when test='sortColumn.equalsIgnoreCase("RegisterName")'>"RegisterName"</when>
					<when test='sortColumn.equalsIgnoreCase("RegistDate")'>"RegistDate"</when>
					<when test='sortColumn.equalsIgnoreCase("ExpDate")'>"ExpDate"</when>
					<when test='sortColumn.equalsIgnoreCase("ExtUseVacDay")'>"ExtUseVacDay"</when>
					<when test='sortColumn.equalsIgnoreCase("ExtRemainVacDay")'>"ExtRemainVacDay"</when>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>"IsUse"</when>
					<when test='sortColumn.equalsIgnoreCase("ExtReason")'>"ExtReason"</when>
					<otherwise>VacKind, RegistDate</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		<if test='pageSize != null and pageOffset != null and pageSize >= 0 and pageOffset >= 0'>
			<include refid="oracle.include.pagingFooter"/>
		</if>
	</select>

	<select id="selectVacationManageListCnt" resultType="java.lang.Long">
		/* groupware.vacation.selectVacationManageListCnt */
		SELECT count(VacationInfoID)
		FROM 		vm_vacationinfo A
		LEFT JOIN sys_object_user U ON A.UR_Code = u.UserCode
		LEFT JOIN sys_object_user_basegroup B ON A.UR_Code = B.UserCode AND JobType = 'Origin'
		WHERE  #{year}  BETWEEN EXTRACT(YEAR FROM TO_DATE(a.Sdate)) AND EXTRACT(YEAR FROM TO_DATE(a.Sdate))
		AND (GUBUN ='VACATION_PUBLIC' OR GUBUN ='VACATION_PUBLIC_CANCEL')
		<if test='vacationInfoID != null and vacationInfoID !=""'>
			AND A.VacationInfoID = #{vacationInfoID}
		</if>
		<if test='domainCode != null and domainCode != ""'>
			AND B.Companycode = #{domainCode}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
	</select>
	<select id="selectVacationManageList" parameterType="cmap" resultType="cmap">
		/* groupware.vacation.selectVacationManageList */
		<include refid="oracle.include.pagingHeader"/>
		SELECT VacationInfoID AS "VacationInfoID"
			, A.UR_Code AS "UR_Code"
			, Fn_BaseGetDictionary_S(#{lang}, u.MultiDisplayName) AS "DisplayName"
			, TO_CHAR(APPDATE, 'YYYY-MM-DD') AS "APPDATE"
			, TO_CHAR(ENDDATE, 'YYYY-MM-DD') AS "ENDDATE"
			, GUBUN AS "GUBUN"
			, Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName) AS "GubunName"
			, VacYear AS "VacYear"
			, Sdate AS "Sdate"
			, Edate AS "Edate"
			, VacFlag AS "VacFlag"
			, VacOffFlag AS "VacOffFlag"
			, Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName) AS "VacFlagName"
			, cast(cast(a.VacDay as DECIMAL(9,3)) as float) AS "VacDay"
			, Reason AS "Reason"
			, WorkItemID AS "WorkItemID"
			, A.ProcessID AS "ProcessID"
			, Fn_BaseGetDictionary_S(#{lang}, B.MultiDeptName) AS "DeptName"
			, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS "JobPositionName"
			, B.JobPositionSortKey AS "JobPositionSortKey"
			, B.JobLevelSortKey AS "JobLevelSortKey"
			, B.JobTitleSortKey AS "JobTitleSortKey"
			, (CASE WHEN (GUBUN = 'VACATION_CANCEL' OR GUBUN = 'VACATION_PUBLIC' OR GUBUN = 'VACATION_PUBLIC_CANCEL' )	
					THEN '(' || Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName) ||  ')' ||  Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)
					ELSE Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)
					END ) AS "VACTEXT"
		FROM 		vm_vacationinfo A
		LEFT JOIN sys_object_user U ON A.UR_Code = u.UserCode
		LEFT JOIN sys_object_user_basegroup B ON A.UR_Code = B.UserCode AND JobType = 'Origin'
		LEFT JOIN sys_base_code C ON A.GUBUN = C.Code AND C.CodeGroup = 'VACATION_GUBUN' AND C.DomainID =0
		LEFT JOIN sys_base_code D ON A.VacFlag = D.Code AND D.CodeGroup = 'VACATION_TYPE' AND D.DomainID =#{domainID}
		WHERE  #{year}  BETWEEN EXTRACT(YEAR FROM TO_DATE(a.Sdate)) AND EXTRACT(YEAR FROM TO_DATE(a.Sdate))
		AND (GUBUN ='VACATION_PUBLIC' OR GUBUN ='VACATION_PUBLIC_CANCEL')
		<if test='vacationInfoID != null and vacationInfoID !=""'>
			AND A.VacationInfoID = #{vacationInfoID}
		</if>
		<if test='domainCode != null and domainCode != ""'>
			AND B.Companycode = #{domainCode}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
		<trim prefix="ORDER BY"  prefixOverrides =",">
			<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			JobTitleSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			JobLevelSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			JobPositionSortKey ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			DisplayName ASC
				  		</if>
				  	</foreach>
				  	, VacationInfoID DESC
			  	</when>
			</choose>
			</if>
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>"DeptName"</when>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>"DisplayName"</when>
					<when test='sortColumn.equalsIgnoreCase("GubunName")'>"GubunName"</when>
					<when test='sortColumn.equalsIgnoreCase("VacFlagName")'>"VacFlagName"</when>
					<when test='sortColumn.equalsIgnoreCase("APPDATE")'>"APPDATE"</when>
					<when test='sortColumn.equalsIgnoreCase("Sdate")'>"Sdate"</when>
					<when test='sortColumn.equalsIgnoreCase("Edate")'>"Edate"</when>
					<when test='sortColumn.equalsIgnoreCase("VacDay")'>"VacDay"</when>
					<when test='sortColumn.equalsIgnoreCase("Reason")'>"Reason"</when>
					<otherwise>VacationInfoID</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter"/>		 
	</select>
	<select id="selectVacationListByKindCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationListByKindCnt */
		SELECT COUNT(*)
		FROM vm_vacationplan A
		LEFT JOIN (	SELECT A.UserCode
			, B.CompanyCode
			, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
			, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
			FROM sys_object_user A
			LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
		) B ON A.UR_Code = B.UserCode
		WHERE A.Year = #{year}
		<if test='domainCode != null and domainCode != ""'>
			AND B.Companycode = #{domainCode}
		</if>
		<if test='vacKind != null and vacKind != ""'>
			AND A.VacKind = #{vacKind}
		</if>
		<if test='sDate != null and sDate != ""'>
			AND A.UseStartDate = #{sDate}
		</if>
		<if test='eDate != null and eDate != ""'>
			AND A.UseEndDate = #{eDate}
		</if>
		<if test='urCode != null and urCode != ""'>
			AND A.UR_Code = #{urCode}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<when test='schTypeSel == "userCode"'>
					AND A.UR_Code = #{schTxt}
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
	</select>

	<select id="selectVacationListByKind" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationListByKind */
	<include refid="oracle.include.pagingHeader"/>
	SELECT UR_Code AS "UR_Code"
			, DisplayName AS "DisplayName"
			, DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
			, JobPositionSortKey AS "JobPositionSortKey"
			, JobLevelSortKey AS "JobLevelSortKey"
			, JobTitleSortKey AS "JobTitleSortKey"
			, VacName AS "VacName"
			, Year as "VacYear"
			, UseStartDate as "Sdate"
			, UseEndDate as "Edate"
			, VacKind AS "VacKind"
			, cast(NVL(VacDay,0.0) as float) AS "VacDay"
			, VmComment as "Reason"
			, RegisterName AS "RegisterName"
			, RegisterCode AS "RegisterCode"
			, RegistDate AS "RegistDate"
			, ExpDate AS "ExpDate"
			, cast(NVL(UseVacDay,0.0) as float) AS "UseVacDay"
			, cast(VacDay-NVL(UseVacDay,0.0) as float) AS "RemainVacDay"
			, SortKey AS "SortKey"
		FROM  (

				SELECT UR_CODE, DisplayName, DeptName, JobPositionName, JobPositionSortKey, JobLevelSortKey, JobTitleSortKey, VacName
					, YEAR, USESTARTDATE, USEENDDATE, VACKIND, VmComment , VacDay
					, RegisterName, RegisterCode, RegistDate, ExpDate, SortKey, COMPANYCODE
					, CASE WHEN VACKIND = 'PUBLIC' THEN
						( select SUM(NVL(VACDAY,0.0))
							from VM_VACATIONINFO VI
							left join (SELECT  B.Code
										, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
												Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
											ELSE
												B.CodeName
											END AS CodeName
										,A.Code as GroupCode
										, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, A.MultiCodeName) is not null THEN
												Fn_BaseGetDictionary_S(#{lang}, A.MultiCodeName)
											ELSE
												A.CodeName
											END AS GroupCodeName
										,B.SortKey
										,B.CodeID
									FROM
										(select *
											from sys_base_code WHERE IsUse = 'Y' AND DomainID = 0 ) A,
											sys_base_code B
											WHERE A.CodeID = B.ReservedInt
											AND B.IsUse = 'Y'
											AND B.DomainID = #{domainID}) C ON VI.VACFLAG = C.CODE
							WHERE TO_DATE(SDATE,'YYYY-MM-DD') <![CDATA[>=]]> TO_DATE(USESTARTDATE,'YYYYMMDD')
							AND TO_DATE(EDATE,'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(USEENDDATE,'YYYYMMDD')
							AND VI.UR_CODE = T.UR_CODE AND GroupCode = 'PUBLIC'
						)
					ELSE
						(select SUM(NVL(VACDAY,0.0))
							from VM_VACATIONINFO VI
							where  VI.UR_CODE = T.UR_CODE
							and TO_DATE(SDATE,'YYYY-MM-DD') <![CDATA[>=]]> TO_DATE(USESTARTDATE,'YYYYMMDD')
							AND TO_DATE(EDATE,'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(USEENDDATE,'YYYYMMDD')
							and VACFLAG = T.VACKIND
						)
					END AS UseVacDay
				FROM (
					SELECT A.UR_Code
						, B.DisplayName
						, Fn_BaseGetDictionary_S(#{lang}, B.MultiDeptName) AS DeptName
						, B.JobPositionName
						, B.JobPositionSortKey
						, B.JobLevelSortKey
						, B.JobTitleSortKey
						, CASE WHEN VACKIND = 'PUBLIC' THEN
								(select Fn_BaseGetDictionary_S(#{lang}, MULTICODENAME)
									from sys_base_code
									WHERE  DomainID = 0
									AND CODEGROUP='VACATION_KIND'
									AND CODE = VACKIND)
							ELSE
								(select Fn_BaseGetDictionary_S(#{lang}, MULTICODENAME)
									from sys_base_code
									WHERE  DomainID = #{domainID}
									AND CODEGROUP='VACATION_TYPE'
									AND CODE = VACKIND)
							END AS VacName
						, A.Year
						, UseStartDate
						, UseEndDate
						, VacKind
						, (select VacDay
							from VM_VACATIONPLAN
							where UR_CODE = A.UR_CODE
							and YEAR = A.YEAR
							and VACKIND = A.VACKIND
							and USESTARTDATE = A.USESTARTDATE
							and USEENDDATE = A.USEENDDATE)  AS VacDay
						, MAX(VmComment) AS VmComment
						, CASE WHEN RegisterName is not null THEN
								RegisterName
							ELSE
								A.RegisterCode
							END  AS RegisterName
						, A.RegisterCode AS RegisterCode
						, TO_CHAR(MAX(A.RegistDate), 'YYYY-MM-DD') AS RegistDate
						, TO_CHAR(TO_DATE(A.UseStartDate, 'YYYY-MM-DD'), 'YYYY.MM.DD') || ' ~ ' ||
							TO_CHAR(TO_DATE(A.UseEndDate, 'YYYY-MM-DD'), 'YYYY.MM.DD') AS ExpDate
						, MAX(C.SortKey) AS SortKey
						, B.CompanyCode
					FROM vm_vacationplan A
					LEFT JOIN (SELECT A.UserCode
									, B.CompanyCode
									, B.MultiDeptName
									, B.JobPositionSortKey
									, B.JobLevelSortKey
									, B.JobTitleSortKey
									, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName)     AS DisplayName
									, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
								FROM sys_object_user A
								LEFT JOIN sys_object_user_basegroup B
								ON A.UserCode = B.UserCode AND JobType = 'Origin'
							) B ON A.UR_Code = B.UserCode
					LEFT JOIN (SELECT B.Code
								, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
										Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
									ELSE
										B.CodeName
									END AS CodeName
								, A.Code as GroupCode
								, CASE
								WHEN Fn_BaseGetDictionary_S(#{lang}, A.MultiCodeName) is not null THEN
										Fn_BaseGetDictionary_S(#{lang}, A.MultiCodeName)
									ELSE
										A.CodeName
									END AS GroupCodeName
								, B.SortKey
								, B.CodeID
							FROM (select *
									from sys_base_code
									WHERE IsUse = 'Y'
									AND DomainID = 0) A,
									sys_base_code B
								WHERE A.CodeID = B.ReservedInt
								AND B.IsUse = 'Y'
								AND B.DomainID = #{domainID}) C ON A.VacKind = C.GroupCode
					LEFT JOIN (SELECT UserCode,
									Fn_BaseGetDictionary_S(#{lang}, MultiDisplayName) AS RegisterName
								FROM sys_object_user) E ON A.RegisterCode = E.UserCode
					GROUP BY A.UR_Code
						, B.DisplayName, B.MultiDeptName, B.JobPositionName
						, A.Year, UseStartDate, UseEndDate, VacKind, RegisterName, A.RegisterCode
						, B.CompanyCode, C.GroupCode, B.JobPositionSortKey, B.JobLevelSortKey, B.JobTitleSortKey
				) T

		) TBL
			WHERE  1=1
			AND Year = #{year}
		    AND VacName is not null
		<if test='domainCode != null and domainCode != ""'>
			AND Companycode = #{domainCode}
		</if>
		<if test='vacKind != null and vacKind != ""'>
			AND VacKind = #{vacKind}
		</if>
		<if test='sDate != null and sDate != ""'>
			AND UseStartDate = #{sDate}
		</if>
		<if test='eDate != null and eDate != ""'>
			AND UseEndDate = #{eDate}
		</if>
		<if test='urCode != null and urCode != ""'>
			AND UR_Code = #{urCode}
		</if>
		<if test='codeID != null and codeID != ""'>
			AND CodeID = #{codeID}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<when test='schTypeSel == "userCode"'>
					AND UR_Code = #{schTxt}
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
		<trim prefix="ORDER BY"  prefixOverrides =",">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			JobTitleSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			JobLevelSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			JobPositionSortKey ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			DisplayName ASC
				  		</if>
				  	</foreach>
				  	, SortKey, VacKind, RegistDate ASC
			  	</when>
			</choose>
		</trim>
		<include refid="oracle.include.pagingFooter"/>
	</select>

	<select id="selectVacationListByKindAll" parameterType="cmap" resultType="cmap">
	<![CDATA[
		/* groupware.vacation.selectVacationListByKindAll */
		SELECT Year  AS "Year", VacKind as "VacKind", Fn_BaseGetDictionary_S('', VacName)  "VacName"
					,VacDay as "VacDay"
					,VacDayUse as "VacDayUse"
					,VacDayProc as "VacDayProc"
					,cast(VacDay-VacDayUse as float) AS "RemainVacDay" 
					,A.UseStartDate "Sdate"
					,A.UseEndDate "Edate"
					,to_char(to_Date(A.UseStartDate, 'yyyymmdd'),'yyyy.mm.dd')||' ~ '||to_char(to_Date(A.UseEndDate, 'yyyymmdd'),'yyyy.mm.dd') AS "ExpDate"
					,Reason "Reason"
					,case when to_char(sysdate,'yyyymmdd') BETWEEN UseStartDate AND UseEndDate then 'Y' ELSE 'N' END "CurYear"
			FROM   (
				SELECT YEAR, VacKind
							, case when p.vackind = 'PUBLIC' then k.MultiCodeName ELSE t.MultiCodeName END VacName
							, case when p.vackind = 'PUBLIC' then k.IsUse ELSE t.IsUse END IsUse
							, UseStartDate, UseEndDate
							, CAST(VacDay AS FLOAT) VacDay
							,(SELECT nvl(SUM(u.VacDay), 0) 
								FROM vm_vacationinfo_day u 
					   LEFT JOIN SYS_BASE_CODE k ON  u.VacFlag =  k.CODE AND k.CodeGroup = 'VACATION_TYPE' AND k.IsUse ='Y'	AND k.DomainID = #{domainID}						AND k.Reserved1 ='+' 
					   LEFT JOIN SYS_BASE_CODE t ON  k.ReservedInt = t.CodeID
							 WHERE p.ur_code = u.UR_Code AND u.VacDate BETWEEN TO_DATE(p.UseStartDate, 'YYYY-MM-DD') AND  TO_DATE(p.UseEndDate  , 'YYYY-MM-DD')
							   AND (p.VacKind = 'PUBLIC' AND p.VacKind = t.Code	OR p.vackind != 'PUBLIC' AND p.VacKind = K.Code)
							     ) VacDayUse
							 ,(SELECT nvl(SUM(u.VacDay), 0) 
								FROM vm_vacationinfo_process u 
					   LEFT JOIN SYS_BASE_CODE k ON  u.VacFlag =  k.CODE AND k.CodeGroup = 'VACATION_TYPE' AND k.IsUse ='Y'					AND k.DomainID = #{domainID}						AND k.Reserved1 ='+' 
					   LEFT JOIN SYS_BASE_CODE t ON  k.ReservedInt = t.CodeID
							 WHERE p.ur_code = u.UR_Code AND u.Sdate >= TO_DATE(p.UseStartDate, 'YYYY-MM-DD') AND u.EDate<=  TO_DATE(P.UseEndDate  , 'YYYY-MM-DD')
							   AND (p.VacKind = 'PUBLIC' AND p.VacKind = t.Code	OR p.vackind != 'PUBLIC' AND p.VacKind = K.Code)
							   AND Gubun = 'VACATION_APPLY'
							     ) VacDayProc
							 , p.VmComment Reason
			     FROM vm_vacationplan p
				 LEFT JOIN sys_base_code k ON p.vackind = 'PUBLIC'  AND k.CodeGroup = 'VACATION_KIND' AND k.DOMAINID=0 AND  k.code = vackind 
				 LEFT JOIN sys_base_code t ON p.vackind != 'PUBLIC' AND t.CodeGroup = 'VACATION_TYPE' AND t.DOMAINID in (0,#{domainID}) AND  t.code = vackind  AND t.IsUse = 'Y'
				 WHERE p.ur_code = #{schTxt}
		]]>		 
				<choose>
					<when test='mySummary == "Y"'>
						 AND	to_char(sysdate,'yyyymmdd')  BETWEEN UseStartDate AND UseEndDate	-- 현재
						 AND    VacKind = 'PUBLIC'
					</when>	
					<when test='reqType == "myVacation"'>
					</when>	
					<otherwise>
						 AND  (  UseEndDate BETWEEN to_char(add_months(sysdate, -3) ,'yyyymmdd') and to_char(sysdate-1  ,'yyyymmdd')  -- 과거 최대 3달
								OR	to_char(sysdate,'yyyymmdd')  BETWEEN UseStartDate AND UseEndDate	-- 현재
								OR  UseStartDate > to_char(sysdate,'yyyymmdd')	-- 미래 all
								)
					</otherwise> 
				</choose>		
			) A	 
			WHERE a.IsUse = 'Y'
			ORDER BY YEAR <if test='reqType == "myVacation"'>desc</if>, VacKind, UseStartDate, UseEndDate 
	</select>	
	
	<select id="selectVacationListByKindCntV2" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationListByKindCntV2 */
		SELECT COUNT(*)
		FROM vm_vacationplan A
		LEFT JOIN (	SELECT A.UserCode
			, B.CompanyCode
			, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
			, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
			FROM sys_object_user A
			LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
		) B ON A.UR_Code = B.UserCode
		WHERE A.Year = #{year}
		<if test='domainCode != null and domainCode != ""'>
			AND B.Companycode = #{domainCode}
		</if>
		<if test='vacKind != null and vacKind != ""'>
			AND A.VacKind = #{vacKind}
		</if>
		<if test='sDate != null and sDate != ""'>
			AND A.UseStartDate = #{sDate}
		</if>
		<if test='eDate != null and eDate != ""'>
			AND A.UseEndDate = #{eDate}
		</if>
		<if test='urCode != null and urCode != ""'>
			AND A.UR_Code = #{urCode}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<when test='schTypeSel == "userCode"'>
					AND A.UR_Code = #{schTxt}
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
	</select>

	<select id="selectVacationListByKindV2" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationListByKindV2 */
	<include refid="oracle.include.pagingHeader"/>
		SELECT UR_Code AS "UR_Code"
			, DisplayName AS "DisplayName"
			, DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
			, VacName AS "VacName"
			, VacYear as "VacYear"
			, Sdate as "Sdate"
			, Edate as "Edate"
			, VacKind AS "VacKind"
			, VacDay AS "VacDay"
			, Reason as "Reason"
			, RegisterName AS "RegisterName"
			, RegisterCode AS "RegisterCode"
			, RegistDate AS "RegistDate"
			, ExpDate AS "ExpDate"
			, UseVacDay AS "UseVacDay"
			, cast(VacDay-UseVacDay as float) AS "RemainVacDay"
			, TargetYear AS "TargetYear"
		FROM (
			SELECT
			UR_Code AS UR_Code
			, DisplayName AS DisplayName
			, DeptName AS DeptName
			, JobPositionName AS JobPositionName
			, VacName AS VacName
			, Year as VacYear
			, UseStartDate as Sdate
			, UseEndDate as Edate
			, VacKind AS VacKind
			, MAX(VacDay) AS VacDay
			, VmComment as Reason
			, RegisterName AS RegisterName
			, RegisterCode AS RegisterCode
			, RegistDate AS RegistDate
			, ExpDate AS ExpDate
			, SUM(UseVacDay) AS UseVacDay
			, TargetYear AS TargetYear
		FROM (
			SELECT A.UR_Code
				, B.DisplayName
				, Fn_BaseGetDictionary_S(#{lang}, NVL(A.DeptName, B.MultiDeptName)) AS DeptName
				, B.JobPositionName
				, GroupCodeName AS VacName
				, Year
				, UseStartDate
				, UseEndDate
				, VacKind
				, cast(cast(A.VacDay as DECIMAL(9,3)) as float) AS VacDay
				, VmComment
				, CASE WHEN RegisterName is not null THEN
						RegisterName
					ELSE
						A.RegisterCode
					END AS RegisterName
				, A.RegisterCode AS RegisterCode
				, TO_CHAR(A.RegistDate, 'YYYY-MM-DD') AS RegistDate
				, TO_CHAR(TO_DATE(A.UseStartDate,'YYYYMMDD'), 'YYYY.MM.DD') || ' ~ ' || TO_CHAR(TO_DATE(A.UseEndDate,'YYYYMMDD'), 'YYYY.MM.DD') AS ExpDate
				, (SELECT cast(NVL(SUM(NVL(VacDay,0.0)),0.0) as float)
					FROM vm_vacationinfo V
					,(SELECT  B.Code
							, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
									Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
								ELSE
									B.CodeName
								END AS CodeName
							, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, A.MultiCodeName) is not null THEN
									Fn_BaseGetDictionary_S(#{lang}, A.MultiCodeName)
								ELSE
									A.CodeName
								END  AS GroupCodeName
								,A.Code as GroupCode
								,B.SortKey
								,B.CodeID
						FROM
						(select * from sys_base_code WHERE IsUse = 'Y' AND DomainID = 0 ) A,
							sys_base_code B
						WHERE A.CodeID = B.ReservedInt
							AND B.IsUse = 'Y'
							AND B.Reserved1 = '+'
							<!--AND (B.Reserved2 is null or B.Reserved2 ='')-->
							AND B.DomainID = #{domainID} ) C
					where V.UR_Code = A.UR_Code
					AND V.VacFlag = C.Code
					AND C.GroupCode = 'PUBLIC'
					AND TO_DATE(V.Sdate,'YYYY-MM-DD') <![CDATA[>=]]> TO_DATE(A.UseStartDate,'YYYYMMDD')
					AND TO_DATE(V.Edate,'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(A.UseEndDate,'YYYYMMDD')
				) AS UseVacDay
				, TargetYear
				, B.CompanyCode
			FROM  (	SELECT A.UserCode
						, B.CompanyCode
						, B.MultiDeptName
						, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
						, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
						, A.TargetYear
						FROM (select UserCode, EnterDate, MultiDisplayName, RetireDate, SortKey
								, CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD')  <![CDATA[<=]]>  TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
										EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
									ELSE
										EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR)) END AS TargetYear
								from sys_object_user where EnterDate is not null) A
						LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
			) B
			LEFT JOIN (select * from vm_vacationplan where VacKind='PUBLIC') A
				ON A.UR_Code = B.UserCode and A.YEAR = B.TargetYear
			LEFT JOIN (SELECT   CASE WHEN Fn_BaseGetDictionary_S(#{lang}, A.MultiCodeName) is not null THEN
									Fn_BaseGetDictionary_S(#{lang}, A.MultiCodeName)
								ELSE
									A.CodeName
								END  AS GroupCodeName
								,A.Code as GroupCode
							FROM (select * from sys_base_code WHERE IsUse = 'Y' AND CODEGROUP='VACATION_KIND' AND DomainID = 0 ) A
			 ) C ON A.VacKind = C.GroupCode
			LEFT JOIN (SELECT UserCode ,Fn_BaseGetDictionary_S(#{lang}, MultiDisplayName) AS RegisterName
						FROM sys_object_user ) E ON A.RegisterCode = E.UserCode
			LEFT JOIN  (select Code, Fn_BaseGetDictionary_S(#{lang}, NVL(MultiCodeName, CodeName)) AS CodeName, SortKey
						from sys_base_code
						where IsUse = 'Y'
						and DomainID = #{domainID}
						and CodeGroup = 'VACATION_TYPE') G ON G.Code = A.VacKind
			) TB
			WHERE  1=1
			AND VacKind = 'PUBLIC'
		<if test='domainCode != null and domainCode != ""'>
			AND Companycode = #{domainCode}
		</if>
		<if test='vacKind != null and vacKind != ""'>
			AND VacKind = #{vacKind}
		</if>
		<if test='sDate != null and sDate != ""'>
			AND UseStartDate = #{sDate}
		</if>
		<if test='eDate != null and eDate != ""'>
			AND UseEndDate = #{eDate}
		</if>
		<if test='urCode != null and urCode != ""'>
			AND UR_Code = #{urCode}
		</if>
		<if test='codeID != null and codeID != ""'>
			AND CodeID = #{codeID}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<when test='schTypeSel == "userCode"'>
					AND UR_Code = #{schTxt}
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
		GROUP BY UR_Code, DisplayName, DeptName, JobPositionName, VacName, Year, UseStartDate, UseEndDate, VacKind, VmComment, RegisterName, RegisterCode, RegistDate, ExpDate, TargetYear

		<trim prefix='ORDER BY'>
			<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
				DisplayName, VacKind, RegistDate ASC
			</if>
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("ExtVacName")'>ExtVacName</when>
					<when test='sortColumn.equalsIgnoreCase("RegistDate")'>RegistDate</when>
					<when test='sortColumn.equalsIgnoreCase("ExtRemainVacDay")'>(VacDay-UseVacDay)</when>
					<when test='sortColumn.equalsIgnoreCase("ExtUseVacDay")'>ExtUseVacDay</when>
					<when test='sortColumn.equalsIgnoreCase("ExpDate")'>ExpDate</when>
					<when test='sortColumn.equalsIgnoreCase("ExtVacDay")'>ExtVacDay</when>
					<when test='sortColumn.equalsIgnoreCase("ExtReason")'>ExtReason</when>
					<when test='sortColumn.equalsIgnoreCase("RegisterName")'>RegisterName</when>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
					<otherwise>DisplayName, VacKind, RegistDate</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		)TBL
		<include refid="oracle.include.pagingFooter"/>
	</select>

	<select id="selectVacationListByKindV3" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationListByKindV3 */
	<include refid="oracle.include.pagingHeader"/>
	SELECT UR_Code AS "UR_Code"
			, DisplayName AS "DisplayName"
			, DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
			, VacName AS "VacName"
			, Year as "VacYear"
			, UseStartDate as "Sdate"
			, UseEndDate as "Edate"
			, VacKind AS "VacKind"
			, VacDay AS "VacDay"
			, VmComment as "Reason"
			, RegisterName AS "RegisterName"
			, RegisterCode AS "RegisterCode"
			, RegistDate AS "RegistDate"
			, ExpDate AS "ExpDate"
			, UseVacDay AS "UseVacDay"
			, cast(VacDay-UseVacDay as float) AS "RemainVacDay"
			, SortKey AS "SortKey"
			, TargetYear AS "TargetYear"
		FROM  (
			SELECT A.UR_Code
				, B.DisplayName
				, Fn_BaseGetDictionary_S(#{lang}, NVL(A.DeptName, B.MultiDeptName)) AS DeptName
				, B.JobPositionName
				, NVL(C.CodeName, G.CodeName) AS VacName
				, Year
				, UseStartDate
				, UseEndDate
				, VacKind
				, cast(cast(A.VacDay as DECIMAL(9,3)) as float) AS VacDay
				, VmComment
				, CASE WHEN RegisterName is not null THEN
						RegisterName
					ELSE
						A.RegisterCode
					END AS RegisterName
				, A.RegisterCode AS RegisterCode
				, TO_CHAR(A.RegistDate, 'YYYY-MM-DD') AS RegistDate
				, TO_CHAR(TO_DATE(A.UseStartDate, 'YYYYMMDD'), 'YYYY.MM.DD') || ' ~ ' || TO_CHAR(TO_DATE(A.UseEndDate, 'YYYYMMDD'), 'YYYY.MM.DD') AS ExpDate
				, A.UseVacDay AS UseVacDay
				, NVL(C.SortKey, G.SortKey) AS SortKey
				, TargetYear
				, B.CompanyCode
			FROM  (	SELECT A.UserCode
						, B.CompanyCode
						, B.MultiDeptName
						, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
						, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
						, A.TargetYear
						, CONCAT(A.TargetYear,TO_CHAR(TO_DATE(REPLACE(A.EnterDate,'-',''),'YYYYMMDD'),'MMDD')) AS TargetSdate
						, TO_CHAR(TO_DATE(CONCAT(A.TargetYear,TO_CHAR(TO_DATE(REPLACE(A.EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY),'YYYYMMDD') AS TargetEdate
						FROM (select UserCode, EnterDate, MultiDisplayName, RetireDate, SortKey
								, CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD')  <![CDATA[<=]]>  TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
										EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
									ELSE
										EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR)) END AS TargetYear
								from sys_object_user where EnterDate is not null) A
						LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
			) B
			LEFT JOIN (select
						P.*,
						(SELECT cast(NVL(SUM(NVL(VacDay,0.0)),0.0) as float)
							FROM vm_vacationinfo V
						,(SELECT  B.Code
							, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
									Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
								ELSE
									B.CodeName
								END AS CodeName
							, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, A.MultiCodeName) is not null THEN
									Fn_BaseGetDictionary_S(#{lang}, A.MultiCodeName)
								ELSE
									A.CodeName
								END  AS GroupCodeName
							,A.Code as GroupCode
							,B.SortKey
							,B.CodeID
						FROM
							(select * from sys_base_code WHERE IsUse = 'Y' AND DomainID = 0 ) A,
								sys_base_code B
								WHERE A.CodeID = B.ReservedInt
								AND B.IsUse = 'Y'
								AND B.Reserved1 = '+'
								<!--AND (B.Reserved2 is null or B.Reserved2 ='')-->
								AND B.DomainID = #{domainID} ) C
							where V.UR_Code = P.UR_Code
							AND V.VacFlag = C.Code
							AND V.VACFLAG = P.VACKIND
							AND C.GroupCode <![CDATA[<>]]> 'PUBLIC'
							AND TO_DATE(V.Sdate,'YYYY-MM-DD') <![CDATA[>=]]> TO_DATE(P.UseStartDate,'YYYYMMDD')
							AND TO_DATE(V.Edate,'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(P.UseEndDate,'YYYYMMDD')
						) AS UseVacDay
					from vm_vacationplan P
					where VacKind  <![CDATA[<>]]>  'PUBLIC') A
					ON A.UR_Code = B.UserCode and A.UseStartDate >= B.TargetSdate and A.UseEndDate <![CDATA[<=]]> B.TargetEdate
			LEFT JOIN (SELECT  B.Code
							, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
								Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
							ELSE
								B.CodeName
							END AS CodeName
							,A.Code as GroupCode
							,B.SortKey
							,B.CodeID
						FROM (select * from sys_base_code WHERE IsUse = 'Y' AND DomainID = 0 ) A,
							sys_base_code B
						WHERE A.CodeID = B.ReservedInt
						AND B.IsUse = 'Y'
						AND B.DomainID = #{domainID}) C ON A.VacKind = C.GroupCode
				LEFT JOIN (SELECT UserCode ,Fn_BaseGetDictionary_S(#{lang}, MultiDisplayName) AS RegisterName
							FROM sys_object_user ) E ON A.RegisterCode = E.UserCode
				LEFT JOIN  (select Code, Fn_BaseGetDictionary_S(#{lang}, NVL(MultiCodeName, CodeName)) AS CodeName, SortKey
							from sys_base_code
							where IsUse = 'Y'
							and DomainID = #{domainID}
							and CodeGroup = 'VACATION_TYPE') G ON G.Code = A.VacKind
			WHERE  1=1
			AND (C.CodeName is not null OR  G.CodeName is not null)
		<if test='domainCode != null and domainCode != ""'>
			AND Companycode = #{domainCode}
		</if>
		<if test='vacKind != null and vacKind != ""'>
			AND VacKind = #{vacKind}
		</if>
		<if test='sDate != null and sDate != ""'>
			AND UseStartDate = #{sDate}
		</if>
		<if test='eDate != null and eDate != ""'>
			AND UseEndDate = #{eDate}
		</if>
		<if test='urCode != null and urCode != ""'>
			AND UR_Code = #{urCode}
		</if>
		<if test='codeID != null and codeID != ""'>
			AND CodeID = #{codeID}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<when test='schTypeSel == "userCode"'>
					AND UR_Code = #{schTxt}
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
		<trim prefix='ORDER BY'>
			<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
				SortKey, DisplayName, VacKind, UseStartDate ASC
			</if>
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("ExtVacName")'>ExtVacName</when>
					<when test='sortColumn.equalsIgnoreCase("RegistDate")'>RegistDate</when>
					<when test='sortColumn.equalsIgnoreCase("ExtRemainVacDay")'>(VacDay-UseVacDay)</when>
					<when test='sortColumn.equalsIgnoreCase("ExtUseVacDay")'>ExtUseVacDay</when>
					<when test='sortColumn.equalsIgnoreCase("ExpDate")'>ExpDate</when>
					<when test='sortColumn.equalsIgnoreCase("ExtVacDay")'>ExtVacDay</when>
					<when test='sortColumn.equalsIgnoreCase("ExtReason")'>ExtReason</when>
					<when test='sortColumn.equalsIgnoreCase("RegisterName")'>RegisterName</when>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
					<otherwise>DisplayName, VacKind, RegistDate</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		) TBL
		<include refid="oracle.include.pagingFooter"/>
	</select>

	<select id="selectVacationByCode" parameterType="cmap" resultType="cmap">
		SELECT VT.UR_Code AS "UR_Code"
		,DeptName AS "DeptName"
		,CodeName AS "CodeName"
		,UseStartDate AS "Sdate"
		,UseEndDate AS "Edate"
		,VacKind AS "VacKind"
		,CAST(VacDay AS FLOAT) as "VacDay"
		,CAST(NVL(UseVacDay,0.0) AS FLOAT) as "VacDayUse"
		,CAST(VacDay - NVL(UseVacDay,0.0) AS FLOAT) as "VacDayRemain"
		FROM (
		SELECT
		UR_Code,DeptName,CodeName,UseStartDate,UseEndDate,VacKind,VacDay, UseVacDay
		FROM (SELECT  B.Code
		, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName) is not null THEN
		Fn_BaseGetDictionary_S(#{lang}, B.MultiCodeName)
		ELSE
		B.CodeName
		END AS CodeName
		,A.Code as GroupCode
		,A.CodeName as GroupCodeName
		,B.SortKey
		,B.CodeID
		FROM

		(select *
		from sys_base_code
		WHERE IsUse = 'Y'
		AND DomainID = 0
		) A,
		sys_base_code B
		WHERE A.CodeID = B.ReservedInt
		AND B.IsUse = 'Y'
		AND B.CodeID = #{codeID}
		AND B.DomainID = #{domainID}) TY
		,
		(
		SELECT UR_Code, DeptName, VacKind
		, VacDay, UseVacDay, USESTARTDATE, USEENDDATE
		FROM (
		SELECT P.UR_Code
		, P.DeptName
		, P.VacKind
		, P.VacDay
		, P.USESTARTDATE
		, P.USEENDDATE
		, CASE
		WHEN P.VACKIND = 'PUBLIC' THEN
		(
		select NVL(SUM(VacDay), 0.0)
		from vm_vacationinfo A,
		(select BA.Code, BA.ReservedInt, BA.CodeGroup, BB.Code as VacKindCode
		from (select *
		from sys_base_code
		where IsUse = 'Y'
		and DomainID = #{domainID}
		and Reserved1 = '+'
		and CodeGroup = 'VACATION_TYPE') BA
		,
		(select *
		from sys_base_code
		where IsUse = 'Y'
		and DomainID = '0'
		and CodeGroup = 'VACATION_KIND') BB
		where BA.ReservedInt = BB.CodeID
		) B
		where A.VacFlag = B.Code
		AND B.VacKindCode = P.VacKind
		AND TO_DATE(A.SDATE, 'YYYY-MM-DD') <![CDATA[>=]]> TO_DATE(P.UseStartDate, 'YYYYMMDD')
		AND TO_DATE(A.EDATE, 'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(P.UseEndDate, 'YYYYMMDD')
		AND A.UR_CODE = P.UR_CODE
		)
		ELSE
		(
		select NVL(SUM(VacDay), 0.0)
		from vm_vacationinfo A,
		(select BA.Code, BA.ReservedInt, BA.CodeGroup, BB.Code as VacKindCode
		from (select *
		from sys_base_code
		where IsUse = 'Y'
		and Reserved1 = '+'
		and DomainID = #{domainID}
		and CodeGroup = 'VACATION_TYPE') BA
		,
		(select *
		from sys_base_code
		where IsUse = 'Y'
		and DomainID = '0'
		and CodeGroup = 'VACATION_KIND') BB
		where BA.ReservedInt = BB.CodeID
		) B
		where A.VacFlag = B.Code
		AND B.Code = P.VacKind
		AND TO_DATE(A.SDATE, 'YYYY-MM-DD') <![CDATA[>=]]>	TO_DATE(P.UseStartDate, 'YYYYMMDD')
		AND TO_DATE(A.EDATE, 'YYYY-MM-DD') <![CDATA[<=]]> TO_DATE(P.UseEndDate, 'YYYYMMDD')
		AND A.UR_CODE = P.UR_CODE
		)
		END AS UseVacDay
		FROM (SELECT U.UserCode
		, CASE WHEN CFG.CreateMethod = 'J' THEN
		CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]> TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
		TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD')
		ELSE
		TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') - (INTERVAL '1' YEAR )
		END
		ELSE
		TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')
		END AS TargetYearFrom
		FROM (select * from sys_object_user
		where ENTERDATE is not null
		<if test='urCode != null and urCode != ""'>
			AND USERCODE = #{urCode}
		</if>
		<if test='userList != null and userList != ""'>
			AND USERCODE in
			<foreach collection="userList" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		) U
		LEFT JOIN vm_config CFG ON CFG.CompanyCode = #{domainCode}
		LEFT JOIN sys_object_user_basegroup UB ON U.UserCode = UB.UserCode AND UB.JobType = 'Origin'
		) UR
		LEFT JOIN vm_vacationplan P ON P.UR_CODE = UR.USERCODE
		AND TO_DATE(P.USESTARTDATE,'YYYYMMDD') <![CDATA[>=]]> UR.TargetYearFrom
		AND TO_DATE(P.USESTARTDATE,'YYYYMMDD') <![CDATA[<=]]> (UR.TargetYearFrom + (INTERVAL '1' YEAR ) - (INTERVAL '1' DAY ))
		WHERE 1=1
		<if test='calMonth != null and calMonth != ""'>
			and TO_DATE(#{calMonth}, 'YYYY-MM') between TO_DATE(SUBSTR(UseStartDate,1,6), 'YYYYMM') and TO_DATE(SUBSTR(UseEndDate,1,6), 'YYYYMM')
		</if>
		) P
		) PL
		WHERE  TY.Code = PL.VacKind OR (TY.GroupCode = 'PUBLIC' AND PL.VACKIND = 'PUBLIC')
		) VT
	</select>

	<select id="checkVacationExtraPlan" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.checkVacationExtraPlan */
	<include refid="oracle.include.pagingHeader"/>
		SELECT UR_Code AS "UR_Code"
			, DisplayName AS "DisplayName"
			, DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
			, Year AS "Year"
			,CASE WHEN VacDay <![CDATA[<]]> 0 THEN
					0.0
				ELSE
					VacDay
				END AS "VacDay"
			,CASE WHEN TotVacDay <![CDATA[<]]> 0 THEN
					0.0
				ELSE
					TotVacDay
				END AS "TotVacDay"
			,(select ExistDate
				from (select ROWNUM
						, TO_CHAR(TO_DATE(UseStartDate,'YYYYMMDD'),'YYYY.MM.DD')||'~'||TO_CHAR(TO_DATE(UseEndDate,'YYYYMMDD'),'YYYY.MM.DD') AS ExistDate
						from vm_vacationplan
						where YEAR = #{year}
						and VacKind  =  #{vacKind}
						and UR_Code in
						<foreach collection="urCode" item="item" open="(" separator="," close=")">
							#{item}
						</foreach>
						and   (TO_DATE(#{sDate},'YYYY-MM-DD') between TO_DATE(UseStartDate,'YYYYMMDD') and TO_DATE(UseEndDate,'YYYYMMDD')
						or  TO_DATE(#{eDate},'YYYY-MM-DD') between TO_DATE(UseStartDate,'YYYYMMDD') and TO_DATE(UseEndDate,'YYYYMMDD'))
					and ROWNUM = 1)
			) AS "ExistDate"
		FROM (
				SELECT B.UserCode AS UR_Code
				, B.DisplayName AS DisplayName
				, Fn_BaseGetDictionary_S(NULL, B.MultiDeptName) AS DeptName
				, B.JobPositionName AS JobPositionName
				, Year AS Year
				, cast(SUM(NVL(A.VacDay,0.0)) as float) AS VacDay
				, cast(SUM(NVL(A.VacDay,0.0))+#{vacDay} as float) AS TotVacDay
			FROM (	SELECT A.UserCode
					, B.CompanyCode
					, B.MultiDeptName
					, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
					, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
					FROM sys_object_user A
					LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
					WHERE A.UserCode in
					<foreach collection="urCode" item="item" open="(" separator="," close=")">
						#{item}
					</foreach>
					<if test='domainCode != null and domainCode != ""'>
						AND B.Companycode = #{domainCode}
					</if>
				) B
			LEFT JOIN (select UR_Code, YEAR, VacKind, DeptName, SUM(VacDay) as VacDay
						from vm_vacationplan
						where YEAR = #{year} and VacKind <![CDATA[<>]]> 'PUBLIC'
						group by UR_Code, YEAR, VacKind, DeptName) A ON A.UR_Code = B.UserCode

			GROUP BY B.UserCode, DisplayName, Year, B.JobPositionName, B.MultiDeptName, B.JobPositionName
		) TBL
		<include refid="oracle.include.pagingFooter"/>
	</select>

	<update id="updateExtraVacDay" parameterType="cmap">
	/* groupware.vacation.updateExtraVacDay */
		UPDATE vm_vacationplan
		SET VacDay = #{vacDay}
		, UseStartDate = #{sDate}
		, UseEndDate = #{eDate}
		, VmComment = #{comment}
		WHERE UR_Code = #{urCode}
		AND VacKind = #{vacKind}
		AND UseStartDate = #{extSdate}
		AND UseEndDate = #{extEdate}
	</update>

	<insert id="insertExtraVacationPlan" parameterType="cmap">
	/* groupware.vacation.insertExtraVacationPlan */
		INSERT INTO vm_vacationplan (UR_Code, YEAR, VacDay, VacKind, UseStartDate, UseEndDate
		, DeptCode, DeptName
		, VmComment, RewardVacDay, RegisterCode, RegistDate)
		VALUES (#{urCode}, #{year}, #{vacDay}, #{vacKind}, #{sDate}, #{eDate},
		(select DeptCode from sys_object_user_basegroup where UserCode = #{urCode} and JobType='Origin'),
		(select MultiDeptName from sys_object_user_basegroup where UserCode = #{urCode} and JobType='Origin')
		, #{comment}, 0, #{registerCode}, SYSDATE
		)
	</insert>

	<insert id="insertVmPlanHist" parameterType="cmap">
	/* groupware.vacation.insertVmPlanHist */
		INSERT INTO vm_plan_hist (
			HISTSEQ
			, VacKind
			, UR_Code
			, UseStartDate
			, UseEndDate
			, VacDay
			, VmComment
			, VmMethod
			, RegisterCode
			, RegistDate
			, ModifierCode
			, ModifyDate
		)
		VALUES (
			VM_PLAN_HIST_SEQ.NEXTVAL
			, #{vacKind}
			, #{urCode}
			, #{sDate}
			, #{eDate}
			, #{vacDay}
			, #{comment}
			, #{vmMethod}
			, #{registerCode}
			, SYSDATE
			, #{modifierCode}
			, SYSDATE
		)
	</insert>

	<update id="updateVmPlanHist" parameterType="cmap">
	/* groupware.vacation.updateVmPlanHist */
		UPDATE vm_plan_hist SET
			  VacKind = #{vacKind}
			, UR_Code = #{urCode}
			, UseStartDate = #{sDate}
			, UseEndDate = #{eDate}
			, VacDay = #{vacDay}
			, VmComment = #{comment}
			, ModifierCode = #{modifierCode}
			, ModifyDate = SYSDATE
		WHERE UR_Code = #{urCode}
			AND VacKind = #{vacKind}
			AND UseStartDate = #{extSdate}
			AND UseEndDate = #{extEdate}
	</update>

	<select id="selectVacationPlanHistListCnt" resultType="java.lang.Long">
		/* groupware.vacation.selectVacationPlanHistListCnt */
		SELECT COUNT(*)
		FROM (
				SELECT UR_Code AS "UR_Code"
				FROM (
					SELECT A.UR_Code
						, e.DisplayName
						, Fn_BaseGetDictionary_S(#{lang}, NVL(A.DeptName, B.MultiDeptName)) AS DeptName
						, B.JobPositionName
						, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName) is not null THEN
								Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)
							ELSE
								Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName)
							END AS ExtVacName
						, Year
						, H.UseStartDate
						, H.UseEndDate
						, H.VacKind
						, H.VmComment
						, TO_CHAR(H.RegistDate,'YYYY-MM-DD') AS ChangeDate
						, cast(cast(A.VacDay as DECIMAL(9,3)) as float) AS ExtVacDay
						, H.VmComment AS ExtReason
						, A.RegisterCode
						, TO_CHAR(A.RegistDate, 'YYYY-MM-DD') AS RegistDate
						, TO_CHAR(TO_DATE(A.UseStartDate,'YYYYMMDD'),'YY.MM.DD') || ' ~ ' || TO_CHAR(TO_DATE(A.UseEndDate,'YYYYMMDD'),'YY.MM.DD') AS ExpDate
						, (SELECT cast(NVL(SUM(VacDay),0.0) as float) FROM vm_vacationinfo
							WHERE A.UR_Code = UR_Code AND TRIM(VacFlag) = H.VacKind
							AND TO_DATE(REPLACE(Sdate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(H.UseStartDate,'-',''),'YYYYMMDD') AND TO_DATE(REPLACE(H.UseEndDate,'-',''),'YYYYMMDD')
						) AS ExtUseVacDay
						, B.DeptCode
						, e.RetireDate
						, B.CompanyCode
						, A.VacDay
					FROM vm_plan_hist H
					LEFT JOIN vm_vacationplan A ON A.VacKind = H.VacKind AND A.UR_Code = H.UR_Code AND A.UseStartDate = H.UseStartDate AND A.UseEndDate = H.UseEndDate   AND A.YEAR = #{year}
					LEFT JOIN sys_object_user e ON A.UR_Code = e.UserCode
					LEFT JOIN sys_object_user_basegroup B ON e.UserCode = B.UserCode AND JobType = 'Origin'  
					LEFT JOIN sys_base_code C ON A.VacKind = C.Code AND C.CodeGroup = 'VACATION_KIND' AND C.DomainID = 0
				 	LEFT JOIN sys_base_code D ON A.VacKind = D.Code AND D.CodeGroup = 'VACATION_TYPE' AND D.DomainID =#{domainID}
				) TBL
				WHERE 1=1
				<if test='domainCode != null and domainCode != ""'>
					AND Companycode = #{domainCode}
				</if>
				<if test='vacKind != null and vacKind != ""'>
					AND VacKind = #{vacKind}
				</if>
				<if test='sDate != null and sDate != ""'>
					AND UseStartDate = #{sDate}
				</if>
				<if test='eDate != null and eDate != ""'>
					AND UseEndDate = #{eDate}
				</if>
				<if test='schEmploySel != null and schEmploySel != ""'>
					<choose>
						<when test='schEmploySel == "INOFFICE"'>
							AND RetireDate IS NULL
							AND DeptCode NOT LIKE '%RetireDept'
						</when>
						<otherwise> <!-- RETIRE -->
							AND (RetireDate != '' OR RetireDate IS NOT NULL)
							AND EXTRACT(YEAR FROM TO_DATE(RetireDate)) = #{year}
						</otherwise>
					</choose>
				</if>
				<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
					<choose>
						<when test='schTypeSel == "deptName"'>
							AND DeptName LIKE '%' || #{schTxt} || '%'
						</when>
						<otherwise>
							AND DisplayName LIKE '%' || #{schTxt} || '%'
						</otherwise>
					</choose>
				</if>
			) T
	</select>

	<select id="selectVacationPlanHistList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationPlanHistList */

	<include refid="oracle.include.pagingHeader"/>
		SELECT UR_Code AS "UR_Code"
			, DisplayName AS "DisplayName"
			, DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
			, ExtVacName AS "ExtVacName"
			, Year AS "ExtVacYear"
			, ChangeDate as "ChangeDate"
			, UseStartDate AS "ExtSdate"
			, UseEndDate AS "ExtEdate"
			, VacKind AS "ExtVacType"
			, VmComment as "VmComment"
			, ExtVacDay AS "ExtVacDay"
			, ExtReason AS "ExtReason"
			, (SELECT Fn_BaseGetDictionary_S(#{lang}, MultiDisplayName) FROM sys_object_user WHERE UserCode =  TBL.RegisterCode) AS "RegisterName"
			, RegistDate AS "RegistDate"
			, ExpDate AS "ExpDate"
			, ExtUseVacDay AS "ExtUseVacDay"
			, cast(VacDay-ExtUseVacDay as float) AS "ExtRemainVacDay"
		FROM (
			SELECT A.UR_Code
				, e.DisplayName
				, Fn_BaseGetDictionary_S(#{lang}, NVL(A.DeptName, B.MultiDeptName)) AS DeptName
				, B.JobPositionName
				, CASE WHEN Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName) is not null THEN
						Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)
					ELSE
						Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName)
					END AS ExtVacName
				, Year
				, H.UseStartDate
				, H.UseEndDate
				, H.VacKind
				, H.VmComment
				, TO_CHAR(H.RegistDate,'YYYY-MM-DD') AS ChangeDate
				, cast(cast(A.VacDay as DECIMAL(9,3)) as float) AS ExtVacDay
				, H.VmComment AS ExtReason
				, A.RegisterCode
				, TO_CHAR(A.RegistDate, 'YYYY-MM-DD') AS RegistDate
				, TO_CHAR(TO_DATE(A.UseStartDate,'YYYYMMDD'),'YY.MM.DD') || ' ~ ' || TO_CHAR(TO_DATE(A.UseEndDate,'YYYYMMDD'),'YY.MM.DD') AS ExpDate
				, (SELECT cast(NVL(SUM(VacDay),0.0) as float) FROM vm_vacationinfo
					WHERE A.UR_Code = UR_Code AND TRIM(VacFlag) = H.VacKind
					AND TO_DATE(REPLACE(Sdate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(H.UseStartDate,'-',''),'YYYYMMDD') AND TO_DATE(REPLACE(H.UseEndDate,'-',''),'YYYYMMDD')
				) AS ExtUseVacDay
				, B.DeptCode
				, e.RetireDate
				, B.CompanyCode
				, A.VacDay
			FROM vm_plan_hist H
			LEFT JOIN vm_vacationplan A ON A.VacKind = H.VacKind AND A.UR_Code = H.UR_Code AND A.UseStartDate = H.UseStartDate AND A.UseEndDate = H.UseEndDate   AND A.YEAR = #{year}
			LEFT JOIN sys_object_user e ON A.UR_Code = e.UserCode
			LEFT JOIN sys_object_user_basegroup B ON e.UserCode = B.UserCode AND JobType = 'Origin'  
			LEFT JOIN sys_base_code C ON A.VacKind = C.Code AND C.CodeGroup = 'VACATION_KIND' AND C.DomainID = 0
		 	LEFT JOIN sys_base_code D ON A.VacKind = D.Code AND D.CodeGroup = 'VACATION_TYPE' AND D.DomainID =#{domainID}
		) TBL
		WHERE 1=1
		<if test='domainCode != null and domainCode != ""'>
			AND Companycode = #{domainCode}
		</if>
		<if test='vacKind != null and vacKind != ""'>
			AND VacKind = #{vacKind}
		</if>
		<if test='sDate != null and sDate != ""'>
			AND UseStartDate = #{sDate}
		</if>
		<if test='eDate != null and eDate != ""'>
			AND UseEndDate = #{eDate}
		</if>
		<if test='schEmploySel != null and schEmploySel != ""'>
			<choose>
				<when test='schEmploySel == "INOFFICE"'>
					AND RetireDate IS NULL
					AND DeptCode NOT LIKE '%RetireDept'
				</when>
				<otherwise> <!-- RETIRE -->
					AND (RetireDate != '' OR RetireDate IS NOT NULL)
					AND EXTRACT(YEAR FROM TO_DATE(RetireDate)) = #{year}
				</otherwise>
			</choose>
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<otherwise>
					AND DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
		<trim prefix='ORDER BY'>
			<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
				TBL.ChangeDate DESC, DisplayName ASC
			</if>
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("ExtVacName")'>ExtVacName</when>
					<when test='sortColumn.equalsIgnoreCase("ChangeDate")'>TBL.ChangeDate</when>
					<when test='sortColumn.equalsIgnoreCase("ExtRemainVacDay")'>(VacDay-ExtUseVacDay)</when>
					<when test='sortColumn.equalsIgnoreCase("ExtUseVacDay")'>ExtUseVacDay</when>
					<when test='sortColumn.equalsIgnoreCase("ExpDate")'>ExpDate</when>
					<when test='sortColumn.equalsIgnoreCase("ExtVacDay")'>ExtVacDay</when>
					<when test='sortColumn.equalsIgnoreCase("ExtReason")'>ExtReason</when>
					<when test='sortColumn.equalsIgnoreCase("RegisterName")'>RegisterName</when>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
					<otherwise>H.RegistDate, DisplayName</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>

		<include refid="oracle.include.pagingFooter"/>

	</select>

	<select id="selectVacationCancelList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationCancelList */
	<include refid="oracle.include.pagingHeader"/>
		SELECT A.VacationInfoID AS "VacationInfoID"
			, A.UR_Code AS "UR_Code"
			, A.DisplayName AS "DisplayName"
			, A.APPDATE
			, A.ENDDATE
			, A.GUBUN
			, Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName) AS "GubunName"
			, A.VacYear AS "VacYear"
			, A.Sdate AS "Sdate"
			, A.Edate AS "Edate"
			, A.VacFlag AS "VacFlag"
			, A.VacOffFlag AS "VacOffFlag"
			, Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName) AS "VacFlagName"
			, cast(cast(TO_CHAR(A.VacDay, 'fm90.000') as DECIMAL(9,3)) as float) AS "VacDay"
			, (SELECT nvl(SUM(vacday),0) FROM vm_vacationinfo_day d WHERE d.UR_Code = a.UR_Code and d.VacDate BETWEEN a.Sdate AND a.Edate) as  "VacDayTot"
			, A.Reason AS "Reason"
			, A.WorkItemID AS "WorkItemID"
			, A.ProcessID AS "ProcessID"
			, DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
		FROM	(
				SELECT A.VacationInfoID 
				, A.UR_Code 
				, B.DisplayName
				, A.APPDATE
				, A.ENDDATE
				, A.GUBUN
				, A.VacYear
				, A.Sdate 
				, A.Edate 
				, A.VacFlag
				, A.VacOffFlag
				, A.VacDay
				, A.Reason
				, A.WorkItemID 
				, A.ProcessID 
				, DeptName 
				, JobPositionName
			FROM  vm_vacationinfo  A
			LEFT JOIN (	SELECT A.UserCode
						, B.CompanyCode
						, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
						, Fn_BaseGetDictionary_S(#{lang}, B.MultiDeptName) AS DeptName
						, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
						FROM sys_object_user A
						LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin') B ON A.UR_Code = B.UserCode
			WHERE GUBUN not like '%_CANCEL' 
			AND   #{year}  between  substr(A.SDate,0,4) AND substr(A.EDate,0,4)
			<if test='VacationInfoId != null and VacationInfoId !=""'>
				AND A.VacationInfoID = #{VacationInfoId}
			</if>
			<if test='domainCode != null and domainCode != ""'>
				AND B.Companycode = #{domainCode}
			</if>
			<if test='urCode != null and urCode !=""'>
				AND A.UR_Code = #{urCode}
			</if>
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "deptName"'>
						AND B.DeptName LIKE '%' || #{schTxt} || '%'
					</when>
					<otherwise>
						AND B.DisplayName LIKE '%' || #{schTxt} || '%'
					</otherwise>
				</choose>
			</if>
		) A	
		LEFT JOIN sys_base_code C ON A.GUBUN = C.Code AND C.CodeGroup = 'VACATION_GUBUN' AND C.DomainID =0
		LEFT JOIN sys_base_code D ON A.VacFlag = D.Code AND D.CodeGroup = 'VACATION_TYPE' AND D.DomainID =#{domainID}
			<trim prefix='ORDER BY'>
				<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
					A.VacationInfoID DESC
				</if>
				<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
					<choose>
						<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
						<when test='sortColumn.equalsIgnoreCase("APPDATE")'>APPDATE</when>
						<when test='sortColumn.equalsIgnoreCase("ENDDATE")'>ENDDATE</when>
						<when test='sortColumn.equalsIgnoreCase("VacFlagName")'>"VacFlagName"</when>
						<when test='sortColumn.equalsIgnoreCase("VacYear")'>VacYear</when>
						<when test='sortColumn.equalsIgnoreCase("Sdate")'>A.Sdate</when>
						<when test='sortColumn.equalsIgnoreCase("Edate")'>A.Edate</when>
						<when test='sortColumn.equalsIgnoreCase("VacDay")'>"VacDay"</when>
						<when test='sortColumn.equalsIgnoreCase("Reason")'>Reason</when>
						<when test='sortColumn.equalsIgnoreCase("GubunName")'>"GubunName"</when>
						<when test='sortColumn.equalsIgnoreCase("VACTEXT")'>VACTEXT</when>
						<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
						<otherwise>VacationInfoID</otherwise>
					</choose>
					<choose>
						<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
						<otherwise> DESC</otherwise>
					</choose>
				</if>
			</trim>
			<include refid="oracle.include.pagingFooter"/>
	</select>

	<select id="selectVacationCancelListCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationCancelListCnt */
		SELECT COUNT(VacationInfoID)
		FROM (select * from vm_vacationinfo where GUBUN not like '%_CANCEL') A
		LEFT JOIN (	SELECT A.UserCode
			, B.CompanyCode
			, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
			, Fn_BaseGetDictionary_S(#{lang}, B.MultiDeptName) AS DeptName
			, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
			FROM sys_object_user A
			LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
		 ) B ON A.UR_Code = B.UserCode
		WHERE VacYear = #{year}
		<if test='VacationInfoId != null and VacationInfoId !=""'>
			AND A.VacationInfoID = #{VacationInfoId}
		</if>
		<if test='domainCode != null and domainCode != ""'>
			AND B.Companycode = #{domainCode}
		</if>
		<if test='urCode != null and urCode !=""'>
			AND A.UR_Code = #{urCode}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND B.DeptName LIKE '%' || #{schTxt} || '%'
				</when>
				<otherwise>
					AND B.DisplayName LIKE '%' || #{schTxt} || '%'
				</otherwise>
			</choose>
		</if>
	</select>

	<select id="selectVacationCancelCheck" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationCancelCheck */
	<include refid="oracle.include.pagingHeader"/>
		SELECT A.VacationInfoID AS "VacationInfoID"
			, A.UR_Code AS "UR_Code"
			, B.DisplayName AS "DisplayName"
			, A.APPDATE
			, A.ENDDATE
			, A.GUBUN
			, Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName) AS "GubunName"
			, A.VacYear AS "VacYear"
			, A.Sdate AS "Sdate"
			, A.Edate AS "Edate"
			, A.VacFlag AS "VacFlag"
			, A.VacOffFlag AS "VacOffFlag"
			, Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName) AS "VacFlagName"
			, cast(cast(TO_CHAR(A.VacDay) as DECIMAL(9,3)) as float) AS "VacDay"
			, cast(NVL(B.VacDayTot,0.0) as float) AS "VacDayTot"
			, cast(cast(TO_CHAR(NVL(SUM(V.VacDayUse),0.0)) as DECIMAL(9,3)) as float) AS "VacDayUse"
			, cast(cast(TO_CHAR(NVL(B.VacDayTot-SUM(V.VacDayUse),0.0)) as DECIMAL(9,3)) as float) AS "VacDayRemain"
			, A.Reason AS "Reason"
			, A.WorkItemID AS "WorkItemID"
			, A.ProcessID AS "ProcessID"
			, B.DeptName AS "DeptName"
			, JobPositionName AS "JobPositionName"
			, (CASE WHEN (A.GUBUN = 'VACATION_CANCEL' OR A.GUBUN = 'VACATION_PUBLIC' OR A.GUBUN = 'VACATION_PUBLIC_CANCEL' )
			THEN '(' || Fn_BaseGetDictionary_S(#{lang}, C.MultiCodeName) || ')' || Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)
			ELSE Fn_BaseGetDictionary_S(#{lang}, D.MultiCodeName)
			END ) AS VACTEXT
		FROM (select * from vm_vacationinfo) A
		LEFT JOIN (	SELECT A.UserCode
					, B.CompanyCode
					, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
					, Fn_BaseGetDictionary_S(#{lang}, B.MultiDeptName) AS DeptName
					, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
					, SUM(VacDay) AS VacDayTot
					, A.SDATE, A.EDATE
					FROM (
							select  UserCode, DisplayName, MULTIDISPLAYNAME, ENTERDATE
								,CASE WHEN CREATEMETHOD = 'J' THEN
									TO_DATE(CONCAT(TargetYear,TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD')
								ELSE
									TO_DATE(CONCAT(TargetYear, '0101'),'YYYYMMDD')
								END as Sdate
								, CASE WHEN CREATEMETHOD = 'J' THEN
									TO_DATE(CONCAT(TargetYear,TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY )
								ELSE
									TO_DATE(CONCAT(TargetYear, '1231'),'YYYYMMDD')
								END as Edate
							from (
							select UserCode, DisplayName, MULTIDISPLAYNAME, ENTERDATE, CFG.CREATEMETHOD
								,CASE WHEN CFG.CREATEMETHOD = 'J' THEN
										CASE WHEN TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]> TO_DATE(CONCAT(#{year},TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD') THEN
											EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
										ELSE
											EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR))
										END
									ELSE
										TO_NUMBER(#{year})
								END AS TargetYear
							from SYS_OBJECT_USER
								left join VM_CONFIG CFG ON CFG.COMPANYCODE = #{CompanyCode})
						) A
					LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
					LEFT JOIN vm_vacationplan E ON A.UserCode = E.UR_Code and TO_DATE(E.USESTARTDATE,'YYYYMMDD') <![CDATA[>=]]> A.SDATE and TO_DATE(E.USEENDDATE,'YYYYMMDD') <![CDATA[<=]]> A.EDATE
					group by A.UserCode, B.CompanyCode, DisplayName, JobPositionName, A.MultiDisplayName, B.MultiDeptName, B.MultiJobPositionName, A.SDATE, A.EDATE
			) B ON A.UR_Code = B.UserCode
		LEFT JOIN sys_base_code C ON A.GUBUN = C.Code AND C.CodeGroup = 'VACATION_GUBUN' AND C.DomainID = 0
		LEFT JOIN sys_base_code D ON A.VacFlag = D.Code AND D.CodeGroup = 'VACATION_TYPE' AND D.DomainID =#{domainID}
		LEFT JOIN (select UR_Code,  VACDAY as VacDayUse, SDATE, EDATE
					from vm_vacationinfo  ) V ON V.UR_Code = A.UR_Code AND TO_DATE(V.SDATE,'YYYY-MM-DD') <![CDATA[>=]]> B.SDATE AND TO_DATE(V.EDATE,'YYYY-MM-DD') <![CDATA[<=]]> B.EDATE
			WHERE A.VacationInfoID in
			<foreach collection="VacationInfoId" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
			<if test='domainCode != null and domainCode != ""'>
				AND B.Companycode = #{domainCode}
			</if>
			group by A.VacationInfoID, A.UR_Code, B.DisplayName, A.APPDATE
			, A.ENDDATE
			, A.GUBUN, C.MULTICODENAME
			, A.VacYear
			, A.Sdate
			, A.Edate
			, A.VacFlag
			, A.VacOffFlag
			, D.MultiCodeName, A.Reason
			, A.WorkItemID
			, A.ProcessID
			, B.DeptName, JobPositionName, A.VacDay, B.VacDayTot
			<trim prefix='ORDER BY'>
				<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
					A.VacationInfoID DESC
				</if>
			</trim>
			<include refid="oracle.include.pagingFooter"/>
	</select>

	<select id="selectVacationCancelCheckCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationCancelCheckCnt */
		SELECT COUNT(*)
		FROM (select UR_Code from vm_vacationinfo where VacYear = #{year}
			AND VacationInfoID in
			<foreach collection="VacationInfoId" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
			GROUP BY UR_Code) A
		LEFT JOIN (	SELECT A.UserCode
				, B.CompanyCode
				, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
				, Fn_BaseGetDictionary_S(#{lang}, B.MultiDeptName) AS DeptName
				, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
				FROM sys_object_user A
				LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin'
				<if test='domainCode != null and domainCode != ""'>
					AND B.Companycode = #{domainCode}
				</if>
		) B ON A.UR_Code = B.UserCode


	</select>

	<select id="selectVacationPromotionDateList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationPromotionDateList */
		SELECT
			  CompanyCode AS "CompanyCode"
			, ReqType AS "ReqType"
			, ReqTypeName AS "ReqTypeName"
			, ReqOrd AS "ReqOrd"
			, ReqMonth AS "ReqMonth"
			, ReqTermDay AS "ReqTermDay"
			, ReqOrder AS "ReqOrder"
			, CompanyCode2 AS "CompanyCode2"
			, ReqType2 AS "ReqType2"
			, ReqTypeName2 AS "ReqTypeName2"
			, ReqOrd2 AS "ReqOrd2"
			, ReqMonth2 AS "ReqMonth2"
			, ReqTermDay2 AS "ReqTermDay2"
			, ReqOrder2 AS "ReqOrder2"
		FROM
		(		SELECT
					CompanyCode,
					ReqType,
					Fn_GetBaseCodeName(#{domainID}, 'VacationPromotionDate', ReqType) ReqTypeName,
					ReqOrd,
					cast(cast(ReqMonth as DECIMAL(9,3)) as float) AS ReqMonth,
					ReqTermDay,
					ReqOrder
				FROM vm_reqconf
				WHERE CompanyCode = #{CompanyCode}
					AND ReqOrd IN ('0','1')
		) A
		LEFT JOIN
		(
				SELECT
					CompanyCode AS CompanyCode2,
					ReqType AS ReqType2,
					Fn_GetBaseCodeName(#{domainID}, 'VacationPromotionDate', ReqType) ReqTypeName2,
					ReqOrd AS ReqOrd2,
					cast(cast(ReqMonth as DECIMAL(9,3)) as float) AS ReqMonth2,
					ReqTermDay AS ReqTermDay2,
					ReqOrder AS ReqOrder2
				FROM vm_reqconf
				WHERE CompanyCode = #{CompanyCode}
					AND ReqOrd = '2'

		) B ON(A.CompanyCode = B.CompanyCode2 AND A.ReqOrder = B.ReqOrder2)
		WHERE 1=1
		ORDER BY A.ReqOrder ASC
	</select>

	<select id="selectVacPromotionDate" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacPromotionDate */
		SELECT
			CompanyCode AS "CompanyCode"
			, ReqType AS "ReqType"
			, ReqOrd AS "ReqOrd"
			, CAST(CAST(ReqMonth AS DECIMAL(9,3)) AS FLOAT) AS "ReqMonth"
			, ReqTermDay AS "ReqTermDay"
			, ReqOrder AS "ReqOrder"
		FROM vm_reqconf
		WHERE CompanyCode = #{CompanyCode}
			AND ReqType = #{reqType}
	</select>

	<update id="updateVacPromotionDate" parameterType="cmap">
	/* groupware.vacation.updateVacPromotionDate */
		MERGE INTO VM_REQCONF
			USING DUAL ON ( CompanyCode=#{CompanyCode} AND ReqType=#{reqType} AND ReqOrd=#{reqOrd} )
		WHEN MATCHED THEN
			UPDATE SET ReqMonth = #{reqMonth}
					,reqTermDay = #{reqTermDay}
		WHEN NOT MATCHED THEN
			INSERT ( CompanyCode, ReqType, ReqOrd, ReqMonth, ReqTermDay, ReqOrder )
			VALUES ( #{CompanyCode}, #{reqType}, #{reqOrd}, #{reqMonth}, #{reqTermDay}, #{reqOrder} )
	</update>

	<insert id="initVacationPromotionDate" parameterType="cmap">
		/* groupware.vacation.initVacationPromotionDate */
		{
		CALL
		DECLARE
		BEGIN
			INSERT INTO vm_reqconf
			(  CompanyCode, ReqType, ReqOrd, ReqMonth, ReqTermDay, ReqOrder )
			( SELECT #{companyCode}, ReqType, ReqOrd, ReqMonth, ReqTermDay, ReqOrder
				FROM vm_reqconf
				WHERE CompanyCode = 'ORGROOT');
			commit;
		END
		}
	</insert>


	<insert id="initVacationConfig" parameterType="cmap">
		/* groupware.vacation.initVacationConfig */
		{
			CALL
			DECLARE
			BEGIN
			INSERT INTO vm_config
			(  CompanyCode, CreateMethod, InitCnt, IncTerm, IncCnt
				, MaxCnt, RemMethod, YearRemMethod, IsRemRenewal, ReqInfoMethod, IsAuto
				, FormTitle090, FormTitle091, FormTitle092, FormTitle021, FormTitle022, FormTitle100, FormTitle101, FormTitle102
				, FormBody090, FormBody091, FormBody092, FormBody021, FormBody022, FormBody100, FormBody101, FormBody102
				, MailSenderName, MailSenderAddr
				, useYn090, useYn091, useYn092, useYn021, useYn022, useYn100, useYn101, useYn102
			)
			(
				SELECT
					#{companyCode}, CreateMethod, InitCnt, IncTerm, IncCnt
					, MaxCnt, 'N', 'Y', 'N', ReqInfoMethod, IsAuto
					, FormTitle090, FormTitle091, FormTitle092, FormTitle021, FormTitle022, FormTitle100, FormTitle101, FormTitle102
					, FormBody090, FormBody091, FormBody092, FormBody021, FormBody022, FormBody100, FormBody101, FormBody102
					, MailSenderName, MailSenderAddr
					, useYn090, useYn091, useYn092, useYn021, useYn022, useYn100, useYn101, useYn102
				FROM vm_config
				WHERE CompanyCode = 'ORGROOT'
			);
			commit;
			END
		}
	</insert>

	<select id="getVacationConfig" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.getVacationConfig */
		SELECT
			CompanyCode AS "CompanyCode"
			, CreateMethod AS "CreateMethod"
			, InitCnt AS "InitCnt"
			, IncTerm AS "IncTerm"
			, IncCnt AS "IncCnt"
			, MaxCnt AS "MaxCnt"
			, RemMethod AS "RemMethod"
			, YearRemMethod AS "YearRemMethod"
			, IsRemRenewal AS "IsRemRenewal"
			, ReqInfoMethod AS "ReqInfoMethod"
			, IsAuto AS "IsAuto"
			, FormTitle090 AS "FormTitle090"
			, FormTitle091 AS "FormTitle091"
			, FormTitle092 AS "FormTitle092"
			, FormTitle021 AS "FormTitle021"
			, FormTitle022 AS "FormTitle022"
			, FormTitle100 AS "FormTitle100"
			, FormTitle101 AS "FormTitle101"
			, FormTitle102 AS "FormTitle102"
			, FormBody090 AS "FormBody090"
			, FormBody091 AS "FormBody091"
			, FormBody092 AS "FormBody092"
			, FormBody021 AS "FormBody021"
			, FormBody022 AS "FormBody022"
			, FormBody100 AS "FormBody100"
			, FormBody101 AS "FormBody101"
			, FormBody102 AS "FormBody102"
			, MailSenderName AS "MailSenderName"
			, MailSenderAddr AS "MailSenderAddr"
			, useYn090 AS "useYn090"
			, useYn091 AS "useYn091"
			, useYn092 AS "useYn092"
			, useYn021 AS "useYn021"
			, useYn022 AS "useYn022"
			, useYn100 AS "useYn100"
			, useYn101 AS "useYn101"
			, useYn102 AS "useYn102"
		FROM vm_config
		WHERE CompanyCode = #{CompanyCode}
	</select>

	<update id="updateVacationConfig" parameterType="cmap">
	/* groupware.vacation.updateVacationConfig */
	{	CALL
		DECLARE
		clobFormBody090 CLOB := #{formBody090};
		clobFormBody091 CLOB := #{formBody091};
		clobFormBody092 CLOB := #{formBody092};
		clobFormBody021 CLOB := #{formBody021};
		clobFormBody022 CLOB := #{formBody022};
		clobFormBody100 CLOB := #{formBody100};
		clobFormBody101 CLOB := #{formBody101};
		clobFormBody102 CLOB := #{formBody102};

		BEGIN

		MERGE INTO VM_CONFIG
			USING DUAL ON ( CompanyCode=#{CompanyCode} )
		WHEN MATCHED THEN
			UPDATE SET CreateMethod = #{createMethod},
			     	InitCnt = #{initCnt},
			     	IncTerm = #{incTerm},
			     	IncCnt = #{incCnt},
			     	MaxCnt = #{maxCnt},
					RemMethod = #{remMethod},
					YearRemMethod = #{yearRemMethod}, 
					IsRemRenewal = #{isRemRenewal},
					ReqInfoMethod = #{reqInfoMethod},
					IsAuto = #{isAuto},
					ModifierCode = #{urCode},
					ModifyDate = SYSDATE,
					FormTitle090 = #{formTitle090},
					FormTitle091 = #{formTitle091},
					FormTitle092 = #{formTitle092},
					FormTitle021 = #{formTitle021},
					FormTitle022 = #{formTitle022},
					FormTitle100 = #{formTitle100},
					FormTitle101 = #{formTitle101},
					FormTitle102 = #{formTitle102},
					FormBody090 = clobFormBody090,
					FormBody091 = clobFormBody091,
					FormBody092 = clobFormBody092,
					FormBody021 = clobFormBody021,
					FormBody022 = clobFormBody022,
					FormBody100 = clobFormBody100,
					FormBody101 = clobFormBody101,
					FormBody102 = clobFormBody102,
					MailSenderName = #{mailSenderName},
					MailSenderAddr = #{mailSenderAddr},
					useYn100 = #{useYn100},
					useYn101 = #{useYn101},
					useYn102 = #{useYn102},
					useYn090 = #{useYn090},
					useYn091 = #{useYn091},
					useYn092 = #{useYn092},
					useYn021 = #{useYn021},
					useYn022 = #{useYn022}
		WHEN NOT MATCHED THEN
			INSERT (
				CompanyCode, CreateMethod, InitCnt, IncTerm, IncCnt,
				MaxCnt, RemMethod, YearRemMethod, IsRemRenewal, ReqInfoMethod, IsAuto, ModifierCode,
				ModifyDate,
				FormTitle090, FormTitle091, FormTitle092, FormTitle021, FormTitle022, FormTitle100, FormTitle101, FormTitle102,
				FormBody090, FormBody091, FormBody092, FormBody021, FormBody022, FormBody100, FormBody101, FormBody102,
				MailSenderName, MailSenderAddr,
				useYn100, useYn101, useYn102, useYn090, useYn091, useYn092, useYn021, useYn022
			)
			VALUES (
				#{CompanyCode}, #{createMethod}, #{initCnt}, #{incTerm}, #{incCnt},
				#{maxCnt}, #{remMethod}, #{yearRemMethod}, #{isRemRenewal}, #{reqInfoMethod}, #{isAuto}, #{urCode},
				SYSDATE,
				#{formTitle090}, #{formTitle091}, #{formTitle092}, #{formTitle021}, #{formTitle022}, #{formTitle100}, #{formTitle101}, #{formTitle102},
				clobFormBody090, clobFormBody091, clobFormBody092, clobFormBody021, clobFormBody022, clobFormBody100, clobFormBody101, clobFormBody102,
				#{mailSenderName}, #{mailSenderAddr},
				#{useYn100}, #{useYn101}, #{useYn102}, #{useYn090}, #{useYn091}, #{useYn092}, #{useYn021}, #{useYn022}
			);

		commit;
		END
	}
	</update>

	<update id="updateResetVacationDays" statementType="CALLABLE" parameterType= "cmap" >
		{CALL SP_RESETVACATIONDAYS(#{createMethod},#{CompanyCode})}
	</update>

	<delete id="deleteVacationPlanHist" parameterType="cmap">
		/* groupware.vacation.deleteVacationPlanHist */
		delete from vm_plan_hist
		WHERE VacKind = 'PUBLIC'
		AND UR_Code in (
		SELECT A.UserCode
		FROM sys_object_user A
		LEFT JOIN (SELECT UserCode, CompanyName, CompanyCode, DeptCode, MultiDeptName
		FROM sys_object_user_basegroup
		WHERE JobType = 'Origin'
		) B ON A.UserCode = B.UserCode
		WHERE B.CompanyCode = #{CompanyCode}
		)
	</delete>

	<update id="updateVacationExpireDateRange" parameterType="cmap">
		/* groupware.vacation.updateVacationExpireDateRange */
		UPDATE vm_vacationplan
		SET
		<if test='createMethod != null and createMethod !=""'>
			<if test='createMethod == "F"'>
				UseStartDate = CONCAT(YEAR,'0101')
				,UseEndDate = CONCAT(YEAR,'1231')
			</if>
			<if test='createMethod == "J"'>
				UseStartDate = CONCAT(YEAR,TO_CHAR(TO_DATE(REPLACE((select EnterDate from sys_object_user where UserCode=UR_Code), '-', ''), 'YYYYMMDD'),'MMDD'))
				,UseEndDate = TO_CHAR(TO_DATE(CONCAT(YEAR,TO_CHAR(TO_DATE(REPLACE((select EnterDate from sys_object_user where UserCode=UR_Code), '-', ''), 'YYYYMMDD'),'MMDD')),'YYYYMMDD') + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY),'YYYYMMDD')
			</if>
		</if>
		WHERE VacKind = 'PUBLIC'
		AND UR_Code in (
			SELECT A.UserCode
			FROM sys_object_user A
			LEFT JOIN (SELECT UserCode, CompanyName, CompanyCode, DeptCode, MultiDeptName
			FROM sys_object_user_basegroup
			WHERE JobType = 'Origin'
			) B ON A.UserCode = B.UserCode
			WHERE A.IsUse = 'Y'
			AND A.IsDisplay = 'Y'
			AND A.IsHR = 'Y'
			AND B.CompanyCode = #{CompanyCode}
			AND EnterDate IS NOT NULL
			AND LENGTH(REPLACE(EnterDate,'-','')) = 8
			AND (RetireDate IS NULL OR RetireDate='')
		)
	</update>

	<!-- 월차 자동증가 전, 연차 생성안된 사용자 연차 생성 입사일기준 -->
	<insert id="insertNewAnnualVacationV2" parameterType="cmap">
		/* groupware.vacation.insertNewAnnualVacationV2 */
		INSERT INTO vm_vacationplan (UR_Code, DeptCode, DeptName, YEAR, VacDay, VacKind, UseStartDate, UseEndDate, RegistDate)
		SELECT U.UserCode, U.DeptCode, U.DeptName,U.YEAR, U.VacDay, U.VacKind, U.UseStartDate, U.UseEndDate, sysdate
		FROM (
			SELECT a.UserCode, b.DeptCode, b.MultiDeptName AS DeptName, TARGETYEAR AS YEAR, 0 AS VacDay, 'PUBLIC' AS VacKind
			, CONCAT(TARGETYEAR,TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')) AS UseStartDate
			, TO_CHAR(TO_DATE(CONCAT(TARGETYEAR,TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY),'YYYYMMDD') AS UseEndDate
			FROM (select UserCode, IsUse, IsHR, IsDisplay, EnterDate
				, CASE WHEN TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]> SYSDATE
					THEN EXTRACT(YEAR FROM SYSDATE)
					ELSE EXTRACT(YEAR FROM SYSDATE - (INTERVAL '1' YEAR))
				END AS TARGETYEAR
				from sys_object_user
				where IsUse = 'Y'
					and IsHR = 'Y'
					and IsDisplay = 'Y'
					and EnterDate IS NOT NULL
					and LENGTH(REPLACE(EnterDate, '-', '')) = 8
			) a
			INNER JOIN sys_object_user_basegroup b
			ON a.usercode = b.usercode AND b.JobType = 'Origin' and b.CompanyCode = #{domainCode}
		) U
		LEFT JOIN vm_vacationplan V
			ON U.UserCode = V.UR_Code
			AND V.VacKind = 'PUBLIC'
			AND V.UseStartDate <![CDATA[>=]]> U.UseStartDate
			AND V.UseEndDate <![CDATA[<=]]> U.UseEndDate
		where V.VacDay is null
	</insert>

	<select id="selectAutoIncreaseMonthlyVacationV2" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectAutoIncreaseMonthlyVacationV2 */
	<![CDATA[
		SELECT U.UserCode AS "UserCode"
			, U.DeptCode AS "DeptCode"
			, U.DeptName AS "DeptName"
			, U.YEAR AS "YEAR"
			, (NVL(V.VacDay,0)+1) as "VacDay"
			, U.VacKind AS "VacKind"
			, TO_CHAR(U.UseStartDate,'YYYYMMDD') AS "UseStartDate"
			, TO_CHAR(U.UseEndDate,'YYYYMMDD') AS "UseEndDate"
			, '[스케줄러] ' || SYSDATE || ' 월차1개 추가' as "VmComment"
		FROM (
	          SELECT a.UserCode, b.DeptCode, b.DeptName, TARGETYEAR AS YEAR, 0 AS VacDay, 'PUBLIC' AS VacKind
              , TO_DATE(CONCAT(TARGETYEAR,TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') AS UseStartDate
              , TO_DATE(TO_CHAR(TO_DATE(CONCAT(TARGETYEAR,TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY),'YYYYMMDD'),'YYYYMMDD') AS UseEndDate

	         FROM (select UserCode, IsUse, IsHR, IsDisplay, EnterDate
	                     , CASE WHEN TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') < SYSDATE THEN
                               EXTRACT(YEAR FROM SYSDATE)
                           ELSE
                               EXTRACT(YEAR FROM SYSDATE - (INTERVAL '1' YEAR)) END AS TARGETYEAR
	               from sys_object_user
	               where IsUse = 'Y'
	                 and EnterDate IS NOT NULL
	                 and LENGTH(REPLACE(EnterDate, '-', '')) = 8
	                 AND TO_DATE(REPLACE(EnterDate, '-', ''), 'YYYYMMDD') > ADD_MONTHS(SYSDATE, -12)
					 AND FLOOR(MONTHS_BETWEEN(  SYSDATE , TO_DATE(REPLACE(ENTERDATE,'-',''),'YYYYMMDD')))  > 0
					 AND (
						  TO_NUMBER(TO_CHAR(TO_DATE(REPLACE(EnterDate, '-', ''),'YYYYMMDD'),'DD'))= TO_NUMBER(TO_CHAR(SYSDATE,'DD'))

					   OR (TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDD')) = TO_NUMBER(TO_CHAR(LAST_DAY(SYSDATE),'YYYYMMDD'))
						   AND TO_NUMBER(EXTRACT(DAY FROM TO_DATE(REPLACE(EnterDate, '-', '')))) > TO_NUMBER(EXTRACT(DAY FROM LAST_DAY(SYSDATE)))
						   )
					 )
	              ) a
	                  INNER JOIN sys_object_user_basegroup b
	                             ON a.usercode = b.usercode AND b.JobType = 'Origin' and b.CompanyCode = #{domainCode}
	     ) U
	         LEFT JOIN vm_vacationplan V
	                   ON U.UserCode = V.UR_Code
                       AND V.VacKind = 'PUBLIC'
                       AND TO_DATE(V.UseStartDate,'YYYYMMDD') >= U.UseStartDate
                       AND TO_DATE(V.UseEndDate,'YYYYMMDD') <= U.UseEndDate
	]]>
	</select>

	<update id="updateAutoIncreaseMonthlyVacationV2" parameterType="cmap">
	/* groupware.vacation.updateAutoIncreaseMonthlyVacationV2 */
	<![CDATA[
		UPDATE vm_vacationplan
		SET VacDay = #{vacDay}
		, LongVacDay = #{vacDay}-LastVacDay
		WHERE UR_Code = #{urCode}
		AND  VacKind = #{vacKind}
		AND  UseStartDate = #{useStartDate}
		AND  UseEndDate = #{useEndDate}
	]]>
	</update>

	<select id="selectAutoCreateAnnualVacationV2" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectAutoCreateAnnualVacationV2 */
		<![CDATA[
  		SELECT
			YEAR
			, UR_Code AS "UR_Code"
			, 'PUBLIC' AS "VacKind"
			, UseStartDate AS "UseStartDate"
			, UseEndDate AS "UseEndDate"
			, DeptCode AS "DeptCode"
			, DeptName AS "DeptName"
			, CASE WHEN LongVacDay > #{MaxCnt} THEN
					  #{MaxCnt}
				  ELSE
					  LongVacDay
			   END AS "LongVacDay"
			 , fn_GetLastVacDay(UR_Code, EXTRACT(YEAR FROM SYSDATE), #{domainCode}) AS "LastVacDay"
			 , NULL AS "RewardVacDay"
			 , 'system' AS "RegisterCode"
			 , SYSDATE AS "RegistDate"
		FROM (
				 SELECT EXTRACT(YEAR FROM SYSDATE) AS YEAR,
						A.usercode  AS UR_Code,
						TO_CHAR(SYSDATE, 'YYYYMMDD') AS UseStartDate,
						TO_CHAR(SYSDATE + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY), 'YYYYMMDD') AS UseEndDate,
						B.DeptCode AS DeptCode,
						B.MultiDeptName                                                                   AS DeptName,
						a.EnterDate,
                		(#{InitCnt} + FLOOR(((TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')) - TO_NUMBER(SUBSTR(ENTERDATE,1,4)) - 1) / #{IncTerm}))) * #{IncCnt}  AS LongVacDay
				 FROM sys_object_user A
						  LEFT JOIN (SELECT UserCode, CompanyName, CompanyCode, DeptCode, MultiDeptName
									 FROM sys_object_user_basegroup
									 WHERE JobType = 'Origin'
				 ) B ON A.UserCode = B.UserCode
				 WHERE A.IsUse = 'Y'
				   AND A.IsDisplay = 'Y'
				   AND A.IsHR = 'Y'
				   AND B.CompanyCode = #{domainCode}
				   AND EnterDate IS NOT NULL
				   AND LENGTH(REPLACE(EnterDate,'-','')) = 8
				   AND (RetireDate IS NULL  OR TRIM(RetireDate) = '')
				   AND EXTRACT(MONTH FROM TO_DATE(REPLACE(EnterDate, '-', ''), 'YYYYMMDD')) = EXTRACT(MONTH FROM SYSDATE)
				   AND (EXTRACT(DAY FROM TO_DATE(REPLACE(EnterDate, '-', ''), 'YYYYMMDD')) = EXTRACT(DAY FROM SYSDATE)
					 OR (TO_CHAR(SYSDATE, 'YYYY-MM-DD') = LAST_DAY(SYSDATE)
						 AND EXTRACT(DAY FROM TO_DATE(EnterDate)) > EXTRACT(DAY FROM LAST_DAY(SYSDATE)))
					 )
			 ) TBL
		]]>
	</select>

	<update id="insertAutoCreateAnnualVacationV2" parameterType="cmap">
	/* groupware.vacation.insertAutoCreateAnnualVacationV2 */
		MERGE INTO vm_vacationplan
			USING DUAL ON (VacKind = #{vacKind} AND UR_Code = #{urCode} AND YEAR = #{year} )
		WHEN MATCHED THEN
			UPDATE SET LongVacDay = #{longVacDay},
	      		 LastVacDay = #{lastVacDay},
	      		 VacDay = #{longVacDay}+#{lastVacDay},
	      		 UseStartDate = #{useStartDate},
	      		 UseEndDate = #{useEndDate},
	      		 VmComment = #{comment}
		WHEN NOT MATCHED THEN
			INSERT
				(YEAR, UR_Code, VacKind, UseStartDate, UseEndDate, DeptCode, DeptName, LongVacDay, LastVacDay, VacDay, VmComment, RewardVacDay, RegisterCode, RegistDate)
			VALUES
				(#{year}, #{urCode}, #{vacKind}, #{useStartDate}, #{useEndDate}, #{deptCode}, #{deptName}, #{longVacDay}, #{lastVacDay}, #{longVacDay}+#{lastVacDay}, #{comment}, NULL, 'system', SYSDATE)
	</update>

	<select id="selectVacationPromotionTargetList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationPromotionTargetList */
	<![CDATA[
		SELECT UserCode AS "UserCode"
		, MailAddress AS "MailAddress"
        , DisplayName AS "DisplayName"
        , EnterDate AS "EnterDate"
        , ReqType AS "ReqType"
        , RetireDate AS "RetireDate"
        , CreateMethod AS "CreateMethod"
        , IsOneYear AS "IsOneYear"
        , VacDate AS "VacDate"
        , OneDate AS "OneDate"
        , TwoDate AS "TwoDate"
        , LessVacDate AS "LessVacDate"
        , LessOneDate9 AS "LessOneDate9"
        , LessTwoDate9 AS "LessTwoDate9"
        , LessOneDate2 AS "LessOneDate2"
        , LessTwoDate2 AS "LessTwoDate2"
        , useYn100 AS "useYn100"
        , useYn101 AS "useYn101"
        , useYn102 AS "useYn102"
        , useYn090 AS "useYn090"
        , useYn091 AS "useYn091"
        , useYn092 AS "useYn092"
        , useYn021 AS "useYn021"
        , useYn022 AS "useYn022"
        , SortKey AS "SortKey"
        , JobPositionSortKey AS "JobPositionSortKey"
	FROM (
         SELECT UserCode
              , MailAddress
              , DisplayName
              , EnterDate
              , CASE
                    WHEN IsOneYear = 0 AND TO_CHAR(LessVacDate, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
                         useYn090 = 'Y' THEN
                        '090'
                    WHEN IsOneYear = 0 AND TO_CHAR(LessOneDate9, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
                         useYn091 = 'Y' THEN
                        '091'
                    WHEN IsOneYear = 0 AND TO_CHAR(LessTwoDate9, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
                         useYn092 = 'Y' THEN
                        '092'
                    WHEN IsOneYear = 0 AND TO_CHAR(LessOneDate2, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
                         useYn021 = 'Y' THEN
                        '021'
                    WHEN IsOneYear = 0 AND TO_CHAR(LessTwoDate2, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
                         useYn022 = 'Y' THEN
                        '022'
                    WHEN IsOneYear = 1 AND TO_CHAR(VacDate, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
                         useYn100 = 'Y' THEN
                        '100'
                    WHEN IsOneYear = 1 AND TO_CHAR(OneDate, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
                         useYn101 = 'Y' THEN
                        '101'
                    WHEN IsOneYear = 1 AND TO_CHAR(TwoDate, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') AND
                         useYn102 = 'Y' THEN
                        '102'
             END AS ReqType
              , RetireDate
              , CreateMethod
              , IsOneYear
              , VacDate
              , OneDate
              , TwoDate
              , LessVacDate
              , LessOneDate9
              , LessTwoDate9
              , LessOneDate2
              , LessTwoDate2
              , useYn100
              , useYn101
              , useYn102
              , useYn090
              , useYn091
              , useYn092
              , useYn021
              , useYn022
              , SortKey
              , JobPositionSortKey
         FROM (
			  SELECT A.UserCode
				   , A.MailAddress
				   , Fn_BaseGetDictionary_S('', A.MultiDisplayName) AS DisplayName
				   , A.EnterDate
				   , A.RetireDate
				   , A.SortKey
				   , B.DeptCode
				   , B.JobPositionSortKey
				   , B.JobTitleCode
				   , B.CompanyCode
				   , V.CreateMethod
				   , V.useYn100
				   , V.useYn101
				   , V.useYn102
				   , V.useYn090
				   , V.useYn091
				   , V.useYn092
				   , V.useYn021
				   , V.useYn022
				   , IsOneYear
					,(CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code1'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code1'
							 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code1'
							 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
							  ,#{domainCode}),'YYYY-MM-DD')
						  END) AS VacDate
					  ,(
						CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code2'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code2'
							 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code2'
							 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 END
					 ) AS OneDate
					  ,(
						 CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code3'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code3'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code3'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
					 ) AS TwoDate
					 ,(
						 CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code4'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code4'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code4'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
					 ) AS LessVacDate
					  ,(
						 CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code5'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code5'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code5'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
					 ) AS LessOneDate9
					  ,(
						 CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code6'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code6'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code6'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
					 ) AS LessTwoDate9
					  ,(
					 	CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code7'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code7'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code7'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
					 ) AS LessOneDate2
					  ,(
					 	CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code8'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code8'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code8'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
					 ) AS LessTwoDate2
					FROM (select UserCode,
							  MultiDisplayName,
							  MailAddress,
							  TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE), '0101'), 'YYYYMMDD') AS Tyear,
							  TO_DATE(REPLACE(EnterDate, '-', ''), 'YYYYMMDD') AS EnterDate,
							  RetireDate,
							  SortKey,
							  (CASE WHEN TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD') + (INTERVAL '12' MONTH), 'YYYYMMDD') <= TO_CHAR(SYSDATE, 'YYYYMMDD')	-- 입사 1년 이상
										  THEN 1
									  ELSE 0
									  END
							  ) as IsOneYear
					  from (select *
						  from sys_object_user
						  where (RetireDate = '' OR RetireDate IS NULL)
							AND (EnterDate <> '' OR EnterDate IS NOT NULL)
							AND IsDisplay = 'Y'
							AND IsHR = 'Y'
						) U
				    ) A
				    LEFT JOIN sys_object_user_basegroup B
								 ON A.UserCode = B.UserCode AND B.JobType = 'Origin' AND
									B.DeptCode NOT LIKE '%RetireDept'
					LEFT JOIN vm_config V ON V.CompanyCode = B.CompanyCode
					WHERE B.CompanyCode = #{domainCode}
			  ) T
              ,(select SettingValue
                from sys_base_config SBC
                WHERE  SBC.DomainID = (select DomainID from sys_object_domain SOD where SOD.DomainCode = #{domainCode})
                AND SettingKey = 'FacilitatingTarget'
              ) SBC WHERE INSTR(SBC.SettingValue, T.JobTitleCode) > 0
	 ) TBL
	WHERE TBL.ReqType is not null
	]]>
	</select>

	<select id="selectVacationPromotionTargetUserInfo" parameterType="cmap" resultType="cmap">
		/* groupware.vacation.selectVacationPromotionTargetUserInfo */
		<![CDATA[
		SELECT UserCode AS "UserCode"
			 , DisplayName AS "UR_Name"
			 , JobPositionName AS "JobPositionName"
			 , EnterDate AS "EnterDate"
			 , RetireDate AS "RetireDate"
			 , CreateMethod AS "CreateMethod"
			 , JobPositionSortKey AS "JobPositionSortKey"
			 , Tyear AS TYEAR
			 , EXTRACT(YEAR FROM SYSDATE) AS YYYY
			 , IsOneYear AS "IsOneYear"
			 , VacDate AS "VacDateFrom"
			 , fn_attend_getPromotionDateRage('T','Code1',VacDate, #{domainCode}) AS "VacDateTo"
			 , OneDate AS "OneDateFrom"
			 , fn_attend_getPromotionDateRage('T','Code2',OneDate, #{domainCode}) AS "OneDateTo"
			 , TO_CHAR(OneDate,'YYYY-MM-DD') || ' ~ ' || fn_attend_getPromotionDateRage('T','Code2',OneDate, #{domainCode}) AS "OneDateRange"
			 , TwoDate AS "TwoDateFrom"
			 , fn_attend_getPromotionDateRage('T','Code3',TwoDate, #{domainCode}) AS "TwoDateTo"
			 , TO_CHAR(TwoDate,'YYYY-MM-DD') || ' ~ ' || fn_attend_getPromotionDateRage('T','Code3',OneDate, #{domainCode}) AS "TwoDateRange"
			 , LessVacDate AS "LessVacDateFrom"
			 , fn_attend_getPromotionDateRage('T','Code4',LessVacDate, #{domainCode}) AS "LessVacDateTo"
			 , LessOneDate9 AS "LessOneDate9From"
			 , fn_attend_getPromotionDateRage('T','Code5',LessOneDate9, #{domainCode}) AS "LessOneDate9To"
			 , TO_CHAR(LessOneDate9,'YYYY-MM-DD') || ' ~ ' || fn_attend_getPromotionDateRage('T','Code5',LessOneDate9, #{domainCode}) AS "LessOneDate9Range"
			 , LessTwoDate9 AS "LessTwoDate9From"
			 , fn_attend_getPromotionDateRage('T','Code6',LessTwoDate9, #{domainCode}) AS "LessTwoDate9To"
			 , TO_CHAR(LessTwoDate9,'YYYY-MM-DD') || ' ~ ' || fn_attend_getPromotionDateRage('T','Code6',LessTwoDate9, #{domainCode}) AS "LessTwoDate9Range"
			 , LessOneDate2 AS "LessOneDate2From"
			 , fn_attend_getPromotionDateRage('T','Code7',LessOneDate2, #{domainCode}) AS "LessOneDate2To"
			 , TO_CHAR(LessOneDate2,'YYYY-MM-DD') || ' ~ ' || fn_attend_getPromotionDateRage('T','Code7',LessOneDate2, #{domainCode}) AS "LessOneDate2Range"
			 , LessTwoDate2 AS "LessTwoDate2From"
			 , fn_attend_getPromotionDateRage('T','Code8',LessTwoDate2, #{domainCode}) AS "LessTwoDate2To"
			 , TO_CHAR(LessTwoDate2,'YYYY-MM-DD') || ' ~ ' || fn_attend_getPromotionDateRage('T','Code8',LessTwoDate2, #{domainCode}) AS "LessTwoDate2Range"
		FROM (
				 SELECT A.UserCode, A.MailAddress
						, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
						, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
						, A.EnterDate
						, A.RetireDate
						, A.SortKey
						, B.DeptCode
						, B.JobPositionSortKey
						, V.CreateMethod
						, Tyear
						, IsOneYear
						,(
						CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code1'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code1'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code1'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
						) AS VacDate
						,(
						CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code2'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code2'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								  ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code2'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								  ,#{domainCode}),'YYYY-MM-DD')
						 END
						) AS OneDate
						,(
						CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code3'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code3'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								  ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code3'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								  ,#{domainCode}),'YYYY-MM-DD')
						 END
						) AS TwoDate
						,(
						CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code4'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code4'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code4'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
						) AS LessVacDate
						,(
						CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code5'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code5'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code5'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
						) AS LessOneDate9
						,(
						CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code6'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code6'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code6'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
						) AS LessTwoDate9
						,(
						CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code7'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code7'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code7'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
						) AS LessOneDate2
						,(
						CASE WHEN IsOneYear = 0 THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code8'
							 ,ADD_MONTHS(EnterDate, 12)
							 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'J' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code8'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(EnterDate,'MMDD')),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 WHEN V.CreateMethod = 'F' THEN
							 TO_DATE(fn_attend_getPromotionDateRage('F','Code8'
								 ,ADD_MONTHS(TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'), 12)
								 ,#{domainCode}),'YYYY-MM-DD')
						 END
						) AS LessTwoDate2
				  FROM (SELECT UserCode
							, MultiDisplayName
							, MailAddress
							, CASE WHEN TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') < TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(SYSDATE,'MMDD')),'YYYYMMDD')
							THEN
								EXTRACT(YEAR FROM TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD'))
							ELSE
								EXTRACT(YEAR FROM TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),'0101'),'YYYYMMDD') - (INTERVAL '1' DAY)) END AS   Tyear
							, TO_DATE(REPLACE(EnterDate, '-', ''), 'YYYYMMDD') AS EnterDate
							, RetireDate
							, SortKey
							, CASE WHEN TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD') + (INTERVAL '12' MONTH), 'YYYYMMDD') <= TO_CHAR(SYSDATE, 'YYYYMMDD')	-- 입사 1년 이상
							THEN 1
							ELSE 0
							END as IsOneYear
						FROM sys_object_user) A
						LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND B.JobType = 'Origin'
						LEFT JOIN vm_config V ON V.CompanyCode = B.CompanyCode
				 WHERE B.CompanyCode = #{domainCode}
			 ) A
		WHERE 1=1
			AND A.RetireDate IS NULL
			AND A.DeptCode NOT LIKE	'%RetireDept'
			AND A.EnterDate IS NOT NULL

			AND A.UserCode = #{urCode}
		]]>
	</select>

	<select id="selectVacationFacilitatingDateCnt" resultType="java.lang.Long">
	/* groupware.vacation.selectVacationFacilitatingDateCnt */
		SELECT COUNT(UserCode) FROM (
			SELECT UserCode, RetireDate, DisplayName, DeptName, DeptCode
				, JobTitleCode, EnterDate, CreateMethod, IsOneYear
				, VacDate
				, fn_attend_getPromotionDateRage('T','Code1',VacDate, #{domainCode}) AS VacDateUntil
				, OneDate
				, fn_attend_getPromotionDateRage('T','Code2',OneDate, #{domainCode}) AS OneDateUntil
				, TwoDate
				, fn_attend_getPromotionDateRage('T','Code3',TwoDate, #{domainCode}) AS TwoDateUntil
				, LessVacDate
				, fn_attend_getPromotionDateRage('T','Code4',LessVacDate, #{domainCode}) AS LessVacDateUntil
				, LessOneDate9
				, fn_attend_getPromotionDateRage('T','Code5',LessOneDate9, #{domainCode}) AS LessOneDate9Until
				, LessTwoDate9
				, fn_attend_getPromotionDateRage('T','Code6',LessTwoDate9, #{domainCode}) AS LessTwoDate9Until
				, LessOneDate2
				, fn_attend_getPromotionDateRage('T','Code7',LessOneDate2, #{domainCode}) AS LessOneDate2Until
				, LessTwoDate2
				, fn_attend_getPromotionDateRage('T','Code8',LessTwoDate2, #{domainCode}) AS LessTwoDate2Until
			FROM (
				SELECT A.UserCode
					, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
					, Fn_BaseGetDictionary_S(#{lang},NVL(B.DeptName, B.MultiDeptName)) AS DeptName
					, A.EnterDate
					, A.RetireDate
					, B.DeptCode
					, B.JobTitleCode
					, V.CreateMethod
					, IsOneYear
					,(CASE WHEN IsOneYear = 0 THEN
						fn_attend_getPromotionDateRage('F','Code1'
						,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
						,#{domainCode})
					WHEN V.CreateMethod = 'J' THEN
						fn_attend_getPromotionDateRage('F','Code1'
						,TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(EnterDate, 'YYYYMMDD'),'MMDD')),'YYYYMMDD')
						,#{domainCode})
					WHEN V.CreateMethod = 'F' THEN
						fn_attend_getPromotionDateRage('F','Code1'
						,TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')
						,#{domainCode})
					END) AS VacDate
					,(CASE WHEN IsOneYear = 0 THEN
						fn_attend_getPromotionDateRage('F','Code2'
						,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
						,#{domainCode})
					WHEN V.CreateMethod = 'J' THEN
						fn_attend_getPromotionDateRage('F','Code2'
						,TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(EnterDate, 'YYYYMMDD'),'MMDD')),'YYYYMMDD')
						,#{domainCode})
					WHEN V.CreateMethod = 'F' THEN
						fn_attend_getPromotionDateRage('F','Code2'
						,TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')
						,#{domainCode})
					END) AS OneDate
					,(CASE WHEN IsOneYear = 0 THEN
						fn_attend_getPromotionDateRage('F','Code3'
						,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
						,#{domainCode})
					WHEN V.CreateMethod = 'J' THEN
						fn_attend_getPromotionDateRage('F','Code3'
						,TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(EnterDate, 'YYYYMMDD'),'MMDD')),'YYYYMMDD')
						,#{domainCode})
					WHEN V.CreateMethod = 'F' THEN
						fn_attend_getPromotionDateRage('F','Code3'
						,TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')
						,#{domainCode})
					END) AS TwoDate
					,(CASE WHEN IsOneYear = 0 THEN
						fn_attend_getPromotionDateRage('F','Code4'
						,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
						,#{domainCode})
					WHEN V.CreateMethod = 'J' THEN
						fn_attend_getPromotionDateRage('F','Code4'
						,TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(EnterDate, 'YYYYMMDD'),'MMDD')),'YYYYMMDD')
						,#{domainCode})
					WHEN V.CreateMethod = 'F' THEN
						fn_attend_getPromotionDateRage('F','Code4'
						,TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')
						,#{domainCode})
					END) AS LessVacDate
					,(CASE WHEN IsOneYear = 0 THEN
						fn_attend_getPromotionDateRage('F','Code5'
						,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
						,#{domainCode})
					WHEN V.CreateMethod = 'J' THEN
						fn_attend_getPromotionDateRage('F','Code5'
						,TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(EnterDate, 'YYYYMMDD'),'MMDD')),'YYYYMMDD')
						,#{domainCode})
					WHEN V.CreateMethod = 'F' THEN
						fn_attend_getPromotionDateRage('F','Code5'
						,TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')
						,#{domainCode})
					END) AS LessOneDate9
					,(CASE WHEN IsOneYear = 0 THEN
						fn_attend_getPromotionDateRage('F','Code6'
						,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
						,#{domainCode})
					WHEN V.CreateMethod = 'J' THEN
						fn_attend_getPromotionDateRage('F','Code6'
						,TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(EnterDate, 'YYYYMMDD'),'MMDD')),'YYYYMMDD')
						,#{domainCode})
					WHEN V.CreateMethod = 'F' THEN
						fn_attend_getPromotionDateRage('F','Code6'
						,TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')
						,#{domainCode})
					END) AS LessTwoDate9
					,(CASE WHEN IsOneYear = 0 THEN
						fn_attend_getPromotionDateRage('F','Code7'
						,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
						,#{domainCode})
					WHEN V.CreateMethod = 'J' THEN
						fn_attend_getPromotionDateRage('F','Code7'
						,TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(EnterDate, 'YYYYMMDD'),'MMDD')),'YYYYMMDD')
						,#{domainCode})
					WHEN CreateMethod = 'F' THEN
						fn_attend_getPromotionDateRage('F','Code7'
						,TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')
						,#{domainCode})
					END) AS LessOneDate2
					,(CASE WHEN IsOneYear = 0 THEN
						fn_attend_getPromotionDateRage('F','Code8'
						,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
						,#{domainCode})
					WHEN V.CreateMethod = 'J' THEN
						fn_attend_getPromotionDateRage('F','Code8'
						,TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(EnterDate, 'YYYYMMDD'),'MMDD')),'YYYYMMDD')
						,#{domainCode})
					WHEN V.CreateMethod = 'F' THEN
						fn_attend_getPromotionDateRage('F','Code8'
						,TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD')
						,#{domainCode})
					END) AS LessTwoDate2
				FROM (select UserCode, REPLACE(EnterDate,'-','') AS EnterDate, MultiDisplayName, RetireDate, SortKey
					, (CASE WHEN TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD') + (INTERVAL '12' MONTH), 'YYYYMMDD') <![CDATA[<=]]> TO_CHAR(SYSDATE, 'YYYYMMDD')	-- 입사 1년 이상
						  AND EXTRACT(YEAR FROM TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD') + (INTERVAL '12' MONTH)) <![CDATA[<]]> #{year}
						THEN 1
						ELSE 0 END
					) as IsOneYear
					from sys_object_user
					where IsDisplay = 'Y'
					and IsHR = 'Y'
					and (RetireDate is null or RetireDate = '')
					and (EnterDate is not null and LENGTH(EnterDate) > 0)
				)  A
				LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin' AND B.CompanyCode = #{domainCode}
				LEFT JOIN vm_config V ON V.CompanyCode = B.CompanyCode

			) A
			,(select SettingValue
				from sys_base_config SBC
				WHERE  SBC.DomainID = (select DomainID from sys_object_domain SOD where SOD.DomainCode = #{domainCode})
				AND SettingKey = 'FacilitatingTarget'
			) SBC
			WHERE ((LENGTH2(SBC.SettingValue) > 0 AND INSTR('_'||SBC.SettingValue, NVL(A.JobTitleCode,' ')) > 0)
				OR LENGTH2(SBC.SettingValue) = 0)
		) TBL
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			AND RetireDate IS NULL
			AND DeptCode NOT LIKE	'%RetireDept'
			AND EnterDate IS NOT NULL
			AND SUBSTR(EnterDate,1,4) <![CDATA[<=]]> #{year}
			<if test='tabType != null and tabType !=""'>
				<choose>
					<when test='tabType.equalsIgnoreCase("1") or tabType.equalsIgnoreCase("4")'>
						AND IsOneYear = 1
					</when>
					<otherwise>
						AND IsOneYear = 0
					</otherwise>
				</choose>
			</if>
			<if test='urCode != null and urCode !=""'>
				AND UserCode = #{urCode}
			</if>
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "deptName"'>
						AND DeptName LIKE '%' || #{schTxt} || '%'
					</when>
					<otherwise>
						AND DisplayName LIKE '%' || #{schTxt} || '%'
					</otherwise>
				</choose>
			</if>

			<if test='startDate != null and startDate != "" and endDate != null and endDate != "" '>
				<choose>
					<when test='tabType.equalsIgnoreCase("2")'>
						<if test='schDateType.equalsIgnoreCase("0")'>
							AND (
							TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("1")'>
							AND (
							TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("2")'>
							AND (
							TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD')
							)
						</if>
					</when>
					<when test='tabType.equalsIgnoreCase("3")'>
						<if test='schDateType.equalsIgnoreCase("0")'>
							AND (
							TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("1")'>
							AND (
							TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("2")'>
							AND (
							TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD')
							)
						</if>
					</when>
					<when test='tabType.equalsIgnoreCase("4")'>
						<if test='schDateType.equalsIgnoreCase("1")'>
							AND (
							TO_DATE(REPLACE(VacDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(VacDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(VacDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(VacDateUntil,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(VacDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(VacDateUntil,'-',''), 'YYYYMMDD')
							)
						</if>
					</when>
					<when test='tabType.equalsIgnoreCase("5")'>
						<if test='schDateType.equalsIgnoreCase("1")'>
							AND (
							TO_DATE(REPLACE(LessVacDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessVacDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessVacDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessVacDateUntil,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessVacDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessVacDateUntil,'-',''), 'YYYYMMDD')
							)
						</if>
					</when>
					<otherwise>
						<if test='schDateType.equalsIgnoreCase("0")'>
							AND (
							TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("1")'>
							AND (
							TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("2")'>
							AND (
							TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD')
							)
						</if>
					</otherwise>
				</choose>
			</if>

			<if test='dayType != null and dayType != "" and daysValue != null and daysValue != "" '>
				<choose>
					<when test='tabType.equalsIgnoreCase("1")'>
						<choose>
							<when test='dayType.equalsIgnoreCase("D")'>
								AND TO_DATE(TwoDate) BETWEEN SYSDATE AND (SYSDATE + #{daysValue})
							</when>
							<when test='dayType.equalsIgnoreCase("M")'>
								AND TO_DATE(TwoDate) BETWEEN SYSDATE AND ADD_MONTHS(SYSDATE, #{daysValue})
							</when>
						</choose>
					</when>
					<when test='tabType.equalsIgnoreCase("2")'>
						<choose>
							<when test='dayType.equalsIgnoreCase("D")'>
								AND TO_DATE(LessTwoDate9) BETWEEN SYSDATE AND (SYSDATE + #{daysValue})
							</when>
							<when test='dayType.equalsIgnoreCase("M")'>
								AND TO_DATE(LessTwoDate9) BETWEEN SYSDATE AND ADD_MONTHS(SYSDATE, #{daysValue})
							</when>
						</choose>
					</when>
					<when test='tabType.equalsIgnoreCase("3")'>
						<choose>
							<when test='dayType.equalsIgnoreCase("D")'>
								AND TO_DATE(LessTwoDate2) BETWEEN SYSDATE AND (SYSDATE + #{daysValue})
							</when>
							<when test='dayType.equalsIgnoreCase("M")'>
								AND TO_DATE(LessTwoDate2) BETWEEN SYSDATE AND ADD_MONTHS(SYSDATE, #{daysValue})
							</when>
						</choose>
					</when>
					<when test='tabType.equalsIgnoreCase("4")'>
						<choose>
							<when test='dayType.equalsIgnoreCase("D")'>
								AND TO_DATE(VacDate) BETWEEN SYSDATE AND (SYSDATE + #{daysValue})
							</when>
							<when test='dayType.equalsIgnoreCase("M")'>
								AND TO_DATE(VacDate) BETWEEN SYSDATE AND ADD_MONTHS(SYSDATE, #{daysValue})
							</when>
						</choose>
					</when>
					<when test='tabType.equalsIgnoreCase("5")'>
						<choose>
							<when test='dayType.equalsIgnoreCase("D")'>
								AND TO_DATE(LessVacDate) BETWEEN SYSDATE AND (SYSDATE + #{daysValue})
							</when>
							<when test='dayType.equalsIgnoreCase("M")'>
								AND TO_DATE(LessVacDate) BETWEEN SYSDATE AND ADD_MONTHS(SYSDATE, #{daysValue})
							</when>
						</choose>
					</when>
				</choose>
			</if>

			<if test='tabType != null and tabType != "" '>
				<choose>
					<when test='tabType.equalsIgnoreCase("2")'>
						AND EXTRACT(YEAR FROM TO_DATE(LessOneDate9)) = #{year}
						AND
						(
						(TO_DATE(LessOneDate9) <![CDATA[>=]]> TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD')
						AND TO_DATE(LessOneDate9) <![CDATA[<=]]> ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12) - 1
						)
						OR
						(TO_DATE(LessTwoDate9) <![CDATA[>=]]> TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD')
						AND TO_DATE(LessTwoDate9) <![CDATA[<=]]> ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12) - 1
						)
						)
					</when>
					<when test='tabType.equalsIgnoreCase("3")'>
						AND EXTRACT(YEAR FROM TO_DATE(LessOneDate2)) = #{year}
						AND
						(
						(TO_DATE(LessOneDate2) <![CDATA[>=]]> TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD')
						AND TO_DATE(LessOneDate2) <![CDATA[<=]]> ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12) - 1
						)
						OR
						(TO_DATE(LessTwoDate2) <![CDATA[>=]]> TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD')
						AND TO_DATE(LessTwoDate2) <![CDATA[<=]]> ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12) - 1
						)
						)
					</when>
					<when test='tabType.equalsIgnoreCase("5")'>
						AND EXTRACT(YEAR FROM TO_DATE(LessVacDate)) = #{year}
						AND (TO_DATE(LessVacDate) <![CDATA[>=]]> TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD')
						AND TO_DATE(LessVacDate) <![CDATA[<=]]> ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12) - 1
						)
					</when>
				</choose>
			</if>
		</trim>
	</select>

	<select id="selectVacationFacilitatingDateList" parameterType="cmap" resultType="cmap">
	/* groupware.vacation.selectVacationFacilitatingDateList */
	<include refid="oracle.include.pagingHeader"/>
		SELECT UserCode AS "UserCode"
			, DeptName AS "DeptName"
			, DisplayName AS "DisplayName"
			, JobPositionName AS "JobPositionName"
			, JobPositionSortKey AS "JobPositionSortKey"
			, JobLevelSortKey AS "JobLevelSortKey"
			, JobTitleSortKey AS "JobTitleSortKey"
			, SortKey AS "SortKey"
			, MailAddress AS "MailAddress"
			, DeptCode AS "DeptCode"
			, EnterDate AS "EnterDate"
			, RetireDate AS "RetireDate"
			, CreateMethod AS "CreateMethod"
			, TargetYear AS "TargetYear"
			, IsOneYear AS "IsOneYear"
			, VacDate AS "VacDate"
			, VacDateUntil AS "VacDateUntil"
			, OneDate AS "OneDate"
			, OneDateUntil AS "OneDateUntil"
			, TwoDate AS "TwoDate"
			, TwoDateUntil AS "TwoDateUntil"
			, LessVacDate AS "LessVacDate"
			, LessVacDateUntil AS "LessVacDateUntil"
			, LessOneDate9 AS "LessOneDate9"
			, LessOneDate9Until AS "LessOneDate9Until"
			, LessTwoDate9 AS "LessTwoDate9"
			, LessTwoDate9Until AS "LessTwoDate9Until"
			, LessOneDate2 AS "LessOneDate2"
			, LessOneDate2Until AS "LessOneDate2Until"
			, LessTwoDate2 AS "LessTwoDate2"
			, LessTwoDate2Until AS "LessTwoDate2Until"
			, Read10 AS "Read10"
			, Read11 AS "Read11"
			, Read12 AS "Read12"
			, Read13 AS "Read13"
			, Read14 AS "Read14"
			, Read18 AS "Read18"
			, Read19 AS "Read19"
			, Read20 AS "Read20"
			, VACPLAN AS "VACPLAN"
			, VACPLAN1 AS "VACPLAN1"
			, VACPLAN2 AS "VACPLAN2"
			, NEXT_VACPLAN AS "NEXT_VACPLAN"
		FROM (
			SELECT UserCode
				, DeptName
				, DisplayName
				, JobPositionName
				, JobPositionSortKey
				, JobLevelSortKey
				, JobTitleSortKey
				, SortKey
				, MailAddress
				, DeptCode
				, JobTitleCode
				, TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'),'YYYY-MM-DD') AS EnterDate
				, RetireDate
				, CreateMethod
				, TargetYear
				, IsOneYear
				, VacDate
				, fn_attend_getPromotionDateRage('T','Code1',VacDate, #{domainCode}) AS VacDateUntil
				, OneDate
				, fn_attend_getPromotionDateRage('T','Code2',OneDate, #{domainCode}) AS OneDateUntil
				, TwoDate
				, fn_attend_getPromotionDateRage('T','Code3',TwoDate, #{domainCode}) AS TwoDateUntil
				, LessVacDate
				, fn_attend_getPromotionDateRage('T','Code4',LessVacDate, #{domainCode}) AS LessVacDateUntil
				, LessOneDate9
				, fn_attend_getPromotionDateRage('T','Code5',LessOneDate9, #{domainCode}) AS LessOneDate9Until
				, LessTwoDate9
				, fn_attend_getPromotionDateRage('T','Code6',LessTwoDate9, #{domainCode}) AS LessTwoDate9Until
				, LessOneDate2
				, fn_attend_getPromotionDateRage('T','Code7',LessOneDate2, #{domainCode}) AS LessOneDate2Until
				, LessTwoDate2
				, fn_attend_getPromotionDateRage('T','Code8',LessTwoDate2, #{domainCode}) AS LessTwoDate2Until
				, B.Read10
				, B.Read11
				, B.Read12
				, B.Read13
				, B.Read14
				, B.Read18
				, B.Read19
				, B.Read20
				, NVL(SUBSTR(P.VACPLAN, 1, dbms_lob.getlength(P.VACPLAN)), '') AS VACPLAN
				, INSTR(P.VACPLAN, 'notification1') AS VACPLAN1
				, INSTR(P.VACPLAN, 'notification2') AS VACPLAN2
				, INSTR(P.VACPLAN, 'plan') AS VACPLAN3
				, P2.VACPLAN AS NEXT_VACPLAN
			FROM (
				SELECT A.UserCode
					, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
					, A.EnterDate
					, A.RetireDate
					, A.SortKey
					, A.MailAddress
					, B.DeptCode
					, B.JobTitleCode
					, Fn_BaseGetDictionary_S(#{lang},NVL(B.DeptName, B.MultiDeptName)) AS DeptName
					, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
					, JobPositionSortKey
					, JobLevelSortKey
					, JobTitleSortKey
					, V.CreateMethod
						<choose>
							<when test='tabType != null and tabType != "" and (tabType.equalsIgnoreCase("2") or tabType.equalsIgnoreCase("3"))'>
								, SUBSTR(EnterDate,1,4) TargetYear
							</when>	  
							<otherwise>
								, (CASE WHEN V.CreateMethod = 'J' THEN
										CASE WHEN TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12),'YYYYMMDD') <![CDATA[<=]]> TO_CHAR(SYSDATE,'YYYYMMDD')
											THEN EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
										ELSE
											EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR))
										END
									ELSE
										CASE WHEN ADD_MONTHS(TO_DATE(A.EnterDate,'YYYYMMDD'), 12) >= TO_DATE(#{year}||TO_CHAR(SYSDATE,'MMDD'),'YYYYMMDD') THEN
											EXTRACT(YEAR FROM TO_DATE(A.EnterDate,'YYYYMMDD'))
										ELSE
											EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
										END
									END
								) as TargetYear
							</otherwise>
						</choose>
					, IsOneYear
					,(CASE WHEN IsOneYear = 0 THEN
							fn_attend_getPromotionDateRage('F','Code1'
							,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'J' THEN
							fn_attend_getPromotionDateRage('F','Code1'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'),'MMDD')),'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'F' THEN
							fn_attend_getPromotionDateRage('F','Code1'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), 12)
							,#{domainCode})
						END) AS VacDate
					,(CASE WHEN IsOneYear = 0 THEN
							fn_attend_getPromotionDateRage('F','Code2'
							,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'J' THEN
							fn_attend_getPromotionDateRage('F','Code2'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'),'MMDD')),'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'F' THEN
							fn_attend_getPromotionDateRage('F','Code2'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), 12)
							,#{domainCode})
						END) AS OneDate
					,(CASE WHEN IsOneYear = 0 THEN
							fn_attend_getPromotionDateRage('F','Code3'
							,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'J' THEN
							fn_attend_getPromotionDateRage('F','Code3'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'),'MMDD')),'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'F' THEN
							fn_attend_getPromotionDateRage('F','Code3'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), 12)
							,#{domainCode})
						END) AS TwoDate
					,(CASE WHEN IsOneYear = 0 THEN
							fn_attend_getPromotionDateRage('F','Code4'
							,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'J' THEN
							fn_attend_getPromotionDateRage('F','Code4'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'),'MMDD')),'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'F' THEN
							fn_attend_getPromotionDateRage('F','Code4'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), 12)
							,#{domainCode})
					END) AS LessVacDate
					,(CASE WHEN IsOneYear = 0 THEN
							fn_attend_getPromotionDateRage('F','Code5'
							,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'J' THEN
							fn_attend_getPromotionDateRage('F','Code5'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'),'MMDD')),'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'F' THEN
							fn_attend_getPromotionDateRage('F','Code5'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), 12)
							,#{domainCode})
						END) AS LessOneDate9
					,(CASE WHEN IsOneYear = 0 THEN
							fn_attend_getPromotionDateRage('F','Code6'
							,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'J' THEN
							fn_attend_getPromotionDateRage('F','Code6'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'),'MMDD')),'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'F' THEN
							fn_attend_getPromotionDateRage('F','Code6'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), 12)
							,#{domainCode})
						END) AS LessTwoDate9
					,(CASE WHEN IsOneYear = 0 THEN
							fn_attend_getPromotionDateRage('F','Code7'
							,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'J' THEN
							fn_attend_getPromotionDateRage('F','Code7'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'),'MMDD')),'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN CreateMethod = 'F' THEN
							fn_attend_getPromotionDateRage('F','Code7'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), 12)
							,#{domainCode})
						END) AS LessOneDate2
					,(CASE WHEN IsOneYear = 0 THEN
							fn_attend_getPromotionDateRage('F','Code8'
							,ADD_MONTHS(TO_DATE(EnterDate, 'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'J' THEN
							fn_attend_getPromotionDateRage('F','Code8'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'),'MMDD')),'YYYYMMDD'), 12)
							,#{domainCode})
						WHEN V.CreateMethod = 'F' THEN
							fn_attend_getPromotionDateRage('F','Code8'
							,ADD_MONTHS(TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'), 12)
							,#{domainCode})
						END) AS LessTwoDate2
				FROM (select UserCode, REPLACE(EnterDate,'-','') AS EnterDate, MultiDisplayName, RetireDate, SortKey, MailAddress
						, (CASE WHEN TO_CHAR(TO_DATE(REPLACE(EnterDate,'-','')) + (INTERVAL '12' MONTH), 'YYYYMMDD') <![CDATA[<=]]> TO_CHAR(SYSDATE, 'YYYYMMDD')
							  AND EXTRACT(YEAR FROM TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD') + (INTERVAL '12' MONTH)) <![CDATA[<]]> #{year}
							THEN 1
							ELSE 0 END
						) as IsOneYear
						from sys_object_user
						where IsDisplay = 'Y'
						and IsHR = 'Y'
						and (RetireDate is null or RetireDate = '')
						and (EnterDate is not null and LENGTH(EnterDate) > 0)
				)  A
				LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin' AND B.CompanyCode = #{domainCode}
				LEFT JOIN vm_config V ON V.CompanyCode = B.CompanyCode
			) A
			LEFT JOIN (	SELECT Year, ReaderCode
							, LISTAGG(CASE WHEN MessageID ='10' THEN ReadDate ELSE NULL END, ',') WITHIN GROUP ( ORDER BY MessageID ASC) AS Read10
							, LISTAGG(CASE WHEN MessageID ='11' THEN ReadDate ELSE NULL END, ',') WITHIN GROUP ( ORDER BY MessageID ASC) AS Read11
							, LISTAGG(CASE WHEN MessageID ='12' THEN ReadDate ELSE NULL END, ',') WITHIN GROUP ( ORDER BY MessageID ASC) AS Read12
							, LISTAGG(CASE WHEN MessageID ='13' THEN ReadDate ELSE NULL END, ',') WITHIN GROUP ( ORDER BY MessageID ASC) AS Read13
							, LISTAGG(CASE WHEN MessageID ='14' THEN ReadDate ELSE NULL END, ',') WITHIN GROUP ( ORDER BY MessageID ASC) AS Read14
							, LISTAGG(CASE WHEN MessageID ='18' THEN ReadDate ELSE NULL END, ',') WITHIN GROUP ( ORDER BY MessageID ASC) AS Read18
							, LISTAGG(CASE WHEN MessageID ='19' THEN ReadDate ELSE NULL END, ',') WITHIN GROUP ( ORDER BY MessageID ASC) AS Read19
							, LISTAGG(CASE WHEN MessageID ='20' THEN ReadDate ELSE NULL END, ',') WITHIN GROUP ( ORDER BY MessageID ASC) AS Read20
						FROM vm_message_reader
						WHERE MessageID IN ('10','11','12','13','14','18','19','20') GROUP BY Year, ReaderCode
			) B ON A.TargetYear = B.Year AND A.UserCode = B.ReaderCode
			LEFT JOIN vm_useage_plan P ON  P.YEAR = A.TargetYear and A.UserCode = P.UR_CODE
			LEFT JOIN vm_useage_plan P2 ON  P2.YEAR = A.TargetYear+1 and A.UserCode = P2.UR_CODE
		) TBL
		,(select SettingValue
			from sys_base_config SBC
			WHERE  SBC.DomainID = (select DomainID from sys_object_domain SOD where SOD.DomainCode = #{domainCode})
			AND SettingKey = 'FacilitatingTarget'
		) SBC
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			AND RetireDate IS NULL
			AND DeptCode NOT LIKE	'%RetireDept'
			AND EnterDate IS NOT NULL
			AND TO_NUMBER(SUBSTR(EnterDate,1,4)) <![CDATA[<=]]>  TO_NUMBER(#{year})
			AND ((NVL(LENGTH2(SBC.SettingValue),0) > 0 AND INSTR('_'||SBC.SettingValue, NVL(TBL.JobTitleCode,' ')) > 0)
				OR NVL(LENGTH2(SBC.SettingValue),0) = 0)
			<if test='tabType != null and tabType !=""'>
				<choose>
					<when test='tabType.equalsIgnoreCase("1") or tabType.equalsIgnoreCase("4")'>
						AND IsOneYear = 1
					</when>
					<otherwise>
						AND IsOneYear = 0
					</otherwise>
				</choose>
			</if>

			<if test='urCode != null and urCode !=""'>
				AND UserCode = #{urCode}
			</if>
			<if test='sendMailUsersList != null and sendMailUsersList != ""'>
				<foreach collection="sendMailUsersList" item="item" open="AND UserCode IN (" close=")" separator=",">
					#{item}
				</foreach>
			</if>
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "deptName"'>
						AND DeptName LIKE '%' || #{schTxt} || '%'
					</when>
					<otherwise>
						AND DisplayName LIKE '%' || #{schTxt} || '%'
					</otherwise>
				</choose>
			</if>

			<if test='startDate != null and startDate != "" and endDate != null and endDate != "" '>
				<choose>
					<when test='tabType.equalsIgnoreCase("2")'>
						<if test='schDateType.equalsIgnoreCase("0")'>
							AND (
								TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("1")'>
							AND (
								TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate9Until,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("2")'>
							AND (
								TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate9,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate9Until,'-',''), 'YYYYMMDD')
							)
						</if>
					</when>
					<when test='tabType.equalsIgnoreCase("3")'>
						<if test='schDateType.equalsIgnoreCase("0")'>
							AND (
								TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("1")'>
							AND (
								TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessOneDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessOneDate2Until,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("2")'>
							AND (
								TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessTwoDate2,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessTwoDate2Until,'-',''), 'YYYYMMDD')
							)
						</if>
					</when>
					<when test='tabType.equalsIgnoreCase("4")'>
						<if test='schDateType.equalsIgnoreCase("1")'>
							AND (
							TO_DATE(REPLACE(VacDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(VacDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(VacDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(VacDateUntil,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(VacDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(VacDateUntil,'-',''), 'YYYYMMDD')
							)
						</if>
					</when>
					<when test='tabType.equalsIgnoreCase("5")'>
						<if test='schDateType.equalsIgnoreCase("1")'>
							AND (
							TO_DATE(REPLACE(LessVacDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(LessVacDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
							OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessVacDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessVacDateUntil,'-',''), 'YYYYMMDD')
							OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(LessVacDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(LessVacDateUntil,'-',''), 'YYYYMMDD')
							)
						</if>
					</when>
					<otherwise>
						<if test='schDateType.equalsIgnoreCase("0")'>
						AND (
								TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("1")'>
							AND (
								TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(OneDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(OneDateUntil,'-',''), 'YYYYMMDD')
							)
						</if>
						<if test='schDateType.equalsIgnoreCase("2")'>
							AND (
								TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD') BETWEEN TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') AND TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD')
								OR TO_DATE(REPLACE(#{startDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD')
								OR TO_DATE(REPLACE(#{endDate},'.',''),'YYYYMMDD') BETWEEN TO_DATE(REPLACE(TwoDate,'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(TwoDateUntil,'-',''), 'YYYYMMDD')
							)
						</if>
					</otherwise>
				</choose>
			</if>

			<if test='dayType != null and dayType != "" and daysValue != null and daysValue != "" '>
				<choose>
					<when test='tabType.equalsIgnoreCase("1")'>
						<choose>
							<when test='dayType.equalsIgnoreCase("D")'>
								AND TO_DATE(TwoDate) BETWEEN SYSDATE AND (SYSDATE + #{daysValue})
							</when>
							<when test='dayType.equalsIgnoreCase("M")'>
								AND TO_DATE(TwoDate) BETWEEN SYSDATE AND ADD_MONTHS(SYSDATE, #{daysValue})
							</when>
						</choose>
					</when>
					<when test='tabType.equalsIgnoreCase("2")'>
						<choose>
							<when test='dayType.equalsIgnoreCase("D")'>
								AND TO_DATE(LessTwoDate9) BETWEEN SYSDATE AND (SYSDATE + #{daysValue})
							</when>
							<when test='dayType.equalsIgnoreCase("M")'>
								AND TO_DATE(LessTwoDate9) BETWEEN SYSDATE AND ADD_MONTHS(SYSDATE, #{daysValue})
							</when>
						</choose>
					</when>
					<when test='tabType.equalsIgnoreCase("3")'>
						<choose>
							<when test='dayType.equalsIgnoreCase("D")'>
								AND TO_DATE(LessTwoDate2) BETWEEN SYSDATE AND (SYSDATE + #{daysValue})
							</when>
							<when test='dayType.equalsIgnoreCase("M")'>
								AND TO_DATE(LessTwoDate2) BETWEEN SYSDATE AND ADD_MONTHS(SYSDATE, #{daysValue})
							</when>
						</choose>
					</when>
					<when test='tabType.equalsIgnoreCase("4")'>
						<choose>
							<when test='dayType.equalsIgnoreCase("D")'>
								AND TO_DATE(VacDate) BETWEEN SYSDATE AND (SYSDATE + #{daysValue})
							</when>
							<when test='dayType.equalsIgnoreCase("M")'>
								AND TO_DATE(VacDate) BETWEEN SYSDATE AND ADD_MONTHS(SYSDATE, #{daysValue})
							</when>
						</choose>
					</when>
					<when test='tabType.equalsIgnoreCase("5")'>
						<choose>
							<when test='dayType.equalsIgnoreCase("D")'>
								AND TO_DATE(LessVacDate) BETWEEN SYSDATE AND (SYSDATE + #{daysValue})
							</when>
							<when test='dayType.equalsIgnoreCase("M")'>
								AND TO_DATE(LessVacDate) BETWEEN SYSDATE AND ADD_MONTHS(SYSDATE, #{daysValue})
							</when>
						</choose>
					</when>
				</choose>
			</if>

			<if test='tabType != null and tabType != "" '>
				<choose>
					<when test='tabType.equalsIgnoreCase("2")'>
						AND EXTRACT(YEAR FROM TO_DATE(LessOneDate9)) = #{year}
						AND
						(
						(TO_DATE(LessOneDate9) <![CDATA[>=]]> TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD')
						AND TO_DATE(LessOneDate9) <![CDATA[<=]]> ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12) - 1
						)
						OR
						(TO_DATE(LessTwoDate9) <![CDATA[>=]]> TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD')
						AND TO_DATE(LessTwoDate9) <![CDATA[<=]]> ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12) - 1
						)
						)
					</when>
					<when test='tabType.equalsIgnoreCase("3")'>
						AND EXTRACT(YEAR FROM TO_DATE(LessOneDate2)) = #{year}
						AND
						(
						(TO_DATE(LessOneDate2) <![CDATA[>=]]> TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD')
						AND TO_DATE(LessOneDate2) <![CDATA[<=]]> ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12) - 1
						)
						OR
						(TO_DATE(LessTwoDate2) <![CDATA[>=]]> TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD')
						AND TO_DATE(LessTwoDate2) <![CDATA[<=]]> ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12) - 1
						)
						)
					</when>
					<when test='tabType.equalsIgnoreCase("5")'>
						AND EXTRACT(YEAR FROM TO_DATE(LessVacDate)) = #{year}
						AND (TO_DATE(LessVacDate) <![CDATA[>=]]> TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD')
						AND TO_DATE(LessVacDate) <![CDATA[<=]]> ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12) - 1
						)
					</when>
				</choose>
			</if>
		</trim>
	 	<trim prefix="ORDER BY"  prefixOverrides =",">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			JobTitleSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			JobLevelSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			JobPositionSortKey ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			DisplayName ASC
				  		</if>
				  	</foreach>
				  	, SortKey ASC
			  	</when>
			</choose>
		</trim>
	 	<include refid="oracle.include.pagingFooter"/>
	</select>

	<select id="selectVacationUsePlanMigrationList" parameterType="cmap" resultType="cmap">
		/* groupware.vacation.selectVacationUsePlanMigrationList */
		SELECT
			UserCode AS "UserCode"
			, DeptName AS "DeptName"
			, DisplayName AS "DisplayName"
			, JobPositionName AS "JobPositionName"
			, JobPositionSortKey AS "JobPositionSortKey"
			, SortKey AS "SortKey"
			, DeptCode AS "DeptCode"
			, EnterDate AS "EnterDate"
			, RetireDate AS "RetireDate"
			, CreateMethod AS "CreateMethod"
			, TargetYear AS "TargetYear"
			, IsOneYear AS "IsOneYear"
			, VACPLAN AS "VACPLAN"
			, NEXT_VACPLAN AS "NEXT_VACPLAN"
		FROM
		(
			SELECT UserCode
				, DeptName
				, DisplayName
				, JobPositionName
				, JobPositionSortKey
				, SortKey
				, DeptCode
				, EnterDate
				, RetireDate
				, CreateMethod
				, TargetYear
				, IsOneYear
				, P.VACPLAN AS VACPLAN
				, P2.VACPLAN AS NEXT_VACPLAN
			FROM (
					SELECT A.UserCode
					, Fn_BaseGetDictionary_S(#{lang}, A.MultiDisplayName) AS DisplayName
					, A.EnterDate
					, A.RetireDate
					, A.SortKey
					, B.DeptCode
					, Fn_BaseGetDictionary_S(#{lang},NVL(B.DeptName, B.MultiDeptName)) AS DeptName
					, Fn_BaseGetDictionary_S(#{lang}, B.MultiJobPositionName) AS JobPositionName
					, JobPositionSortKey
					, V.CreateMethod
					, (CASE WHEN TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE(EnterDate,'-',''), 'YYYYMMDD'), 12),'YYYYMMDD') <![CDATA[<=]]> TO_CHAR(SYSDATE,'YYYYMMDD')
							THEN EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD'))
						ELSE EXTRACT(YEAR FROM TO_DATE(CONCAT(#{year},'0101'),'YYYYMMDD') - (INTERVAL '1' YEAR)) END
					) as TargetYear
					, IsOneYear
					FROM (select UserCode, EnterDate, MultiDisplayName, RetireDate, SortKey
							, (CASE WHEN TO_CHAR(TO_DATE(REPLACE(EnterDate,'-','')) + (INTERVAL '12' MONTH), 'YYYYMMDD') <![CDATA[<=]]> TO_CHAR(SYSDATE, 'YYYYMMDD')	-- 입사 1년 이상
								THEN 1
								ELSE 0 END
							) as IsOneYear
							from sys_object_user where EnterDate is not null)  A
					LEFT JOIN sys_object_user_basegroup B ON A.UserCode = B.UserCode AND JobType = 'Origin' AND B.CompanyCode = #{domainCode}
					LEFT JOIN vm_config V ON V.CompanyCode = B.CompanyCode
					WHERE  A.IsOneYear = 0
			) A
			LEFT JOIN vm_useage_plan P ON  P.YEAR = A.TargetYear and A.UserCode = P.UR_CODE
			LEFT JOIN vm_useage_plan P2 ON  P2.YEAR = A.TargetYear+1 and A.UserCode = P2.UR_CODE
		) TBL
		WHERE USERCODE <![CDATA[<>]]> 'superadmin'
	</select>

	<update id="updateVacPlanMigration" parameterType="cmap">
		/* groupware.vacation.updateVacPlanMigration */
		MERGE INTO vm_useage_plan G
		USING DUAL ON (G.YEAR = #{TargetYear} AND G.UR_CODE = #{UserCode})
		WHEN MATCHED THEN
		UPDATE SET G.VACPLAN = #{updateVacPlan}
		WHEN NOT MATCHED THEN
		INSERT (YEAR, GR_CODE, GR_NAME, UR_CODE, UR_NAME, VACPLAN, INSERT_DATE)
		VALUES (#{TargetYear}, #{GrCode}, #{GrName}, #{UserCode}, #{UserName}, #{updateVacPlan}, SYSDATE)
	</update>
	
	<select id="selectVacationInfo" parameterType="cmap" resultType="Long">
		/* legacy.formCmmFunction.selectVacationInfo */
		SELECT NVL(CASE WHEN ROWCNT = 0 THEN 0 ELSE EXIST END,0) AS cnt
		FROM (SELECT a.ROWCNT,
				CASE WHEN #{VacOffFlag}='AM' OR #{VacOffFlag}='PM' THEN
				CASE WHEN cnt = 0 OR cnt is null THEN 0
					WHEN LENGTH2(#{STime}) > 0 AND LENGTH2(#{ETime}) > 0 THEN
						CASE WHEN (CAST(REPLACE(#{STime},':','') AS INTEGER)+1 <![CDATA[>=]]> CAST(REPLACE(StartTime,':','') AS INTEGER)
							AND CAST(REPLACE(#{STime},':','') AS INTEGER)+1 <![CDATA[<=]]> CAST(REPLACE(EndTime,':','') AS INTEGER))
							OR (CAST(REPLACE(#{ETime},':','') AS INTEGER)-1 <![CDATA[>=]]> CAST(REPLACE(StartTime,':','') AS INTEGER)
							AND CAST(REPLACE(#{ETime},':','') AS INTEGER)-1 <![CDATA[<=]]> CAST(REPLACE(EndTime,':','') AS INTEGER)) THEN
								1
							ELSE 0
							END
						WHEN LENGTH2(#{STime}) = 0 AND LENGTH2(#{ETime}) = 0 THEN
							CASE WHEN LENGTH2(StartTime) > 0 AND LENGTH2(EndTime) > 0 AND VacOffFlag='PM' THEN
								1
								WHEN LENGTH2(StartTime) = 0 AND LENGTH2(EndTime) = 0 AND VacOffFlag=#{VacOffFlag} THEN
								1
							ELSE
								0
							END
						ELSE 1 END
					ELSE
						NVL(cnt,0)
					END AS EXIST

			FROM
				(select COUNT(*) AS ROWCNT, MAX(UR_Code) UR_CODE
					FROM (select *  from vm_vacationinfo_day) vm
					WHERE TO_DATE(VacDate,'YYYY-MM-DD') BETWEEN TO_DATE(#{StartDate},'YYYY-MM-DD') AND TO_DATE(#{EndDate},'YYYY-MM-DD')
					AND UR_Code = #{UserCode}
					AND (GUBUN != 'VACATION_CANCEL' and GUBUN != 'VACATION_PUBLIC_CANCEL')
					<if test="(VacOffFlag=='AM' or VacOffFlag=='PM') and STime.length() == 0 and ETime.length() == 0">
				 	AND (VacOffFlag is null OR VacOffFlag = #{VacOffFlag})
					</if>
					) a
					left join (select 1 cnt, VacDate, UR_Code,GUBUN,VacDay, StartTime, EndTime, VacOffFlag  from vm_vacationinfo_day
					WHERE TO_DATE(VacDate,'YYYY-MM-DD') BETWEEN TO_DATE(#{StartDate},'YYYY-MM-DD') AND TO_DATE(#{EndDate},'YYYY-MM-DD')
					AND UR_Code = #{UserCode}
					AND (GUBUN != 'VACATION_CANCEL' and GUBUN != 'VACATION_PUBLIC_CANCEL')
					<if test="(VacOffFlag=='AM' or VacOffFlag=='PM') and STime.length() == 0 and ETime.length() == 0">
				 	AND (VacOffFlag is null OR VacOffFlag = #{VacOffFlag})
					</if>
				) vm ON a.UR_CODE = vm.UR_CODE
			) T
	</select>
	
	<select id="selectVacationCancelInfo" parameterType="cmap" resultType="Long">
	    SELECT COUNT(1) - (TO_DATE(#{EndDate},'YYYY-MM-DD') - TO_DATE(#{StartDate},'YYYY-MM-DD') + 1) AS invalidcnt
	    FROM vm_vacationinfo_day
		WHERE UR_Code = #{UserCode}
		AND VacFlag = #{VacFlag}
		AND VacOffFlag = #{VacOffFlag}
		AND TO_DATE(VacDate,'YYYY-MM-DD') BETWEEN TO_DATE(#{StartDate},'YYYY-MM-DD') AND TO_DATE(#{EndDate},'YYYY-MM-DD')
		AND (GUBUN != 'VACATION_CANCEL' and GUBUN != 'VACATION_PUBLIC_CANCEL')
	</select>

	<!-- 휴가부여이력팝업 -->
	<select id="getVacationPlanHistCnt" resultType="java.lang.Long">
	/* groupware.vacation.getVacationPlanHistCnt */
	<![CDATA[
		SELECT count(HistSeq)
		FROM vm_plan_hist 
		WHERE UR_Code = #{urCode}
		AND UseStartDate = TO_CHAR(TO_DATE(#{startDate}, 'YY.MM.DD'), 'YYYYMMDD')
		AND UseEndDate = TO_CHAR(TO_DATE(#{endDate}, 'YY.MM.DD'), 'YYYYMMDD')
		AND Vackind = 'PUBLIC'
	]]>
	</select>
	<select id="getVacationPlanHist" parameterType="cmap" resultType="cmap">
		/* groupware.vacation.getVacationPlanHist */
		<include refid="oracle.include.pagingHeader"/>
		SELECT UR_Code AS "UR_Code"
			, (SELECT Fn_BaseGetDictionary_S(#{lang}, MultiDisplayName) FROM sys_object_user WHERE UserCode =  UR_Code) AS "DisplayName"
			, TO_CHAR(TO_DATE(UseStartDate), 'YYYY.MM.DD') || ' ~ ' || TO_CHAR(TO_DATE(UseEndDate), 'YYYY.MM.DD')  AS "UseDate"
			, CAST(VacDay AS FLOAT) AS "VacDay" 
			, VmComment AS "Comment"
			, TO_CHAR(RegistDate,'YYYY-MM-DD') AS "ChangeDate"
			, VmMethod AS "VmMethod"
		FROM vm_plan_hist 
		WHERE UR_Code = #{urCode}
		AND UseStartDate = TO_CHAR(TO_DATE(#{startDate}, 'YY.MM.DD'), 'YYYYMMDD')
		AND UseEndDate =  TO_CHAR(TO_DATE(#{endDate}, 'YY.MM.DD'), 'YYYYMMDD')
		AND Vackind = 'PUBLIC'
		<trim prefix='ORDER BY'>
			<if test="sortColumn == '' or sortColumn == null or sortDirection == '' or sortDirection == null">
				RegistDate DESC
			</if>
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>"DisplayName"</when>
					<when test='sortColumn.equalsIgnoreCase("UseDate")'>"UseDate"</when>
					<when test='sortColumn.equalsIgnoreCase("VacDay")'>"VacDay"</when>
					<when test='sortColumn.equalsIgnoreCase("Comment")'>"Comment"</when>
					<when test='sortColumn.equalsIgnoreCase("ChangeDate")'>"ChangeDate"</when>
					<when test='sortColumn.equalsIgnoreCase("VmMethod")'>"VmMethod"</when>
					<otherwise>RegistDate</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter"/>
	</select>
	<select id="selectLastLongVacDay" parameterType="cmap" resultType="cmap">
		/* groupware.vacation.selectLastLongVacDay */
		select  UR_Code AS "UR_Code"
			, YEAR AS "YEAR"
			, VacDay AS "VacDay"
		from vm_vacationplan
		WHERE YEAR = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))
    	AND VacKind = 'PUBLIC'
    	AND UseStartDate = TO_CHAR(SYSDATE,'YYYY')||'0101'
    	AND UseEndDate = TO_CHAR(SYSDATE,'YYYY')||'1231'
		AND UR_Code IN(
			SELECT u.usercode
			FROM sys_object_user u
			LEFT JOIN sys_object_user_basegroup ub ON u.UserCode = ub.UserCode AND ub.JobType = 'Origin'
			where u.IsUse = 'Y'
			AND u.IsHR = 'Y'
			AND u.IsDisplay = 'Y'
			AND (u.EnterDate IS NOT NULL AND LENGTH(REPLACE(u.EnterDate,'-','')) = 8)
			AND ub.CompanyCode = #{domainCode}
		)
		AND registdate is not null 
		<if test='lastVacDayReCalcDate != null and lastVacDayReCalcDate !=""'>
		AND TO_CHAR(registdate, 'YYYYMMDD') > #{lastVacDayReCalcDate}
		</if>
	</select>
	<select id="selectLastLongVacDayV2" parameterType="cmap" resultType="cmap">
		/* groupware.vacation.selectLastLongVacDayV2 */
		SELECT U.UserCode AS "UserCode", U.YEAR AS "YEAR", V.VacDay AS "VacDay"
		FROM (
			SELECT a.UserCode, TARGETYEAR AS YEAR
              , TO_DATE(CONCAT(TARGETYEAR,TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') AS UseStartDate
              , TO_DATE(TO_CHAR(TO_DATE(CONCAT(TARGETYEAR,TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') + (INTERVAL '1' YEAR) - (INTERVAL '1' DAY),'YYYYMMDD'),'YYYYMMDD') AS UseEndDate
			FROM (select UserCode, EnterDate
				  , CASE WHEN TO_DATE(CONCAT(EXTRACT(YEAR FROM SYSDATE),TO_CHAR(TO_DATE(REPLACE(EnterDate,'-',''),'YYYYMMDD'),'MMDD')),'YYYYMMDD') <![CDATA[<=]]> SYSDATE THEN
						EXTRACT(YEAR FROM SYSDATE)
					ELSE EXTRACT(YEAR FROM SYSDATE - (INTERVAL '1' YEAR)) END AS TARGETYEAR
				from sys_object_user
				where IsUse = 'Y'
				and IsHR = 'Y'
				and IsDisplay = 'Y'
				and EnterDate IS NOT NULL
				and LENGTH(REPLACE(EnterDate, '-', '')) = 8
			) a
			INNER JOIN sys_object_user_basegroup b
				ON a.usercode = b.usercode AND b.JobType = 'Origin' and b.CompanyCode = #{domainCode}
		) U
		LEFT JOIN vm_vacationplan V
		ON U.UserCode = V.UR_Code
			AND V.VacKind = 'PUBLIC'
			AND V.YEAR = U.year
			AND TO_DATE(V.UseStartDate,'YYYYMMDD') = U.UseStartDate
            AND TO_DATE(V.UseEndDate,'YYYYMMDD') = U.UseEndDate
		where V.registdate is not null 
		<if test='lastVacDayReCalcDate != null and lastVacDayReCalcDate !=""'>
		AND TO_CHAR(V.registdate, 'YYYYMMDD') > #{lastVacDayReCalcDate}
		</if>
	</select>
	<update id="updateLastLongVacDay" parameterType="cmap">
	/* groupware.vacation.updateLastLongVacDay */
		<selectKey keyProperty="LastVacDay" resultType="cmap" order="BEFORE">
			SELECT fn_GetLastVacDay(#{userCode}, #{year}, #{domainCode}) AS "LastVacDay" FROM dual
		</selectKey>
		UPDATE vm_vacationplan
		   SET LastVacDay = #{LastVacDay} , 
		       LongVacDay = VacDay-#{LastVacDay}
		 WHERE UR_Code = #{userCode}
		   AND YEAR = #{year}
			AND VacKind = 'PUBLIC'
	</update>	

	<select id="selectVacDay" parameterType="cmap" resultType="java.lang.Long">
		/* groupware.vacation.selectVacDay */
	       SELECT
			CASE WHEN NVL(Reserved3, 1) = '' THEN
					CAST(1 AS DECIMAL(9,3))
				ELSE
					CAST(NVL(Reserved3, 1) AS DECIMAL(9,3))
				END AS "vacday"
			FROM sys_base_code
			WHERE 
			DomainID =(SELECT DOMAINID FROM SYS_OBJECT_DOMAIN WHERE DOMAINCODE = #{CompanyCode})
			AND CodeGroup = 'VACATION_TYPE'
			AND Code = #{vacFlag}
	</select>
	
	<select id="selectConfig" parameterType="cmap" resultType="cmap">
		select IsRemRenewal AS "IsRemRenewal",RemMethod AS "RemMethod" from vm_config where CompanyCode=(SELECT CompanyCode FROM sys_object_user_basegroup WHERE UserCode = #{urCode} AND JobType = 'Origin')
	</select>
</mapper>
