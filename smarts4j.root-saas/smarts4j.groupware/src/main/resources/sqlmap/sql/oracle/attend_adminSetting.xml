<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="attend.adminSetting">

	<!-- 보상휴가 기준 리스트 조회
	<select id="getRewardVacTempleteList"  parameterType="cmap" resultType="cmap">
		SELECT 
			vacSeq
			,dayType
			,overTimeHour
			,overTimeMin
			,rewardHour
			,rewardMin
		FROM attendance_mng_com_vac
		WHERE companyCode = #{CompanyCode}
		AND dayType IS NOT NULL
		ORDER BY dayType desc
	</select>
	 -->

	<!-- 회사설정 조회 -->
	<select id="getAttendMngMst" parameterType="cmap" resultType="cmap">
		SELECT ATTSEQ AS "AttSeq"
			, COMPANYCODE AS "CompanyCode"
			, PCUSEYN AS "PcUseYn"
			, MOBILEUSEYN AS "MobileUseYn"
			, MOBILEBIOUSEYN AS "MobileBioUseYn"
			, ATTYN AS "AttYn"
			, IPYN AS "IpYn"
			, OTHYN AS "OthYn"
			, VALIDYN AS "ValidYn"
			, REGISTERCODE AS "RegisterCode"
			, REGISTDATE AS "RegistDate"
			, MODIFYERCODE AS "ModifyerCode"
			, MODIFYDATE AS "ModifyDate"
		FROM ATTEND_MST
		WHERE COMPANYCODE =  #{CompanyCode}
			AND VALIDYN = 'Y'
	</select>
	
	<!-- 회사  기본정보 수정-->
	<update id="setAttendMngMst" parameterType="cmap">
		UPDATE ATTEND_MST
			SET MODIFYERCODE = #{RegUserCode}
			, MODIFYDATE = SYSDATE
			<if test='PcUseYn != null and PcUseYn != ""'>
			, PCUSEYN = #{PcUseYn}
			</if>
			<if test='MobileUseYn != null and MobileUseYn != ""'>
			, MOBILEUSEYN = #{MobileUseYn}
			</if>
			<if test='IpYn != null and IpYn != ""'>
			, IPYN = #{IpYn}
			</if>
			<if test='OthYn != null and OthYn != ""'>
			, OTHYN = #{OthYn}
			</if>
		WHERE ATTSEQ = #{AttSeq}
	</update>
	
	<!-- 회사설정 저장 (기초설정)-->
	<update id="setCompanySetting" parameterType="cmap">
		MERGE INTO SYS_BASE_CONFIG
		USING DUAL
		ON (CONFIGID = (SELECT CONFIGID FROM SYS_BASE_CONFIG WHERE BIZSECTION = 'Attend' AND SETTINGKEY = #{SettingKey} AND DOMAINID = #{DN_ID}))
		WHEN MATCHED THEN
		UPDATE SET
			SETTINGVALUE = #{SettingValue}
			, MODIFIERCODE = #{UserCode}
			, MODIFYDATE = SYSDATE
		WHEN NOT MATCHED THEN
		INSERT
		(
			CONFIGID
			, BIZSECTION
			, DOMAINID
			, SETTINGKEY
			, SETTINGVALUE
			, ISCHECK
			, ISUSE
			, DESCRIPTION
			, REGISTERCODE
			, REGISTDATE
			, MODIFIERCODE
			, MODIFYDATE
			, CONFIGTYPE
		) VALUES (
			SYS_BASE_CONFIG_SEQ.NEXTVAL
			, 'Attend'
			, #{DN_ID}
			, #{SettingKey}
			, #{SettingValue}
			, 'Y'
			, 'Y'
			, ' '
			, #{UserCode}
			, SYSDATE
			, #{UserCode}
			, SYSDATE
			, 'Manage'
		)
	</update>

	<!-- 휴가설정 저장 (기초설정)-->
	<update id="setCompanySettingForVacation" parameterType="cmap">
		MERGE INTO SYS_BASE_CONFIG
		USING DUAL
		ON (CONFIGID = (SELECT CONFIGID FROM SYS_BASE_CONFIG WHERE BIZSECTION = 'Vacation' AND SETTINGKEY = #{SettingKey} AND DOMAINID = #{DN_ID}))
		WHEN MATCHED THEN
		UPDATE SET
		SETTINGVALUE = #{SettingValue}
		, MODIFIERCODE = #{UserCode}
		, MODIFYDATE = SYSDATE
		WHEN NOT MATCHED THEN
		INSERT
		(
		CONFIGID
		, BIZSECTION
		, DOMAINID
		, SETTINGKEY
		, SETTINGVALUE
		, ISCHECK
		, ISUSE
		, DESCRIPTION
		, REGISTERCODE
		, REGISTDATE
		, MODIFIERCODE
		, MODIFYDATE
		, CONFIGTYPE
		) VALUES (
		SYS_BASE_CONFIG_SEQ.NEXTVAL
		, 'Vacation'
		, #{DN_ID}
		, #{SettingKey}
		, #{SettingValue}
		, 'Y'
		, 'Y'
		, ' '
		, #{UserCode}
		, SYSDATE
		, #{UserCode}
		, SYSDATE
		, 'Manage'
		)
	</update>
	
	<!-- ip list 조회 -->
	<select id="getIpList" parameterType = "cmap" resultType="cmap">
		SELECT
			IPSEQ AS "IpSeq"
			, SIP AS "SIp"
			, EIP AS "EIp"
			, VALIDYN AS "ValidYn"
			, PCUSEDYN AS "PcUsedYn"
			, MOBILEUSEDYN AS "MobileUsedYn"
			, ETC AS "Etc"
		FROM ATTEND_IP
		WHERE ATTSEQ = #{AttSeq}
	</select>
	
	<!-- ip list 삭제 -->
	<delete id="deleteIpMst" parameterType="cmap" >
		DELETE
		FROM ATTEND_IP
		WHERE ATTSEQ = #{AttSeq}
	</delete>
	
	<update id="setIpMng" parameterType="cmap">
		MERGE INTO ATTEND_IP
		USING DUAL
		ON (COMPANYCODE = #{CompanyCode})
		WHEN MATCHED THEN
		UPDATE SET
			MODIFYERCODE = #{RegUserCode}
			,MODIFYDATE = SYSDATE
			<if test='ValidYn != null and ValidYn !=""'>
			,VALIDYN = #{ValidYn}
			</if>
			<if test='SIp != null and SIp !=""'>
			,SIP = #{SIp}
			</if>
			<if test='EIp != null and EIp !=""'>
			,EIP = #{EIp}
			</if>
			<if test='PcUsedYn != null and PcUsedYn !=""'>
			,PCUSEDYN = #{PcUsedYn}
			</if>
			<if test='MobileUsedYn != null and MobileUsedYn !=""'>
			,MOBILEUSEDYN = #{MobileUsedYn}
			</if>
			<if test='Etc != null and Etc !=""'>
			,ETC = #{Etc}
			</if>
		WHEN NOT MATCHED THEN
		INSERT
		(
			IPSEQ
			,COMPANYCODE
			,SIP
			,EIP
			,VALIDYN
			,ATTSEQ
			,PCUSEDYN
			,MOBILEUSEDYN
			,ETC
			,REGISTERCODE
			,REGISTDATE
			,MODIFYERCODE
			,MODIFYDATE
		) VALUES (
			ATTEND_IP_SEQ.NEXTVAL
			, #{CompanyCode}
			, #{SIp}
			, #{EIp}
			, 'Y'
			, #{AttSeq}
			, #{PcUsedYn}
			, #{MobileUsedYn}
			, #{Etc}
			, #{RegUserCode}
			, SYSDATE
			, #{RegUserCode}
			, SYSDATE
		)
	</update>
	
	
	<!-- 보상휴가 ( 휴게시간 ) 리스트 -->
	<select id="getRewardVacList" parameterType="cmap" resultType="cmap">
		SELECT
			AMM.ATTSEQ AS "AttSeq"
			, AMMR.COMPANYCODE AS "CompanyCode"
			, REWARDCODE AS "RewardCode"
			, HOLIDAYFLAG AS "HolidayFlag"
			, OVERTIME AS "OverTime"
			, REWARDTIME AS "RewardTime"
			, TO_CHAR(TRUNC(OVERTIME*60/3600), 'FM900') AS "OverTimeHour"
			, TO_CHAR(TRUNC(MOD(OVERTIME*60, 3600) / 60), 'FM00') AS "OverTimeMin"
			, TO_CHAR(TRUNC(REWARDTIME*60/3600), 'FM900') AS "RewardTimeHour"
			, TO_CHAR(TRUNC(MOD(REWARDTIME*60, 3600) / 60), 'FM00') AS "RewardTimeMin"
			, METHODTYPE AS "MethodType"
			, REWARDUNIT AS "RewardUnit"
			, REWARDNTIME AS "RewardNTime"
		FROM ATTEND_MST_REWARD AMMR
			JOIN ATTEND_MST AMM
				ON AMMR.ATTSEQ = AMM.ATTSEQ
				AND AMM.COMPANYCODE = #{CompanyCode}
				<if test='RewardCode != null and RewardCode != ""'>
				AND REWARDCODE = #{RewardCode}
				</if>
				<if test='HolidayFlag != null and HolidayFlag != ""'>
				AND HOLIDAYFLAG = #{HolidayFlag}
				</if>
		ORDER BY OVERTIME
	</select>
	
	<!-- 간주근로 리스트 -->
	<select id="getAssList" parameterType="cmap" resultType="cmap">
		SELECT
			AMS.ASSSEQ AS "AssSeq"
			, AMS.COMPANYCODE AS "CompanyCode"
			, AMS.ASSNAME AS "AssName"
			, AMS.ASSWORKTIME AS "AssWorkTime"
			, (
				SELECT ASH.SCHSEQ
				FROM ATTEND_SCHEDULE ASH
				WHERE AMS.COMPANYCODE = ASH.COMPANYCODE
					AND AMS.ASSSEQ = ASH.ASSSEQ
					AND ROWNUM = 1
			) AS "SchSeq"
		FROM ATTEND_ASS AMS
		WHERE AMS.COMPANYCODE = #{CompanyCode}
	</select>
	
	<delete id="deleteAss" parameterType="cmap" >
		DELETE
		FROM ATTEND_ASS
		WHERE ATTSEQ IN (SELECT ATTSEQ FROM ATTEND_MST WHERE COMPANYCODE = #{CompanyCode})
		AND ASSSEQ = #{AssSeq}
	</delete>

	<update id="saveAss" parameterType="cmap" >
		UPDATE ATTEND_ASS
		SET
			ASSNAME        = #{AssName}
			, ASSWORKTIME  = #{AssWorkTime}
			, MODIFYERCODE = #{UserCode}
			, MODIFYDATE   = SYSDATE
		WHERE ATTSEQ IN (SELECT ATTSEQ FROM ATTEND_MST WHERE COMPANYCODE = #{CompanyCode})
		AND ASSSEQ = #{AssSeq}
	</update>

	<insert id="addAss" parameterType="cmap" >
		INSERT INTO ATTEND_ASS
		(
			ASSSEQ
			,ATTSEQ
			, COMPANYCODE
			, ASSNAME
			, ASSWORKTIME
			, REGISTERCODE
			, REGISTDATE
			, MODIFYERCODE
			, MODIFYDATE
		) VALUES (
			ATTEND_ASS_SEQ.NEXTVAL
			, (SELECT ATTSEQ FROM ATTEND_MST WHERE COMPANYCODE = #{CompanyCode})
			, #{CompanyCode}
			, #{AssName}
			, #{AssWorkTime}
			, #{UserCode}
			, SYSDATE
			, #{UserCode}
			, SYSDATE
		)
	</insert>

	
	<update id="setRewardVac" parameterType="cmap" >
		MERGE INTO ATTEND_MST_REWARD
		USING DUAL
		ON (COMPANYCODE = #{CompanyCode} AND REWARDCODE = #{RewardCode} AND HOLIDAYFLAG = #{HolidayFlag} AND OVERTIME = #{OverTime})
		WHEN MATCHED THEN
		UPDATE SET
			REWARDTIME = #{RewardTime}
		WHEN NOT MATCHED THEN
		INSERT
		(
			ATTSEQ
			, COMPANYCODE
			, REWARDCODE
			, HOLIDAYFLAG
			, OVERTIME
			, REWARDTIME
			, METHODTYPE
			, REWARDUNIT
			, REWARDNTIME
		) VALUES (
			(SELECT ATTSEQ FROM ATTEND_MST WHERE COMPANYCODE = #{CompanyCode})
			, #{CompanyCode}
			, #{RewardCode}
			, #{HolidayFlag}
			, #{OverTime}
			, #{RewardTime}
			, #{MethodType}
			, #{RewardUnit}
			, #{RewardNTime}
		)
	</update>
	
	<delete id="deleteRewardVac" parameterType="cmap" >
		DELETE
		FROM ATTEND_MST_REWARD
		WHERE ATTSEQ = (SELECT ATTSEQ FROM ATTEND_MST WHERE COMPANYCODE = #{CompanyCode})
			<if test='RewardCode != null and RewardCode !=""'>
			AND REWARDCODE = #{RewardCode}
			</if>
			<if test='HolidayFlag != null and HolidayFlag !=""'>
			AND HOLIDAYFLAG = #{HolidayFlag}
			</if>
	</delete>
	
	
	<!-- 근로정보 리스트 조회 -->
	<select id="getWorkInfoList" parameterType="cmap" resultType="cmap">
		<include refid="oracle.include.pagingHeader" />
		SELECT
			USERCODE AS "UserCode"
			, FN_BASEGETDICTIONARY_S(#{lang}, DISPLAYNAME) AS "DisplayName"
			, FN_BASEGETDICTIONARY_S(#{lang}, DEPTNAME) AS "DeptName"
			, WORKWEEK AS "WorkWeek"
			, WORKTIME AS "WorkTime"
			, WORKCODE AS "WorkCode"
			, UNITTERM AS "UnitTerm"
			, TO_CHAR(WORKAPPLYDATE, 'YYYY-MM-DD') AS "WorkApplyDate"
			, MAXWORKTIME AS "MaxWorkTime"
			, MAXWORKCODE AS "MaxWorkCode"
			, MAXUNITTERM AS "MaxUnitTerm"
			, TO_CHAR(MAXWORKAPPLYDATE, 'YYYY-MM-DD') AS "MaxWorkApplyDate"
			, MAXWEEKWORKTIME AS "MaxWeekWorkTime"
			, TO_CHAR(APPLYDATE, 'YYYY-MM-DD') AS "ApplyDate"
			, LISTTYPE AS "ListType"
			, VALIDYN AS "ValidYn"
			, LISTTYPE || '^' || USERCODE || '^' || TO_CHAR(APPLYDATE, 'YYYY-MM-DD') AS "PID"
		FROM (
			SELECT 
				B.UserCode
				,C.MultiDisplayName DisplayName
				,A.MultiDeptName DeptName
				,B.WorkWeek
				,B.WorkTime
				,B.WorkCode
				,B.UnitTerm
				,B.WorkApplyDate
				,B.MaxWorkTime
				,B.MaxWorkCode
				,B.MaxUnitTerm
				,B.MaxWorkApplyDate
				,B.MaxWeekWorkTime
				,B.ApplyDate
				,B.ListType
				,B.ValidYn
			FROM sys_object_user_basegroup  A
			JOIN sys_object_user_attendance B ON ListType = 'UR' AND A.UserCode = B.UserCode
			JOIN sys_object_user C ON B.UserCode = C.UserCode
		   WHERE CompanyCode = #{CompanyCode} 
			 AND JobType = 'Origin'
		UNION ALL
			SELECT 
				A.GroupCode UserCode
				,'' DisplayName
				,A.MultiDisplayName DeptName
				,B.WorkWeek
				,B.WorkTime
				,B.WorkCode
				,B.UnitTerm
				,B.WorkApplyDate
				,B.MaxWorkTime
				,B.MaxWorkCode
				,B.MaxUnitTerm
				,B.MaxWorkApplyDate
				,B.MaxWeekWorkTime
				,B.ApplyDate
				,B.ListType
				,B.ValidYn
			FROM sys_object_group A
			JOIN sys_object_user_attendance B on ListType = 'GR' AND A.GroupCode = B.UserCode 
		   WHERE A.CompanyCode = #{CompanyCode} 
			UNION ALL 
			SELECT 
				UserCode UserCode
				,'BaseData' DisplayName
				,UserCode DeptName
				,WorkWeek
				,WorkTime
				,WorkCode
				,UnitTerm
				,WorkApplyDate
				,MaxWorkTime
				,MaxWorkCode
				,MaxUnitTerm
				,MaxWorkApplyDate
				,MaxWeekWorkTime
				,ApplyDate
				,ListType
				,ValidYn
			FROM sys_object_user_attendance 
		   WHERE ListType = 'OR' AND UserCode=#{CompanyCode}
		) W
		WHERE 1 = 1
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DEPTNAME LIKE '%'||#{schTxt}||'%'
				</when>
				<otherwise>
					AND DISPLAYNAME LIKE '%'||#{schTxt}||'%'
				</otherwise>
			</choose>
		</if>
		<trim prefix='ORDER BY'>
			<choose>
				<when test='sortColumn != null and sortDirection != null'>
					<choose>
						<when test='sortColumn.equalsIgnoreCase("ValidYn")'>"ValidYn"</when>
						<when test='sortColumn.equalsIgnoreCase("ListType")'>"ListType"</when>
						<when test='sortColumn.equalsIgnoreCase("DeptName")'>"DeptName"</when>
						<when test='sortColumn.equalsIgnoreCase("DisplayName")'>"DisplayName"</when>
						<when test='sortColumn.equalsIgnoreCase("ApplyDate")'>"ApplyDate"</when>
						<otherwise>"ApplyDate"</otherwise>
					</choose>
					<choose>
						<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
						<otherwise> DESC</otherwise>
					</choose>
				</when>
				<otherwise>
					"ApplyDate" DESC
				</otherwise>
			</choose>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>
	
	<select id="getWorkInfoListCnt"  resultType="java.lang.Long">
		SELECT
			COUNT(1) AS cnt
		FROM (
			SELECT 
				B.UserCode
				,C.MultiDisplayName DisplayName
				,A.MultiDeptName DeptName
				,B.WorkWeek
				,B.WorkTime
				,B.WorkCode
				,B.UnitTerm
				,B.WorkApplyDate
				,B.MaxWorkTime
				,B.MaxWorkCode
				,B.MaxUnitTerm
				,B.MaxWorkApplyDate
				,B.MaxWeekWorkTime
				,B.ApplyDate
				,B.ListType
				,B.ValidYn
			FROM sys_object_user_basegroup  A
			JOIN sys_object_user_attendance B ON ListType = 'UR' AND A.UserCode = B.UserCode
			JOIN sys_object_user C ON B.UserCode = C.UserCode
		   WHERE CompanyCode = #{CompanyCode} 
			 AND JobType = 'Origin'
		UNION ALL
			SELECT 
				A.GroupCode UserCode
				,'' DisplayName
				,A.MultiDisplayName DeptName
				,B.WorkWeek
				,B.WorkTime
				,B.WorkCode
				,B.UnitTerm
				,B.WorkApplyDate
				,B.MaxWorkTime
				,B.MaxWorkCode
				,B.MaxUnitTerm
				,B.MaxWorkApplyDate
				,B.MaxWeekWorkTime
				,B.ApplyDate
				,B.ListType
				,B.ValidYn
			FROM sys_object_group A
			JOIN sys_object_user_attendance B on ListType = 'GR' AND A.GroupCode = B.UserCode 
		   WHERE A.CompanyCode = #{CompanyCode} 
			UNION ALL 
			SELECT 
				UserCode UserCode
				,'BaseData' DisplayName
				,UserCode DeptName
				,WorkWeek
				,WorkTime
				,WorkCode
				,UnitTerm
				,WorkApplyDate
				,MaxWorkTime
				,MaxWorkCode
				,MaxUnitTerm
				,MaxWorkApplyDate
				,MaxWeekWorkTime
				,ApplyDate
				,ListType
				,ValidYn
			FROM sys_object_user_attendance 
		   WHERE ListType = 'OR' AND UserCode=#{CompanyCode}
		) W
		WHERE 1=1
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "deptName"'>
					AND DEPTNAME LIKE '%'||#{schTxt}||'%'
				</when>
				<otherwise>
					AND DISPLAYNAME LIKE '%'||#{schTxt}||'%'
				</otherwise>
			</choose>
		</if>
	</select>
	
	<!-- 근로정보 관리 엑셀 업로드 데이터 유효성검사 -->
	<select id="chkWorkInfoDataValue" parameterType="cmap" resultType="cmap">
		SELECT
			TEMP_USERCODE AS "UserCode"
			, FN_BASEGETDICTIONARY_S(#{lang}, DISPLAYNAME) as "UserName"
			, TEMP_APPLYDATE AS "ApplyDate"
			, U.WORKWEEK AS "WorkWeek"
			, U.WORKTIME AS "WorkTime"
			, U.WORKCODE AS "WorkCode"
			, U.UNITTERM AS "UnitTerm"
			, U.WORKAPPLYDATE AS "WorkApplyDate"
			, U.MAXWORKTIME AS "MaxWorkTime"
			, U.MAXWORKCODE AS "MaxWorkCode"
			, U.MAXUNITTERM AS "MaxUnitTerm"
			, U.MAXWORKAPPLYDATE AS "MaxWorkApplyDate"
			, U.WORKWEEK_VALID AS "WorkWeek_valid"
			, U.WORKRULE_VALID AS "WorkRule_valid"
			, U.MAXWORKRULE_VALID AS "MaxWorkRule_valid"
			, U.EX_WORKWEEK AS "ex_WorkWeek"
			, U.EX_WORKRULE AS "ex_WorkRule"
			, U.EX_MAXWORKRULE AS "ex_MaxWorkRule"
			, DECODE(SOU.USERCODE, NULL, 'N', 'Y') AS "userCode_validYn"
			, DECODE(APPLYDATE_VALID, 'N', 'N', DECODE(A.USERCODE, NULL, DECODE(SETTINGVALUE, NULL, 'N', 'Y'), 'N')) AS "applyDate_validYn"
		FROM
		(
		<if test='workInfoList != null and workInfoList.size != 0'>
			<foreach collection="workInfoList" item="workInfo" separator="UNION">
				SELECT 
					#{workInfo.UserCode} AS TEMP_USERCODE
					,#{workInfo.ApplyDate} AS TEMP_APPLYDATE
					,#{workInfo.WorkWeek} AS WORKWEEK
					,#{workInfo.WorkTime} AS WORKTIME
					,#{workInfo.WorkCode} AS WORKCODE
					,#{workInfo.UnitTerm} AS UNITTERM
					,#{workInfo.WorkApplyDate} AS WORKAPPLYDATE
					,#{workInfo.MaxWorkTime} AS MAXWORKTIME
					,#{workInfo.MaxWorkCode} AS MAXWORKCODE
					,#{workInfo.MaxUnitTerm} AS MAXUNITTERM
					,#{workInfo.MaxWorkApplyDate} AS MAXWORKAPPLYDATE
					,#{workInfo.WorkWeek_valid} AS WORKWEEK_VALID
					,#{workInfo.WorkRule_valid} AS WORKRULE_VALID
					,#{workInfo.MaxWorkRule_valid} AS MAXWORKRULE_VALID
					,#{workInfo.ApplyDate_valid} AS APPLYDATE_VALID
					,#{workInfo.ex_WorkWeek} AS EX_WORKWEEK
					,#{workInfo.ex_WorkRule} AS EX_WORKRULE
					,#{workInfo.ex_MaxWorkRule} AS EX_MAXWORKRULE
				FROM DUAL
			</foreach>
		</if>
		) U
		LEFT JOIN SYS_OBJECT_USER SOU
			ON U.TEMP_USERCODE = SOU.USERCODE
		LEFT JOIN (
			SELECT
				USERCODE
				, APPLYDATE
			FROM SYS_OBJECT_USER_ATTENDANCE WHERE LISTTYPE = 'UR'
			<!-- 
			UNION
			SELECT
				A.USERCODE
				,B.APPLYDATE
			FROM
			(
				SELECT * FROM SYS_OBJECT_USER_BASEGROUP WHERE JOBTYPE = 'Origin'
			) A  JOIN (
				SELECT * FROM SYS_OBJECT_USER_ATTENDANCE WHERE LISTTYPE = 'GR'
			) B ON A.DEPTCODE = B.USERCODE
			-->
		) A ON TEMP_USERCODE = A.USERCODE AND U.TEMP_APPLYDATE = A.APPLYDATE
		LEFT JOIN (
			SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AttBaseWeek'  AND DOMAINID = #{DN_ID}
		) S ON TO_CHAR(TO_DATE(TEMP_APPLYDATE, 'YYYY-MM-DD'), 'D') = SETTINGVALUE
	</select>

	<select id="getWorkInfoDetail" parameterType="cmap" resultType="cmap">
		SELECT
			LISTTYPE AS "ListType"
			, USERCODE AS "UserCode"
			, WORKWEEK AS "WorkWeek"
			, WORKTIME AS "WorkTime"
			, WORKCODE AS "WorkCode"
			, UNITTERM AS "UnitTerm"
			, TO_CHAR(WORKAPPLYDATE, 'YYYY-MM-DD') AS "WorkApplyDate"
			, MAXWORKTIME AS "MaxWorkTime"
			, MAXWORKCODE AS "MaxWorkCode"
			, MAXUNITTERM AS "MaxUnitTerm"
			, TO_CHAR(MAXWORKAPPLYDATE, 'YYYY-MM-DD') AS "MaxWorkApplyDate"
			, MAXWEEKWORKTIME AS "MaxWeekWorkTime"
			, TO_CHAR(APPLYDATE, 'YYYY-MM-DD') AS "ApplyDate"
			, VALIDYN AS "ValidYn"
			, CASE LISTTYPE
				WHEN 'UR' THEN (
					SELECT FN_BASEGETDICTIONARY_S(#{lang}, DISPLAYNAME)
					FROM SYS_OBJECT_USER U
					WHERE U.USERCODE = A.USERCODE
				)
				WHEN 'GR' THEN (
					SELECT FN_BASEGETDICTIONARY_S(#{lang}, MULTIDISPLAYNAME)
					FROM SYS_OBJECT_GROUP B
					WHERE B.GROUPCODE = A.USERCODE
			) END AS "UserName"
		FROM SYS_OBJECT_USER_ATTENDANCE A
		WHERE LISTTYPE = #{ListType}
			AND USERCODE = #{UserCode}
			AND APPLYDATE = TO_DATE(#{ApplyDate}, 'YYYY-MM-DD')
	</select>

	<update id="updateWorkInfo" parameterType="cmap">
		UPDATE SYS_OBJECT_USER_ATTENDANCE
		SET WORKWEEK   		    = #{workInfoParams[0].WorkWeek}
			,WORKTIME			= #{workInfoParams[0].WorkTime}
			,WORKCODE			= #{workInfoParams[0].WorkCode}
			,UNITTERM			= #{workInfoParams[0].UnitTerm}
			,WORKAPPLYDATE		= #{workInfoParams[0].WorkApplyDate}
			,MAXWORKTIME		= #{workInfoParams[0].MaxWorkTime}
			,MAXWORKCODE		= #{workInfoParams[0].MaxWorkCode}
			,MAXUNITTERM		= #{workInfoParams[0].MaxUnitTerm}
			,MAXWORKAPPLYDATE	= #{workInfoParams[0].MaxWorkApplyDate}
			,MAXWEEKWORKTIME    = #{workInfoParams[0].MaxWeekWorkTime}
			,MODIFYERCODE       = #{RegUserCode}
			,MODIFYDATE		    = SYSDATE
		WHERE LISTTYPE = #{workInfoParams[0].ListType}
			AND USERCODE = #{workInfoParams[0].UserCode}
			AND APPLYDATE = TO_DATE(#{workInfoParams[0].ApplyDate}, 'YYYY-MM-DD')
	</update>

	<insert id="insertWorkInfo" parameterType="cmap" >
		MERGE INTO SYS_OBJECT_USER_ATTENDANCE SOUA
		USING (
		<foreach collection="workInfoParams" item="info" open="" separator="UNION" close="">
			SELECT
				#{info.ListType} AS LISTTYPE
				, #{info.UserCode} AS USERCODE
				, #{info.WorkWeek} AS WORKWEEK
				, #{info.ApplyDate} AS APPLYDATE
				, #{info.WorkTime} AS WORKTIME
				, #{info.WorkCode} AS WORKCODE
				, #{info.UnitTerm} AS UNITTERM
				, #{info.WorkApplyDate} AS WORKAPPLYDATE
				, #{info.MaxWorkTime} AS MAXWORKTIME
				, #{info.MaxWorkCode} AS MAXWORKCODE
				, #{info.MaxUnitTerm} AS MAXUNITTERM
				, #{info.MaxWorkApplyDate} AS MAXWORKAPPLYDATE
				, #{info.MaxWeekWorkTime} AS MAXWEEKWORKTIME
				, #{info.ValidYn} AS VALIDYN
				, #{info.RegUserCode} AS REGISTERCODE
				, SYSDATE AS REGISTDATE
				, #{info.RegUserCode} AS MODIFYERCODE
				, SYSDATE AS MODIFYDATE
			FROM DUAL
		</foreach>
		) A ON (SOUA.LISTTYPE = A.LISTTYPE AND SOUA.USERCODE = A.USERCODE AND SOUA.APPLYDATE = A.APPLYDATE)
		WHEN MATCHED THEN
		UPDATE SET
			SOUA.MODIFYERCODE = A.MODIFYERCODE
			, SOUA.MODIFYDATE = A.MODIFYDATE
			, SOUA.VALIDYN = A.VALIDYN
		WHEN NOT MATCHED THEN
		INSERT (
			SOUA.LISTTYPE
			, SOUA.USERCODE
			, SOUA.WORKWEEK
			, SOUA.APPLYDATE
			, SOUA.WORKTIME
			, SOUA.WORKCODE
			, SOUA.UNITTERM
			, SOUA.WORKAPPLYDATE
			, SOUA.MAXWORKTIME
			, SOUA.MAXWORKCODE
			, SOUA.MAXUNITTERM
			, SOUA.MAXWORKAPPLYDATE
			, SOUA.MAXWEEKWORKTIME
			, SOUA.VALIDYN
			, SOUA.REGISTERCODE
			, SOUA.REGISTDATE
			, SOUA.MODIFYERCODE
			, SOUA.MODIFYDATE
		) VALUES (
			A.LISTTYPE
			, A.USERCODE
			, A.WORKWEEK
			, A.APPLYDATE
			, A.WORKTIME
			, A.WORKCODE
			, A.UNITTERM
			, A.WORKAPPLYDATE
			, A.MAXWORKTIME
			, A.MAXWORKCODE
			, A.MAXUNITTERM
			, A.MAXWORKAPPLYDATE
			, A.MAXWEEKWORKTIME
			, A.VALIDYN
			, A.REGISTERCODE
			, A.REGISTDATE
			, A.MODIFYERCODE
			, A.MODIFYDATE
		)
	</insert>
<!-- 	<insert id="insertWorkInfo" parameterType="cmap" >
		INSERT INTO SYS_OBJECT_USER_ATTENDANCE (
			LISTTYPE
			, USERCODE
			, WORKWEEK
			, APPLYDATE
			, WORKTIME
			, WORKCODE
			, UNITTERM
			, WORKAPPLYDATE
			, MAXWORKTIME
			, MAXWORKCODE
			, MAXUNITTERM
			, MAXWORKAPPLYDATE
			, MAXWEEKWORKTIME
			, VALIDYN
			, REGISTERCODE
			, REGISTDATE
			, MODIFYERCODE
			, MODIFYDATE
		)
		<foreach collection="workInfoParams" item="info" open="" separator="UNION" close="">
			SELECT
				#{info.ListType} AS LISTTYPE
				, #{info.UserCode} AS USERCODE
				, #{info.WorkWeek} AS WORKWEEK
				, #{info.ApplyDate} AS APPLYDATE
				, #{info.WorkTime} AS WORKTIME
				, #{info.WorkCode} AS WORKCODE
				, #{info.UnitTerm} AS UNITTERM
				, #{info.WorkApplyDate} AS WORKAPPLYDATE
				, #{info.MaxWorkTime} AS MAXWORKTIME
				, #{info.MaxWorkCode} AS MAXWORKCODE
				, #{info.MaxUnitTerm} AS MAXUNITTERM
				, #{info.MaxWorkApplyDate} AS MAXWORKAPPLYDATE
				, #{info.MaxWeekWorkTime} AS MAXWEEKWORKTIME
				, #{info.ValidYn} AS VALIDYN
				, #{info.RegUserCode} AS REGISTERCODE
				, SYSDATE AS REGISTDATE
				, #{info.RegUserCode} AS MODIFYERCODE
				, SYSDATE AS MODIFYDATE
			FROM DUAL
		</foreach>
	</insert> -->
	
	<!-- 근로정보 등록 중복 확인 -->
	<select id="chkWorkInfo" parameterType="cmap" resultType="cmap">
		SELECT
			FN_BASEGETDICTIONARY_S(#{LANG},TARGETNAME) AS "TargetName"
			,SOUA.LISTTYPE AS "ListType"
		FROM SYS_OBJECT_USER_ATTENDANCE SOUA
		JOIN
		(
			SELECT
				*
			FROM (
				SELECT
					'' USERCODE
					, '' LISTTYPE
					, '' TARGETNAME
				FROM DUAL
		<if test='workInfoParams != null and workInfoParams.size != 0'>
			<foreach collection="workInfoParams" item="workInfo" open="UNION" separator="UNION">
				SELECT
					#{workInfo.UserCode} AS USERCODE
					, #{workInfo.ListType} AS LISTTYPE
					, #{workInfo.TargetName} AS TARGETNAME
				FROM DUAL
			</foreach>
		</if>
			) UR
			WHERE USERCODE != ''
		) A ON SOUA.USERCODE = A.USERCODE
		WHERE APPLYDATE = #{ApplyDate}
	</select>
	
	<delete id="deleteWorkInfo" parameterType="cmap">
		DELETE
		FROM SYS_OBJECT_USER_ATTENDANCE
		WHERE LISTTYPE = #{ListType}
			AND USERCODE = #{UserCode}
			AND APPLYDATE = #{ApplyDate}
	</delete>
	
	<!-- 회사 휴무일 조회 -->
	<select id="getHolidayList" parameterType="cmap" resultType="cmap">
		<include refid="oracle.include.pagingHeader" />
		SELECT
			COMPANYCODE AS "CompanyCode"
			, TO_CHAR(HOLIDAYSTART, 'YYYY-MM-DD') AS "HolidayStart"
			, TO_CHAR(HOLIDAYEND, 'YYYY-MM-DD') AS "HolidayEnd"
			, HOLIDAYNAME AS "HolidayName"
			, GOOGLEYN AS "GoogleYn"
			, ETC AS "Etc"
		FROM
			ATTEND_HOLIDAY_SCHEDULE
		WHERE
			COMPANYCODE = #{CompanyCode}
			<if test='year != null and year !=""'>
				AND	#{year} BETWEEN TO_CHAR(HOLIDAYSTART,'YYYY') AND TO_CHAR(HOLIDAYEND,'YYYY')
			</if>
			<if test='StartDate != null and StartDate != null'>
				AND
				((
					HOLIDAYSTART <![CDATA[ >= ]]> #{StartDate}
					AND
					HOLIDAYEND <![CDATA[ <= ]]> #{EndDate}
				) OR (
					HOLIDAYSTART BETWEEN  #{StartDate} AND #{EndDate}
				) OR (
					HOLIDAYEND BETWEEN  #{StartDate} AND #{EndDate}
				))
			</if>
			<if test='GoogleCheck != null and GoogleCheck !=""'>
			AND GOOGLEYN <![CDATA[ <> ]]>  'Y'
			</if>
			<if test='HolidayStart != null and HolidayStart !=""'>
			AND HOLIDAYSTART = #{HolidayStart}
			</if>
			<if test='HolidayEnd != null and HolidayEnd !=""'>
			AND HOLIDAYEND = #{HolidayEnd}
			</if>
			<if test='GoogleYn != null and GoogleYn !=""'>
			AND GOOGLEYN = #{GoogleYn}
			</if>
		<trim prefix='ORDER BY'>
			<if test='sortColumn != null and sortDirection != null'>
				<choose>
					<when test='sortColumn.equalsIgnoreCase("HolidayStart")'>"HolidayStart"</when>
					<when test='sortColumn.equalsIgnoreCase("HolidayEnd")'>"HolidayEnd"</when>
					<when test='sortColumn.equalsIgnoreCase("HolidayName")'>"HolidayName"</when>
					<when test='sortColumn.equalsIgnoreCase("Etc")'>"Etc"</when>
					<otherwise>"HolidayStart"</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>

	<select id="getHolidayListCnt" parameterType="cmap" resultType="java.lang.Long">
		SELECT
			COUNT(*) AS "cnt"
		FROM
			ATTEND_HOLIDAY_SCHEDULE
		WHERE
			COMPANYCODE = #{CompanyCode}
			<if test='year != null and year !=""'>
				AND	#{year} BETWEEN TO_CHAR(HOLIDAYSTART,'YYYY') AND TO_CHAR(HOLIDAYEND,'YYYY')
			</if>
			<if test='StartDate != null and StartDate != null'>
				AND
				((
					HOLIDAYSTART <![CDATA[ >= ]]> #{StartDate}
					AND
					HOLIDAYEND <![CDATA[ <= ]]> #{EndDate}
					) OR (
					HOLIDAYSTART BETWEEN  #{StartDate} AND #{EndDate}
					) OR (
					HOLIDAYEND BETWEEN  #{StartDate} AND #{EndDate}
				))
			</if>
			<if test='GoogleCheck != null and GoogleCheck !=""'>
				AND GOOGLEYN <![CDATA[ <> ]]>  'Y'
			</if>
			<if test='HolidayStart != null and HolidayStart !=""'>
				AND HOLIDAYSTART = #{HolidayStart}
			</if>
			<if test='HolidayEnd != null and HolidayEnd !=""'>
				AND HOLIDAYEND = #{HolidayEnd}
			</if>
			<if test='GoogleYn != null and GoogleYn !=""'>
				AND GOOGLEYN = #{GoogleYn}
			</if>
	</select>
	
	<!-- 회사 휴무일 등록 -->
	<insert id="createHoliday" parameterType="cmap">
		MERGE INTO ATTEND_HOLIDAY_SCHEDULE
		USING DUAL
		ON (COMPANYCODE = #{CompanyCode} AND HOLIDAYSTART = #{HolidayStart} AND HOLIDAYEND = #{HolidayEnd})
		WHEN MATCHED THEN
		UPDATE SET
			MODIFYERCODE = #{UserCode}
			, MODIFYDATE = SYSDATE
			, GOOGLEYN = #{GoogleYn}
			<!-- 키 부분이라 수정이 불가, 고치면 신규 데이터로 등록 된다.
			<if test="HolidayStart != null and HolidayStart != ''">
			, HOLIDAYSTART = #{HolidayStart}
			</if>
			<if test="HolidayEnd != null and HolidayEnd != ''">
			, HOLIDAYEND = #{HolidayEnd}
			</if>
			-->
			<if test="HolidayName != null and HolidayName != ''">
			, HOLIDAYNAME = #{HolidayName}
			</if>
			<if test="Etc != null and Etc != ''">
			, ETC = #{Etc}
			</if>
		WHEN NOT MATCHED THEN
		INSERT
		(
			COMPANYCODE
			, HOLIDAYSTART
			, HOLIDAYEND
			, HOLIDAYNAME
			, ETC
			, GOOGLEYN
			, REGISTERCODE
			, REGISTDATE
			, MODIFYERCODE
			, MODIFYDATE
		) VALUES (
			#{CompanyCode}
			, #{HolidayStart}
			, #{HolidayEnd}
			, #{HolidayName}
			, #{Etc}
			, #{GoogleYn}
			, #{UserCode}
			, SYSDATE
			, #{UserCode}
			, SYSDATE
		)
	</insert>
	
	<!-- 회사 휴무일 삭제 -->
	<delete id="deleteHoliday" parameterType="cmap">
		DELETE FROM ATTEND_HOLIDAY_SCHEDULE
		WHERE COMPANYCODE = #{CompanyCode}
		AND HOLIDAYSTART =  #{HolidayStart}
	</delete>
	
	<!-- 기타근무상태 리스트 조회 -->
	<select id="getOtherJobList" parameterType="cmap" resultType="cmap">
		<include refid="oracle.include.pagingHeader" />
		SELECT
			AMJS.JOBSTSSEQ AS "JobStsSeq"
			, AMJS.JOBSTSNAME AS "JobStsName"
			, AMJS.VALIDYN AS "ValidYn"
			, AMJS.MEMO AS "Memo"
			, AMJS.REQMETHOD AS "ReqMethod"
			, AMJS.MultiDisplayName AS "MultiDisplayName"
		FROM ATTEND_JOB_STATUS AMJS
			JOIN ATTEND_MST AMM
				ON AMM.ATTSEQ = AMJS.ATTSEQ AND AMM.COMPANYCODE = #{CompanyCode}
		WHERE 1 = 1
			<if test="JobStsSeq != null and JobStsSeq != ''">
			AND JOBSTSSEQ = #{JobStsSeq}
			</if>
			<if test="ValidYn != null and ValidYn != ''">
			AND AMJS.VALIDYN = #{ValidYn}
			</if>
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "allSearch"'>
						AND amjs.JobStsName LIKE '%'||#{schTxt}||'%'
						OR amjs.Memo LIKE '%'||#{schTxt}||'%'
					</when>
					<when test='schTypeSel == "workType"'>
						AND amjs.JobStsName LIKE '%'||#{schTxt}||'%'
					</when>
					<when test='schTypeSel == "memo"'>
						AND amjs.Memo LIKE '%'||#{schTxt}||'%'
					</when>
				</choose>
			</if>
		<trim prefix='ORDER BY'>
			<if test='sortColumn != null and sortDirection != null'>
				<choose>
					<when test='sortColumn.equalsIgnoreCase("JobStsSeq")'>"JobStsSeq"</when>
					<when test='sortColumn.equalsIgnoreCase("JobStsName")'>"JobStsName"</when>
					<when test='sortColumn.equalsIgnoreCase("ValidYn")'>"ValidYn"</when>
					<when test='sortColumn.equalsIgnoreCase("Memo")'>"Memo"</when>
					<when test='sortColumn.equalsIgnoreCase("ReqMethod")'>"ReqMethod"</when>
					<otherwise>"JobStsSeq"</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>

	<select id="getOtherJobListCnt" parameterType="cmap" resultType="java.lang.Long">
		SELECT 
			COUNT(1) AS "cnt"
		FROM ATTEND_JOB_STATUS AMJS
			JOIN ATTEND_MST AMM
			ON AMM.ATTSEQ = AMJS.ATTSEQ AND AMM.COMPANYCODE = #{CompanyCode}
		WHERE 1=1
			<if test="JobStsSeq != null and JobStsSeq != ''">
			AND JOBSTSSEQ = #{JobStsSeq}
			</if>
			<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
				<choose>
					<when test='schTypeSel == "allSearch"'>
						AND amjs.JobStsName LIKE '%'||#{schTxt}||'%'
						OR amjs.Memo LIKE '%'||#{schTxt}||'%'
					</when>
					<when test='schTypeSel == "workType"'>
						AND amjs.JobStsName LIKE '%'||#{schTxt}||'%'
					</when>
					<when test='schTypeSel == "memo"'>
						AND amjs.Memo LIKE '%'||#{schTxt}||'%'
					</when>
				</choose>
			</if>
	</select>
	
	<insert id="setOtherJob" parameterType="cmap">
		MERGE INTO ATTEND_JOB_STATUS
		USING DUAL
		ON (JOBSTSSEQ = #{JobStsSeq})
		WHEN MATCHED THEN
		UPDATE SET
			MODIFYERCODE = #{RegUserCode}
			, MODIFYDATE = SYSDATE
			<if test="JobStsName != null and JobStsName != ''">
			, JOBSTSNAME = #{JobStsName}
			</if>
			<if test="MultiDisplayName != null and MultiDisplayName != ''">
			, MultiDisplayName = #{MultiDisplayName}
			</if>
			<if test="Memo != null and Memo != ''">
			, MEMO = #{Memo}
			</if>
			<if test="ValidYn != null and ValidYn != ''">
			, VALIDYN = #{ValidYn}
			</if>
			<if test="ReqMethod != null and ReqMethod != ''">
			, REQMETHOD = #{ReqMethod}
			, UPDMETHOD = #{ReqMethod}
			, DELMETHOD = #{ReqMethod}
			</if>
		WHEN NOT MATCHED THEN
		INSERT
		(
			JOBSTSSEQ
			, ATTSEQ
			, JOBSTSNAME
			, MultiDisplayName
			, MEMO
			, COMPANYCODE
			, VALIDYN
			, REQMETHOD
			, UPDMETHOD
			, DELMETHOD
			, REGISTERCODE
			, REGISTDATE
			, MODIFYERCODE
			, MODIFYDATE
		) VALUES (
			ATTEND_JOB_STATUS_SEQ.NEXTVAL
			, (SELECT ATTSEQ FROM ATTEND_MST WHERE COMPANYCODE = #{CompanyCode})
			, #{JobStsName}
			, #{MultiDisplayName}
			, #{Memo}
			, #{CompanyCode}
			,'Y'
			, #{ReqMethod}
			, #{ReqMethod}
			, #{ReqMethod}
			, #{RegUserCode}
			, SYSDATE
			, #{RegUserCode}
			, SYSDATE
		)
	</insert>
	
	<delete id="deleteOtherJob" parameterType="cmap">
		DELETE
		FROM ATTEND_JOB_STATUS
		WHERE JOBSTSSEQ = #{JobStsSeq}
	</delete>

	<!-- 근무지 목록 조회 전체 갯수 -->
	<select id="getWorkPlaceListCnt"  resultType="java.lang.Long">
		SELECT
		COUNT(*) as cnt
		FROM
		(
		SELECT
		LocationSeq, CompanyCode, WorkZoneGroupNm, WorkZone, WorkAddr, WorkPointX, WorkPointY, AllowRadius, ValidYn
		FROM
		attend_workplace
		WHERE 1=1
		<if test ="CompanyCode != null and CompanyCode !=''">
			AND CompanyCode = #{CompanyCode}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "WorkZoneGroupNm"'>
					AND WorkZoneGroupNm LIKE CONCAT('%', #{schTxt}, '%')
				</when>
				<when test='schTypeSel == "workZoneAddr"'>
					AND WorkAddr LIKE CONCAT('%', #{schTxt}, '%')
				</when>
				<otherwise>
					AND WorkZone LIKE CONCAT('%', #{schTxt}, '%')
				</otherwise>
			</choose>
		</if>
		)
	</select>
	<!-- 근무지 목록 조회 -->
	<select id="getWorkPlaceList" parameterType="cmap" resultType="cmap">

		<include refid="oracle.include.pagingHeader" />
		SELECT
		LocationSeq as "LocationSeq"
		,CompanyCode as "CompanyCode"
		,WorkZoneGroupNm as "WorkZoneGroupNm"
		,WorkZone as "WorkZone"
		,WorkAddr as "WorkAddr"
		,WorkPointX as "WorkPointX"
		,WorkPointY as "WorkPointY"
		,AllowRadius as "AllowRadius"
		,ValidYn as "ValidYn"
		FROM
		attend_workplace
		WHERE 1=1
		<if test ="CompanyCode != null and CompanyCode !=''">
			AND CompanyCode = #{CompanyCode}
		</if>
		<if test='schTypeSel != null and schTypeSel !="" and schTxt != null and schTxt !=""'>
			<choose>
				<when test='schTypeSel == "WorkZoneGroupNm"'>
					AND WorkZoneGroupNm LIKE CONCAT('%', #{schTxt}, '%')
				</when>
				<when test='schTypeSel == "workZoneAddr"'>
					AND WorkAddr LIKE CONCAT('%', #{schTxt}, '%')
				</when>
				<otherwise>
					AND WorkZone LIKE CONCAT('%', #{schTxt}, '%')
				</otherwise>
			</choose>
		</if>
		<!-- Order by 절 -->
		<trim prefix="ORDER BY" >
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection !='' ">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("WorkZoneGroupNm")'>WorkZoneGroupNm</when>
					<when test='sortColumn.equalsIgnoreCase("WorkZone")'>WorkZoneGroupNm ASC, WorkZone</when>
					<when test='sortColumn.equalsIgnoreCase("WorkAddr")'>WorkZoneGroupNm ASC, WorkAddr</when>
					<when test='sortColumn.equalsIgnoreCase("AllowRadius")'>WorkZoneGroupNm ASC, AllowRadius</when>
					<when test='sortColumn.equalsIgnoreCase("ValidYn")'>WorkZoneGroupNm ASC, ValidYn</when>
					<otherwise>WorkZoneGroupNm ASC, WorkZone</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<when test='sortDirection.equalsIgnoreCase("DESC")'> DESC</when>
					<otherwise> ASC</otherwise>
				</choose>
			</if>
		</trim>

		<include refid="oracle.include.pagingFooter" />
	</select>

	<insert id="insertWorkPlace" parameterType="cmap">
		<!--//LocationSeq, CompanyCode, WorkZone, WorkAddr, WorkPointX, WorkPointY, AllowRadius, ValidYn-->
		INSERT INTO attend_workplace
		(
		LOCATIONSEQ
		,CompanyCode
		,WorkZoneGroupNm
		,WorkZone
		,WorkAddr
		,WorkPointX
		,WorkPointY
		,AllowRadius
		,ValidYn
		)VALUES(
		ATTEND_WORKPLACE_SEQ.nextval
		,#{CompanyCode}
		,#{WorkZoneGroupNm}
		,#{WorkZone}
		,#{WorkAddr}
		,#{WorkPointX}
		,#{WorkPointY}
		,#{AllowRadius}
		,#{ValidYn}
		)
	</insert>

	<update id="updateWorkPlace" parameterType="cmap">
		UPDATE attend_workplace SET
		CompanyCode = #{CompanyCode}
		,WorkZoneGroupNm = #{WorkZoneGroupNm}
		,WorkZone = #{WorkZone}
		,WorkAddr = #{WorkAddr}
		,WorkPointX = #{WorkPointX}
		,WorkPointY = #{WorkPointY}
		,AllowRadius = #{AllowRadius}
		,ValidYn = #{ValidYn}
		WHERE LocationSeq = #{LocationSeq}
	</update>

	<delete id="deleteWorkPlace" parameterType="cmap">
		DELETE FROM attend_workplace
		WHERE LocationSeq = #{LocationSeq}
	</delete>

	<select id="selectAttendMaxBaseDate" parameterType="cmap" resultType="cmap">
		/* queryID : attend.adminSetting.selectAttendMaxBaseDate */
		SELECT 	TO_CHAR(MAX(DAYLIST), 'YYYY.mm.dd') AS "DayList"
		FROM 	ATTEND_DAYLIST
	</select>
	
	<insert id="insertAttendBaseDate" parameterType="cmap">
		/* queryID : attend.adminSetting.insertAttendBaseDate */
		INSERT INTO ATTEND_DAYLIST (DAYLIST, WEEKD) VALUES 
		( 	TO_DATE(#{lastDate}) + #{nextDay}
			, CASE WHEN TO_NUMBER(TO_CHAR(TO_DATE(#{lastDate}) + #{nextDay}, 'D')) = 1 THEN 6 
            	ELSE TO_NUMBER(TO_CHAR(TO_DATE(#{lastDate}) + #{nextDay}, 'D')) -2 
            	END
		)
	</insert>
	
</mapper>

