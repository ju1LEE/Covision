<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="attend.commute">

	<!-- 출퇴근 MST TABLE DATA CHECK -->
	<select id="getCommuteMstSeq" parameterType="cmap" resultType="String">
		SELECT
			COMMUSEQ AS "CommuSeq"
		FROM ATTEND_COMMUTING_MST ACM
		WHERE COMPANYCODE = #{CompanyCode}
			AND USERCODE = #{UserCode}
			AND TARGETDATE = #{TargetDate}
			AND ROWNUM = 1
	</select>
	
	<select id="getCommuteMstData" parameterType="cmap" resultType="cmap">
		/* attend.commute.getCommuteMstData */
		SELECT
			COMMUSEQ AS "CommuSeq"
			, USERCODE AS "UserCode"
			, TO_CHAR(TARGETDATE, 'YYYY-MM-DD') AS "TargetDate"
			, ETC AS "Etc"
			, COMPANYCODE AS "CompanyCode"
			, TARDYREASON AS "TardyReason"
			, USERETC AS "UserEtc"
			, LEAVEEARLYREASON AS "LeaveEarlyReason"
			, REGISTERCODE AS "RegisterCode"
			, REGISTDATE AS "RegistDate"
			, MODIFYERCODE AS "ModifyerCode"
			, MODIFYDATE AS "ModifyDate"
			, FIXWORKTIME AS "FixWorkTime"
			, MAXWORKTIME AS "MaxWorkTime"
			, ATTSTARTTIME AS "AttStartTime"
			, ATTENDTIME AS "AttEndTime"
			, ATTREAL AS "AttReal"
			, ATTAC AS "AttAC"
			, ATTIDLE AS "AttIdle"
			, EXTENREAL AS "ExtenReal"
			, EXTENAC AS "ExtenAC"
			, HOLIDAYYN AS "HolidayYn"
			, ATTCONFIRMYN AS "AttConfirmYn"
			, ATTCONFIRMTIME AS "AttConfirmTime"
			, STARTSTS AS "StartSts"
			, ENDSTS AS "EndSts"
			, STARTPOINTX AS "StartPointX"
			, STARTPOINTY AS "StartPointY"
			, ENDPOINTX AS "EndPointX"
			, ENDPOINTY AS "EndPointY"
			, TO_CHAR(ATTSTARTTIME, 'HH24:MI:SS') AS "StartTime"
			, TO_CHAR(ATTENDTIME, 'HH24:MI:SS') AS "EndTime"
			, CASE
				WHEN ENDSTS = 'lbl_n_att_callingTarget' THEN 'Y'
				ELSE
					CASE
						WHEN ((TO_DATE(#{TargetDateTime}, 'YYYY-MM-DD HH24:MI:SS') - ATTENDTIME) * (24 * 60)) >= A.SETTINGVALUE THEN 'Y'
						ELSE
							CASE
								WHEN ENDCHANGEYN = 'Y' THEN 'Y'
								ELSE 'N'
							END
					END
			END AS "AttendStatus"
		FROM ATTEND_COMMUTING_MST ACM
			, (
				SELECT SETTINGVALUE
				FROM SYS_BASE_CONFIG B
					JOIN SYS_OBJECT_DOMAIN D ON B.DOMAINID = D.DOMAINID
				WHERE D.DOMAINCODE = #{CompanyCode} AND SETTINGKEY = 'CommuteOutTerm'
			) A /* 퇴근 유예시간 */
		WHERE COMPANYCODE = #{CompanyCode}
			AND USERCODE = #{UserCode}
		<choose>
			<when test='EndTimeIsNull eq "Y" '>
				AND TARGETDATE BEETWEEN (#{TargetDate} - INTERVAL '2' DAY) AND #{TargetDate}
				AND STARTSTS IS NOT NULL
				AND ENDSTS IS NULL
			</when>
			<otherwise>
				AND TARGETDATE = #{TargetDate}
				AND ( (STARTSTS IS NOT NULL AND STARTSTS != 'lbl_ApprovalDeny' ) OR EndSts IS NOT 
			</otherwise>
		</choose>
	</select>

	<!-- 출퇴근 MST TABLE DATA INSERT -->
	<insert id="setCommuteMst" parameterType="cmap">
		MERGE INTO ATTEND_COMMUTING_MST
		USING DUAL
		ON (USERCODE = #{UserCode} AND TARGETDATE = #{TargetDate} AND COMPANYCODE = #{CompanyCode})
		WHEN MATCHED THEN
		UPDATE SET
			MODIFYERCODE = #{RegUserCode}
			, MODIFYDATE = SYSDATE
		WHEN NOT MATCHED THEN
		INSERT (
			COMMUSEQ                  /* 출퇴근SEQ */
			, USERCODE                 /* 사용자코드 */
			, TARGETDATE               /* 근무일 */
			, COMPANYCODE              /* 회사코드 */
			, REGISTERCODE             /* 등록자ID */
			, REGISTDATE               /* 등록일 */
			, MODIFYERCODE             /* 수정자ID */
			, MODIFYDATE               /* 수정일 */
		) VALUES (
			ATTEND_COMMUTING_MST_SEQ.NEXTVAL
			, #{UserCode}
			, #{TargetDate}
			, #{CompanyCode}
			, #{RegUserCode}
			, SYSDATE
			, #{RegUserCode}
			, SYSDATE
		)
		<selectKey resultType="cmap" keyProperty="CommuSeq" order="AFTER">
			SELECT COMMUSEQ AS "CommuSeq"
			FROM ATTEND_COMMUTING_MST
			WHERE USERCODE = #{UserCode} AND TARGETDATE = #{TargetDate} AND COMPANYCODE = #{CompanyCode}
		</selectKey> 
	</insert>
	
	<!-- 근무 일정 등록 정보 조회 -->
	<select id="getMngJob" parameterType="cmap" resultType="cmap">
		SELECT
			SCHSEQ AS "SchSeq"
			, USERCODE AS "UserCode"
			, TO_CHAR(JOBDATE, 'YYYY-MM-DD') AS "JobDate"
			, WORKSTS AS "WorkSts"
			, TO_CHAR(ATTDAYSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttDayStartTime"
			, TO_CHAR(ATTDAYENDTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttDayEndTime"
			, NEXTDAYYN AS "NextDayYn"
			, CONFMYN AS "ConfmYn"
			, ATTDAYAC AS "AttDayAC"
			, WORKTIME AS "WorkTime"
			, WORKCODE AS "WorkCode"
			, UNITTERM AS "UnitTerm"
			, MAXWORKTIME AS "MaxWorkTime"
			, MAXWORKCODE AS "MaxWorkCode"
			, MAXUNITTERM AS "MaxUnitTerm"
			, ASSYN AS "AssYn"
			, WORKZONE AS "WorkZone"
			, WORKADDR AS "WorkAddr"
			, WORKPOINTX AS "WorkPointX"
			, WORKPOINTY AS "WorkPointY"
			, ALLOWRADIUS AS "AllowRadius"
			, STARTZONE AS "StartZone"
			, STARTADDR AS "StartAddr"
			, STARTPOINTX AS "StartPointX"
			, STARTPOINTY AS "StartPointY"
			, ENDZONE AS "EndZone"
			, ENDADDR AS "EndAddr"
			, ENDPOINTX AS "EndPointX"
			, ENDPOINTY AS "EndPointY"
			, ETC AS "Etc"
			, NVL(AUTOEXTENYN, 'N') AS "AutoExtenYn"
			, AUTOEXTENMINTIME AS "AutoExtenMinTime"
			, AUTOEXTENMAXTIME AS "AutoExtenMaxTime"
		FROM (
			SELECT
				AMJ.SCHSEQ
				, USERCODE
				, JOBDATE
				, WORKSTS
				, AMJ.ATTDAYSTARTTIME
				, AMJ.ATTDAYENDTIME
				, AMJ.NEXTDAYYN
				, CONFMYN
				, AMJ.ATTDAYAC
				, WORKTIME
				, WORKCODE
				, UNITTERM
				, MAXWORKTIME
				, MAXWORKCODE
				, MAXUNITTERM
				, AMJ.ASSYN
				, AMJ.WORKZONE
				, AMJ.WORKADDR
				, AMJ.WORKPOINTX
				, AMJ.WORKPOINTY
				, AMJ.ALLOWRADIUS
				, STARTZONE
				, STARTADDR
				, STARTPOINTX
				, STARTPOINTY
				, ENDZONE
				, ENDADDR
				, ENDPOINTX
				, ENDPOINTY
				, ETC
				, AUTOEXTENYN
				, AUTOEXTENMINTIME
				, AUTOEXTENMAXTIME
			FROM ATTEND_JOB AMJ
				LEFT JOIN ATTEND_SCHEDULE AMS ON AMJ.SCHSEQ = AMS.SCHSEQ
			WHERE AMJ.COMPANYCODE = #{CompanyCode}
				AND USERCODE = #{UserCode}
				<choose>
					<when  test='StartTime != null and StartTime != ""'>
						AND (
							((SELFCOMMYN = 'Y' OR AMJ.WORKSTS != 'ON') AND JOBDATE = #{TargetDate})
							OR (SELFCOMMYN != 'Y' AND AMJ.WORKSTS = 'ON'
						 	AND (TO_DATE(#{StartTime}, 'YYYY-MM-DD HH24:MI:SS') BETWEEN (AMJ.ATTDAYSTARTTIME - INTERVAL '9' HOUR) AND (AMJ.ATTDAYSTARTTIME + INTERVAL '9' HOUR)))
						)
					</when>
					<otherwise>
						AND JOBDATE = #{TargetDate}
					</otherwise>
				</choose>
			ORDER BY JOBDATE DESC
		) A
		WHERE
			ROWNUM = 1
	</select>
	
	<!-- 출퇴근 history 저장 -->
	<insert id="setCommuteHistory" parameterType="cmap">
		INSERT INTO ATTEND_COMMUTING_HISTORY (
			HISSEQ
			, COMMUSEQ
			, SCHSEQ
			, TARGETDATE
			, ATTDAYSTS
			, ATTDAYSTARTTIME
			, ATTDAYENDTIME
			, ATTDAYAC
			, ATTDAYIDLE
			, STARTTIME
			, STARTSTS
			, STARTCHANNEL
			, STARTPOINTX
			, STARTPOINTY
			, STARTADDR
			, ENDTIME
			, ENDSTS
			, ENDCHANNEL
			, ENDPOINTX
			, ENDPOINTY
			, ENDADDR
			, USERCODE
			, COMPANYCODE
			, STARTIPADDR
			, ENDIPADDR
			, REGISTERCODE
			, REGISTDATE
			, MODIFYERCODE
			, MODIFYDATE
			, STARTCHANGEYN
			, ENDCHANGEYN
		) VALUES (
			ATTEND_COMMUTING_HISTORY_SEQ.NEXTVAL
			, #{CommuSeq}
			, #{SchSeq}
			, #{TargetDate}
			, #{AttDaySts}
			, TO_DATE(#{AttDayStartTime}, 'YYYY-MM-DD HH24:MI:SS')
			, TO_DATE(#{AttDayEndTime}, 'YYYY-MM-DD HH24:MI:SS')
			, #{AttDayAc}
			, ((TO_DATE(#{AttDayEndTime}, 'YYYY-MM-DD HH24:MI:SS') - TO_DATE(#{AttDayStartTime}, 'YYYY-MM-DD HH24:MI:SS')) * (24 * 60)) - #{AttDayAc}
			, TO_DATE(#{StartTime}, 'YYYY-MM-DD HH24:MI:SS')
			, FN_ATTEND_COMMUTE_STATUS('S', #{UserCode}, #{TargetDate}, TO_DATE(#{StartTime}, 'YYYY-MM-DD HH24:MI:SS'), #{CompanyCode})
			, #{StartChannel}
			, #{StartPointX}
			, #{StartPointY}
			, #{StartAddr}
			, TO_DATE(#{EndTime}, 'YYYY-MM-DD HH24:MI:SS')
			, FN_ATTEND_COMMUTE_STATUS('E', #{UserCode}, #{TargetDate}, TO_DATE(#{EndTime}, 'YYYY-MM-DD HH24:MI:SS'), #{CompanyCode})
			, #{EndChannel}
			, #{EndPointX}
			, #{EndPointY}
			, #{EndAddr}
			, #{UserCode}
			, #{CompanyCode}
			, #{StartIpAddr}
			, #{EndIpAddr}
			, #{RegUserCode}
			, SYSDATE
			, #{RegUserCode}
			, SYSDATE
			, #{StartChangeYn}
			, #{EndChangeYn}
		)
	</insert>
	
	<!-- history 출근시간 조회 -->
	<select id="getCommuteStartData" parameterType="cmap" resultType="cmap">
		SELECT
			USERCODE AS "UserCode"
			, ACH.STARTTIME AS "StartTime"
			, STARTPOINTX AS "StartPointX"
			, STARTPOINTY AS "StartPointY"
			, STARTADDR AS "StartAddr"
		FROM ATTEND_COMMUTING_HISTORY ACH
			JOIN (
				SELECT
					ACM.COMMUSEQ
					, USERCODE
					, MIN(STARTTIME) STARTTIME
				FROM ATTEND_COMMUTING_MST ACM
					JOIN ATTEND_COMMUTING_HISTORY ACH
						ON ACM.COMMUSEQ = ACH.COMMUSEQ
							AND ACM.TARGETDATE = #{TargetDate}
							AND ACM.USERCODE = #{UserCode}
				GROUP BY COMMUSEQ
			) A
				ON ACH.COMMUSEQ = A.COMMUSEQ
					AND ACH.STARTTIME = A.STARTTIME
	</select>

	<!-- history 퇴근시간 조회 -->
	<select id="getCommuteEndData" parameterType="cmap" resultType="cmap">
		SELECT
			USERCODE AS "UserCode"
			, ACH.ENDTIME AS "EndTime"
			, ENDPOINTX AS "EndPointX"
			, ENDPOINTY AS "EndPointY"
			, ENDADDR AS "EndAddr"
		FROM ATTEND_COMMUTING_HISTORY ACH
			JOIN (
				SELECT
					ACM.COMMUSEQ
					, USERCODE
					, MAX(ENDTIME) ENDTIME
				FROM ATTEND_COMMUTING_MST ACM
					JOIN ATTEND_COMMUTING_HISTORY ACH
						ON ACM.COMMUSEQ = ACH.COMMUSEQ
							AND ACM.TARGETDATE = #{TargetDate}
							AND ACM.USERCODE = #{UserCode}
				GROUP BY COMMUSEQ
			) A
				ON ACH.COMMUSEQ = A.COMMUSEQ
					AND ACH.ENDTIME = A.ENDTIME
	</select>
	
	<!-- 소명대상 리스트 조회 -->
	<select id="getCallingTargetList" parameterType="cmap" resultType="cmap">
		SELECT
			COMMUSEQ AS "CommuSeq"
			, M.TARGETDATE AS "TargetDate"
			, M.USERCODE AS "UserCode"
			, CASE
				WHEN STARTSTS IS NULL THEN 'Y'
				ELSE 'N'
			END AS "CallingStart"
			, CASE
				WHEN ENDSTS IS NULL AND USERDATETIME <![CDATA[ >= ]]> NVL(ATTDAYENDTIME, TO_DATE(TARGETDATE||' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')) THEN 'Y'
				ELSE 'N'
			END AS  "CallingEnd"
			, NVL((
				SELECT SUM(VACDAY) AS VACDAY
				FROM VM_VACATIONINFO_DAY
				WHERE UR_CODE = M.USERCODE
					AND TO_DATE(M.TARGETDATE, 'YYYY-MM-DD') = VACDATE
				GROUP BY UR_CODE, VACDATE
			), 0) AS "VacDay"
		FROM ATTEND_COMMUTING_MST M
			JOIN(
				SELECT
					U.USERCODE OUSERCODE
					, SYSDATE + TO_DSINTERVAL('0 '||NVL(C.RESERVED1, '00:00:00')) AS USERDATETIME
				FROM SYS_OBJECT_USER U
					LEFT JOIN SYS_BASE_CODE C ON U.TIMEZONECODE = C.CODE
				WHERE USERCODE =  #{UserCode}
			) U ON M.USERCODE = U.OUSERCODE
		WHERE TARGETDATE <![CDATA[ < ]]> #{TargetDate}
			AND COMPANYCODE = #{CompanyCode}
			AND ((STARTSTS IS NOT NULL AND ENDSTS IS NULL)
			OR (ENDSTS IS NOT NULL AND STARTSTS IS NULL))
	</select>
	
	<!-- 소명대상 업데이트 -->
	<update id="updCallingData" parameterType="cmap">
		UPDATE ATTEND_COMMUTING_MST SET
			MODIFYERCODE             = 'system'
			, MODIFYDATE              = SYSDATE
			<if test='CallingStart eq "Y" '>
				<choose>
					<when test="VacDay lt 1">
						,STARTSTS = 'lbl_n_att_callingTarget'
					</when>
					<otherwise>
						,STARTSTS = 'lbl_att_goWork'
					</otherwise>
				</choose>
			</if>
			<if test='CallingEnd eq "Y" '>
				<choose>
					<when test="VacDay lt 1">
						,ENDSTS = 'lbl_n_att_callingTarget'
					</when>
					<otherwise>
						,ENDSTS = 'lbl_att_offWork'
					</otherwise>
				</choose>
			</if>
		WHERE COMMUSEQ = #{CommuSeq}
	</update>
	
	<!-- 풀퇴근 mst 업데이트 proc -->
	<update id="setCommuteMstProc" statementType="CALLABLE" parameterType= "cmap" >
	 	{CALL SP_ATTEND_SETCOMMUTEMST(#{UserCode},#{TargetDate},#{CompanyCode})}
	</update>
	
	<!-- 출퇴근 정보 업데이트 -->
	<update id="setAttCommuteMng" parameterType="cmap" > 
		UPDATE ATTEND_COMMUTING_MST SET
			MODIFYERCODE            = #{RegUserCode}
			, MODIFYDATE            = SYSDATE
			, ETC              		= #{Etc}
			, USERETC              	= #{UserEtc}
			<if test="StartDate != null and StartDate != ''">
				, ATTSTARTTIME		= TO_DATE(#{StartDate}, 'YYYY-MM-DD HH24:MI:SS')
				, STARTSTS			= FN_ATTEND_COMMUTE_STATUS('S',#{UserCode},#{TargetDate},TO_DATE(#{StartDate}, 'YYYY-MM-DD HH24:MI:SS'),#{CompanyCode})
				, STARTCHANGEYN 	= 'Y'
				, STARTPOINTX 		= #{StartPointX}
				, STARTPOINTY 		= #{StartPointY}
				, STARTADDR			= #{StartAddr}
			</if>
			<if test="EndDate != null and EndDate != ''">	
				, ATTENDTIME		= TO_DATE(#{EndDate}, 'YYYY-MM-DD HH24:MI:SS')
				, ENDSTS			= FN_ATTEND_COMMUTE_STATUS('E',#{UserCode},#{TargetDate},TO_DATE(#{EndDate}, 'YYYY-MM-DD HH24:MI:SS'),#{CompanyCode})
				, ENDCHANGEYN 		= 'Y'
				, ENDPOINTX 		= #{EndPointX}
				, ENDPOINTY 		= #{EndPointY}
				, ENDADDR 			= #{EndAddr}
			</if>
		WHERE COMMUSEQ = #{CommuSeq}
	</update>	
	
	<delete id="delAttCommuteMng" parameterType="cmap" >
		DELETE FROM ATTEND_COMMUTING_MST
		WHERE USERCODE = #{UserCode}
			AND TARGETDATE = #{TargetDate}
	</delete>

	<select id="getWorkPlaceList" parameterType="cmap" resultType="cmap" >
		SELECT
			B.LOCATIONSEQ AS "LocationSeq"
			, B.WORKZONE AS "WorkZone"
			, B.WORKZONEGROUPNM AS "WorkZoneGroupNm"
			, B.WORKADDR AS "WorkAddr"
			, B.ALLOWRADIUS AS "AllowRadius"
			, B.WORKPOINTX AS "WorkPointX"
			, B.WORKPOINTY AS "WorkPointY"
		FROM ATTEND_SCHEDULE_WORKPLACE A
			INNER JOIN ATTEND_WORKPLACE B ON A.LOCATIONSEQ = B.LOCATIONSEQ
		WHERE
			A.SCHSEQ = #{SchSeq}
			AND A.WORKPLACETYPE = #{WorkPlaceType}
	</select>
	
	<update id="updateAllCommute" parameterType="cmap">
		UPDATE ATTEND_COMMUTING_MST
		<trim prefix="SET" prefixOverrides=",">
			<if test='IsGoWork != null and IsGoWork == "Y"'>
				, STARTREPORTERID = #{RegUserCode}
				, STARTREPORTDATE = SYSDATE
			</if>
			<if test='IsOffWork != null and IsOffWork == "Y"'>
				, ENDREPORTERID = #{RegUserCode}
				, ENDREPORTDATE = SYSDATE
			</if>
		</trim>
		WHERE COMMUSEQ = #{CommuSeq}
	</update>

	<select id="selectJobScheduleSeq" parameterType="cmap"  resultType="String">
		/* attend.commute.selectJobScheduleSeq */
		SELECT
		SchSeq AS "SchSeq"
		FROM (
			SELECT SchSeq
			FROM attend_job amj
			WHERE amj.CompanyCode = #{CompanyCode}
			AND amj.JobDate = #{TargetDate}
			AND amj.UserCode = #{UserCode}
		)
		WHERE
		ROWNUM = 1
	</select>

	<select id="selectBaseScheduleSeq" parameterType="cmap"  resultType="String">
		/* attend.commute.selectBaseScheduleSeq */
		SELECT
			SchSeq AS "SchSeq"
		FROM (
			SELECT SchSeq
			FROM attend_schedule ams
			WHERE ams.CompanyCode = #{CompanyCode}
			AND ams.ValidYn = 'Y'
			AND ams.BaseYn = 'Y'
		)
		WHERE
		ROWNUM = 1
	</select>
</mapper>
