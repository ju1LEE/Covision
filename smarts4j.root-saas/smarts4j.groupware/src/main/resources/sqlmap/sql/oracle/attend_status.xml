<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="attend.status">
	
	<!-- 대상일 조회 -->
	<select id="getDayScope" parameterType="cmap" resultType="string">
		SELECT
			FN_ATTEND_GETDAYSCOPE(#{DateTerm},#{TargetDate},#{CompanyCode}) AS "dayScope"
		FROM DUAL
	</select>
	
	<!-- 근태현황 출퇴근 정보 조회 -->
	<select id="getUserAttStatusProc" statementType="CALLABLE"  parameterType="cmap" resultType="cmap">
		SELECT
			TO_CHAR(DAYLIST, 'YYYY-MM-DD') AS "dayList"
			, WEEKD AS "weekd"
			, TO_CHAR(DAYLIST, 'D') AS "v_day"
			, USERCODE /* 사용자코드 */ AS "UserCode"
			, SCHNAME /* 근무제명 */ AS "SchName"
			, VACFLAG /* 휴가여부 */ AS "VacFlag"
			, VACOFFFLAG /* 휴가구분 */ AS "VacOffFlag"
			, VACNAME /* 휴가명 */ AS "VacName"
			, WORKSTS /* 휴일구분 */ AS "WorkSts"
			, TO_CHAR(ATTDAYSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttDayStartTime"
			, TO_CHAR(ATTDAYENDTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttDayEndTime"
			, TO_CHAR(ATTSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttStartTime"
			, TO_CHAR(ATTENDTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttEndTime"
			, TO_CHAR(ATTDAYSTARTTIME, 'HH24:MIAM') /* 스케줄출근시간 */ AS "v_AttDayStartTime"
			, TO_CHAR(ATTDAYENDTIME, 'HH24:MIAM') /* 스케줄퇴근시간 */ AS "v_AttDayEndTime"
			, CASE WHEN TO_CHAR(ATTDAYSTARTTIME, 'YYYYMMDD') <![CDATA[ < ]]> TO_CHAR(ATTDAYENDTIME, 'YYYYMMDD') THEN'Y' ELSE 'N' END AS "v_NextDayYn"
			, TO_CHAR(ATTSTARTTIME, 'HH24:MIAM') /* 출근시간 */ AS "v_AttStartTime"
			, TO_CHAR(ATTENDTIME, 'HH24:MIAM') /* 퇴근시간 */ AS "v_AttEndTime"

			, TO_CHAR(ATTDAYSTARTTIME, 'HH24') /* 스케줄출근시간 */ AS "v_AttDayStartHour"
			, TO_CHAR(ATTDAYSTARTTIME, 'MI') /* 스케줄출근시간 */ AS "v_AttDayStartMin"
			, TO_CHAR(ATTDAYENDTIME, 'HH24') /* 스케줄퇴근시간 */ AS "v_AttDayEndHour"
			, TO_CHAR(ATTDAYENDTIME, 'MI') /* 스케줄퇴근시간 */ AS "v_AttDayEndMin"
			, ATTCONFIRMYN AS "AttConfirmYn"
			, STARTSTS /* 출근상태 */ AS "StartSts"
			, ENDSTS /* 퇴근상태 */ AS "EndSts"
			, ATTAC AS "AttAc"
			, ATTREAL AS "AttReal"
			, EXTENAC AS "ExtenAc"
			, HOLIAC AS "HoliAc"
			, NVL(EXTENCNT, 0) AS "ExtenCnt"
			, NVL(HOLICNT, 0) AS "HoliCnt"
			, FN_ATTEND_GETTIMEFORMAT(CASE WHEN ASSYN='Y' THEN ATTAC ELSE ATTREAL END + CASE WHEN EXTENNOTENOUGH = 'Y' THEN EXTENAC ELSE 0 END + HOLIAC + VACTIME,'M') /* 해당일 총 근무시간 */ AS "TotWorkTime"
			, FN_ATTEND_GETTIMEFORMAT(CASE WHEN ASSYN='Y'THEN ATTAC ELSE ATTREAL END + VACTIME,'M') /* 출퇴근 인정시간 */ AS "v_AttRealTime"
			, FN_ATTEND_GETTIMEFORMAT(EXTENAC, 'M') /* 연장근무시간 */ AS "v_ExtenAc"
			, FN_ATTEND_GETTIMEFORMAT(HOLIAC, 'M') /* 휴일근무시간 */ AS "v_HoliAc"
			, FN_ATTEND_GETTIMEFORMAT(TO_CHAR(((ATTENDTIME - ATTSTARTTIME) * (24*60))),'M') /* 출퇴근 실 근무시간 */ AS "v_startToEnd"
			, JH_JOBSTSNAME /* 근무상태 */ AS "jh_JobStsName"
			, FN_ATTEND_GETTIMEFORMAT(JH_STARTTIME||'00', 'T') /* 근무상태 시작시간 */ AS "jh_StartTime"
			, ETC AS "Etc"
			, USERETC AS "UserEtc"
			, EXTENNOTENOUGH AS "ExtenNotEnough"
			, TO_CHAR(EXTENSTART, 'HH24:MIAM') /* 연장근무 종료시간 */ AS "v_ExtenStartTime"
			, TO_CHAR(EXTENEND, 'HH24:MIAM') /* 연장근무 종료시간 */ AS "v_ExtenEndTime"

			, TO_CHAR(HOLISTART, 'HH24:MIAM') /* 휴일근무 종료시간 */ AS "v_HoliStartTime"
			, TO_CHAR(HOLIEND, 'HH24:MIAM') /* 휴일근무 종료시간 */ AS "v_HoliEndTime"
			, CASE WHEN CORESTARTTIME IS NOT NULL AND COREENDTIME IS NOT NULL AND WORKSTS = 'ON' THEN TO_CHAR(CORESTARTTIME,'HH24:MI')||'~'||TO_CHAR(COREENDTIME,'HH24:MI') ELSE '' END AS "CoreTime"
			, CASE WHEN ATTDAYSTARTTIME IS NOT NULL AND ATTDAYSTARTTIME != '' AND ATTDAYENDTIME IS NOT NULL AND ATTDAYENDTIME != '' THEN
			CASE WHEN TO_CHAR(ATTDAYSTARTTIME,'HH24MISS') >= TO_CHAR(CORESTARTTIME,'HH24MISS') AND TO_CHAR(ATTDAYENDTIME,'HH24MISS') <![CDATA[ <= ]]> TO_CHAR(COREENDTIME,'HH24MISS') THEN 'Y' ELSE 'N'END
			ELSE NULL
			END AS "CoreTimeObey"
			, WORKADDR AS "WorkAddr"
			, WORKZONE AS "WorkZone"
			, WORKPOINTX AS "WorkPointX"
			, WORKPOINTY AS "WorkPointY"
			, STARTPOINTX AS "StartPointX"
			, STARTPOINTY AS "StartPointY"
			, ENDPOINTX AS "EndPointX"
			, ENDPOINTY AS "EndPointY"
		FROM
		(
			SELECT
				DL.DAYLIST
				, DL.WEEKD
				, DL.TARGETUSERCODE AS USERCODE

				/* 출퇴근 */
				, M.COMMUSEQ
				, NVL(M.ETC,'') AS ETC
				, M.TARDYREASON
				, M.USERETC
				, M.LEAVEEARLYREASON
				, M.ATTSTARTTIME
				, M.ATTENDTIME
				, NVL(M.ATTREAL, 0) AS ATTREAL
				, NVL(M.ATTAC,0) AS ATTAC
				, NVL(M.ATTIDLE, 0) AS ATTIDLE
				, NVL(M.EXTENREAL, 0) AS EXTENREAL
				, NVL(M.EXTENAC, 0) AS EXTENAC
				, CASE WHEN M.ATTENDTIME IS NOT NULL AND M.ATTENDTIME >= M.EXTENEND THEN 'Y' ELSE 'N' END AS EXTENNOTENOUGH /* 연장근무 시 퇴근시간이 연장 신청 퇴근 시간보다 작을 시 시간 계산 안함 */
				, M.EXTENSTART
				, M.EXTENEND
				, NVL(M.HOLIREAL, 0) AS HOLIREAL
				, NVL(M.HOLIAC, 0) AS HOLIAC
				, M.HOLISTART
				, M.HOLIEND
				, M.EXTENCNT
				, M.HOLICNT
				, M.ATTCONFIRMYN
				, M.ATTCONFIRMTIME
				, M.STARTSTS
				, M.ENDSTS
				, M.STARTPOINTX
				, M.STARTPOINTY
				, M.ENDPOINTX
				, M.ENDPOINTY
				, M.STARTCHANGEYN
				, M.ENDCHANGEYN
				, M.CORESTARTTIME
				, M.COREENDTIME

				/* 근무제 */
				, J.WORKSTS
				, CASE WHEN TO_CHAR(J.ATTDAYSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') = '0000-00-00 00:00:00' THEN NULL ELSE J.ATTDAYSTARTTIME END AS ATTDAYSTARTTIME
				, CASE WHEN TO_CHAR(J.ATTDAYENDTIME, 'YYYY-MM-DD HH24:MI:SS') = '0000-00-00 00:00:00' THEN  NULL ELSE J.ATTDAYENDTIME END AS ATTDAYENDTIME
				, J.NEXTDAYYN
				, J.CONFMYN
				, NVL(J.ASSYN,'N') AS ASSYN
				, J.WORKZONE
				, J.WORKADDR
				, J.WORKPOINTX
				, J.WORKPOINTY
				, J.ALLOWRADIUS
				, J.STARTZONE
				, J.STARTADDR
				, J.STARTPOINTX JOBSTARTPOINTX
				, J.STARTPOINTY JOBSTARTPOINTY
				, J.ENDZONE
				, J.ENDADDR
				, J.ENDPOINTX JOBENDPOINTX
				, J.ENDPOINTY JOBENDPOINTY
				, J.ETC JOBETC

				, NVL(S.SCHNAME,'') AS SCHNAME
				, FN_BASEGETDICTIONARY_S('ko',S.MULTIDISPLAYNAME) AS SCHMULTIDISPLAYNAME
				, S.BASEYN

				/* 근무상태 */
				, CASE WHEN JOBSTSHISSEQ_CNT > 0 THEN
				CASE WHEN JOBSTSHISSEQ_CNT > 1 THEN JH.JOBSTSNAME || '+' ELSE JH.JOBSTSNAME END
				ELSE '' END AS JH_JOBSTSNAME
				, JH.STARTTIME AS JH_STARTTIME
				/* 휴가 */
				, CASE WHEN NVL(V.VACCNT, 0) > 0 THEN V.VACFLAG ELSE ''END AS VACFLAG
				, NVL(M.ATTAC, 0) * CASE WHEN NVL(V.VACCNT, 0) > 0 THEN 1 ELSE 0 END AS VACTIME
				, V.VACOFFFLAG
				, V.VACNAME
			FROM
			(
				SELECT
					DAYLIST
					, WEEKD
					, #{UserCode} AS TARGETUSERCODE
				FROM ATTEND_DAYLIST
				WHERE DAYLIST BETWEEN #{StartDate} AND #{EndDate}
			) DL
				LEFT JOIN ATTEND_COMMUTING_MST M ON DL.DAYLIST = M.TARGETDATE AND M.COMPANYCODE = #{CompanyCode} AND DL.TARGETUSERCODE = M.USERCODE
				LEFT JOIN ATTEND_JOB J ON DL.DAYLIST = J.JOBDATE AND J.COMPANYCODE = #{CompanyCode} AND DL.TARGETUSERCODE = J.USERCODE
				LEFT JOIN ATTEND_SCHEDULE S ON J.SCHSEQ = S.SCHSEQ
				LEFT JOIN (
					SELECT
						JOBDATE
						, USERCODE
						, COUNT(JOBSTSHISSEQ) AS JOBSTSHISSEQ_CNT
						, MIN(JOBSTSNAME) AS JOBSTSNAME
						, MIN(STARTTIME) AS STARTTIME
					FROM ATTEND_JOB_HISTORY
					WHERE JOBDATE BETWEEN #{StartDate} AND #{EndDate} AND USERCODE = #{UserCode} AND COMPANYCODE = #{CompanyCode}
					GROUP BY
						JOBDATE
						, USERCODE
				) JH ON DL.DAYLIST = JH.JOBDATE AND TARGETUSERCODE = JH.USERCODE
				LEFT JOIN (
					SELECT
						DAYLIST
						, UR_CODE
						, VACFLAG
						, VACOFFFLAG
						, VACNAME
						, COUNT(VACCNT) AS VACCNT
					FROM (
						SELECT
							DL.DAYLIST
							, V.UR_CODE
							, V.VACFLAG
							, V.VACOFFFLAG
							, CASE WHEN N.CODENAME IS NULL OR N.CODENAME = '' THEN D.CODENAME ELSE N.CODENAME END AS VACNAME
							, CASE WHEN V.GUBUN = 'VACATION_CANCEL' OR V.GUBUN = 'VACATION_PUBLIC_CANCEL' THEN -1 ELSE 1 END AS VACCNT
						FROM VM_VACATIONINFO V
							JOIN ATTEND_DAYLIST DL ON DL.DAYLIST BETWEEN V.SDATE AND V.EDATE
							LEFT JOIN SYS_BASE_CODE C ON v.GUBUN = C.CODE
							LEFT JOIN SYS_BASE_CODE D ON v.VACFLAG = D.CODE
							LEFT JOIN SYS_BASE_CODE N ON D.RESERVEDINT = N.CODEID
						WHERE
							DL.DAYLIST BETWEEN #{StartDate} AND #{EndDate}
							AND V.UR_CODE = #{UserCode}
					)
					GROUP BY
						DAYLIST
						, UR_CODE
						, VACFLAG
						, VACOFFFLAG
						, VACNAME
				) V ON DL.DAYLIST = V.DAYLIST AND DL.TARGETUSERCODE = V.UR_CODE
		) ATT
	</select> 

	<select id="getUserAttStatus" parameterType="cmap" resultType="cmap">
		SELECT
			TO_CHAR(DAYLIST, 'YYYY-MM-DD') AS "dayList"
			, DEPTFULLPATH AS "DeptFullPath"
			, DISPLAYNAME AS "DisplayName"
			, DEPTNAME AS "DeptName"
			, JOBPOSITIONNAME AS "JobPositionName"
			, JOBLEVELNAME AS "JobLevelName"
			, JOBTITLENAME AS "JobTitleName"
			, ENTERDATE AS "EnterDate"
			, PHOTOPATH AS "PhotoPath"
			, WEEKD AS "weekd"
			, TO_NUMBER(TO_CHAR(DAYLIST, 'DD')) AS "v_day"
			, TARGETUSERCODE AS "TargetUserCode"
			, TARGETUSERCODE AS "UserCode"
			, SCHNAME AS "SchName"
			, VACFLAG AS "VacFlag"
			, VACOFFFLAG AS "VacOffFlag"
			, CASE WHEN VacFlag IS NOT NULL THEN (VacCodeName) END "VacName"
			, CASE WHEN VacFlag IS NOT NULL THEN (VacStartTime) END "VacStartTime"
			, CASE WHEN VacFlag IS NOT NULL THEN (VacEndTime) END "VacEndTime"
			, CASE WHEN VacFlag IS NOT NULL THEN (VacAmPmVacDay) END "VacAmPmVacDay"
			, WORKSTS AS "WorkSts"
			, TO_CHAR(ATTDAYSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttDayStartTime"
			, TO_CHAR(ATTDAYENDTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttDayEndTime"
			, TO_CHAR(ATTSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttStartTime"
			, TO_CHAR(ATTENDTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttEndTime"
			, TO_CHAR(ATTDAYSTARTTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttDayStartTime"
			, TO_CHAR(ATTDAYENDTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttDayEndTime"
			, CASE WHEN TO_CHAR(ATTDAYSTARTTIME, 'YYYYMMDD') <![CDATA[ < ]]> TO_CHAR(ATTDAYENDTIME, 'YYYYMMDD') THEN 'Y' ELSE 'N' END AS "v_NextDayYn"
			, TO_CHAR(ATTSTARTTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttStartTime"
			, TO_CHAR(ATTENDTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttEndTime"
			, TO_CHAR(ATTDAYSTARTTIME, 'HH24') AS "v_AttDayStartHour"
			, TO_CHAR(ATTDAYSTARTTIME, 'MI') AS "v_AttDayStartMin"
			, TO_CHAR(ATTDAYENDTIME, 'HH24') AS "v_AttDayEndHour"
			, TO_CHAR(ATTDAYENDTIME, 'MI') AS "v_AttDayEndMin"
			, TO_CHAR(ATTSTARTTIME, 'HH24') AS "v_AttStartHour"
			, TO_CHAR(ATTSTARTTIME, 'MI') AS "v_AttStartMin"
			, TO_CHAR(ATTENDTIME, 'HH24') AS "v_AttEndHour"
			, TO_CHAR(ATTENDTIME, 'MI') AS "v_AttEndMin"
			, ATTCONFIRMYN AS "AttConfirmYn"
			, STARTSTS AS "StartSts"
			, ENDSTS AS "EndSts"
			, ATTAC AS "AttAc"
			, ATTREAL AS "AttReal"
			, EXTENAC AS "ExtenAc"
			, HOLIAC AS "HoliAc"
			, NVL(EXTENCNT, 0) AS "ExtenCnt"
			, NVL(HOLICNT, 0) AS "HoliCnt"
			, ASSYN AS "AssYn"
			, CASE WHEN ASSYN = 'Y' THEN ATTDAYAC ELSE ATTREAL END + CASE WHEN EXTENNOTENOUGH = 'Y' THEN EXTENAC ELSE 0 END + HOLIAC + CASE WHEN ASSYN = 'Y' THEN 0 ELSE VACTIME END AS "TotWorkTime"
			, CASE WHEN ASSYN = 'Y' THEN ATTDAYAC ELSE ATTREAL END + CASE WHEN ASSYN = 'Y' THEN 0 ELSE VACTIME END AS "AttRealTime"
			, CASE WHEN ASSYN = 'Y' THEN ATTDAYAC ELSE ATTREAL END + CASE WHEN EXTENNOTENOUGH = 'Y' THEN EXTENAC ELSE 0 END + HOLIAC AS "AttRealConfTime"
			, ((ATTENDTIME - ATTSTARTTIME) * (24 * 60)) AS "v_startToEndSec"
			, JH_JOBSTSNAME AS "jh_JobStsName"
			, ETC AS "Etc"
			, USERETC AS "UserEtc"
			, EXTENNOTENOUGH AS "ExtenNotEnough"
			, TO_CHAR(EXTENSTART, 'HH24MI') AS "v_ExtenStartTime"
			, TO_CHAR(EXTENEND, 'HH24MI') AS "v_ExtenEndTime"
			, TO_CHAR(HOLISTART, 'HH24MI') AS "v_HoliStartTime"
			, TO_CHAR(HOLIEND, 'HH24MI') AS "v_HoliEndTime"
			, CASE
				WHEN CORESTARTTIME IS NOT NULL AND COREENDTIME IS NOT NULL AND WORKSTS = 'ON' THEN TO_CHAR(CORESTARTTIME, 'HH24:MI')||'~'||TO_CHAR(COREENDTIME, 'HH24:MI')
				ELSE ''
			END AS "CoreTime"
			, CASE
				WHEN ATTDAYSTARTTIME IS NOT NULL AND ATTDAYENDTIME IS NOT NULL THEN
					CASE
						WHEN TO_CHAR(ATTDAYSTARTTIME, 'HH24MISS') <![CDATA[ <= ]]> TO_CHAR(CORESTARTTIME, 'HH24MISS') AND TO_CHAR(ATTDAYENDTIME, 'HH24MISS') >= TO_CHAR(COREENDTIME, 'HH24MISS') THEN 'Y'
						ELSE'N'
					END
				ELSE NULL
			END AS "CoreTimeObey"
			, WORKADDR AS "WorkAddr"
			, WORKZONE AS "WorkZone"
			, WORKPOINTX AS "WorkPointX"
			, WORKPOINTY AS "WorkPointY"
			, STARTPOINTX AS "StartPointX"
			, STARTPOINTY AS "StartPointY"
			, STARTADDR AS "StartAddr"
			, ENDPOINTX AS "EndPointX"
			, ENDPOINTY AS "EndPointY"
			, ENDADDR AS "EndAddr"
			, VACCNT AS "VacCnt"
			, WORKINGSYSTEMTYPE AS "WorkingSystemType"
			, MONTHLYATTACSUM AS "MonthlyAttAcSum"
		FROM (
			SELECT
				BSJH.DAYLIST
				, BSJH.WEEKD
				, BSJH.TARGETUSERCODE
				, BSJH.DEPTCODE
				, M.COMMUSEQ
				, NVL(M.ETC, '') AS ETC
				, M.TARDYREASON
				, M.USERETC
				, M.LEAVEEARLYREASON
				, M.ATTSTARTTIME
				, M.ATTENDTIME
				, CASE WHEN VACCNT >= 1 THEN 0 ELSE NVL(M.ATTREAL, 0) END AS ATTREAL
				, NVL(M.ATTAC, 0) AS ATTAC
				, NVL(M.ATTIDLE, 0) AS ATTIDLE
				, NVL(M.EXTENREAL, 0) AS EXTENREAL
				, NVL(M.EXTENAC, 0) AS EXTENAC
				, CASE WHEN M.ATTENDTIME IS NOT NULL AND M.ATTENDTIME >= M.EXTENEND THEN 'Y' ELSE 'N' END AS EXTENNOTENOUGH
				, M.EXTENSTART
				, M.EXTENEND
				, NVL(M.HOLIREAL, 0)  AS HOLIREAL
				, NVL(M.HOLIAC, 0) AS HOLIAC
				, M.HOLISTART
				, M.HOLIEND
				, M.EXTENCNT
				, M.HOLICNT
				, M.ATTCONFIRMYN
				, M.ATTCONFIRMTIME
				, M.STARTSTS
				, M.ENDSTS
				, M.STARTPOINTX
				, M.STARTPOINTY
				, M.STARTADDR
				, M.ENDPOINTX
				, M.ENDPOINTY
				, M.ENDADDR
				, M.STARTCHANGEYN
				, M.ENDCHANGEYN
				, M.CORESTARTTIME
				, M.COREENDTIME
				, J.WORKSTS
				, CASE WHEN TO_CHAR(J.ATTDAYSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') = '0000-00-00 00:00:00' THEN NULL ELSE J.ATTDAYSTARTTIME END AS ATTDAYSTARTTIME
				, CASE WHEN TO_CHAR(J.ATTDAYENDTIME, 'YYYY-MM-DD HH24:MI:SS') = '0000-00-00 00:00:00' THEN NULL ELSE J.ATTDAYENDTIME END AS ATTDAYENDTIME
				, J.NEXTDAYYN
				, J.CONFMYN
				, NVL(J.ASSYN, 'N') AS ASSYN
				, J.WORKZONE
				, J.WORKADDR
				, J.WORKPOINTX
				, J.WORKPOINTY
				, J.ALLOWRADIUS
				, J.STARTZONE
				, J.STARTPOINTX AS JOBSTARTPOINTX
				, J.STARTPOINTY AS JOBSTARTPOINTY
				, J.ENDZONE
				, J.ENDPOINTX AS JOBENDPOINTX
				, J.ENDPOINTY AS JOBENDPOINTY
				, J.ETC AS JOBETC
				, CASE WHEN TO_CHAR(TO_DATE(#{UR_TimeZone}, 'YYYY-MM-DD HH24:MI:SS'), 'YYYYMMDD') <![CDATA[ < ]]>TO_CHAR(J.JOBDATE, 'YYYYMMDD') THEN 0 ELSE J.ATTDAYAC END AS ATTDAYAC
				, NVL(S.SCHNAME, '') AS SCHNAME
				, FN_BASEGETDICTIONARY_S(#{lang}, S.MULTIDISPLAYNAME) AS SCHMULTIDISPLAYNAME
				, S.BASEYN
				, BSJH.JH_JOBSTSNAME
				, BSJH.JH_STARTTIME
				, BSJH.VACFLAG
				, case when NVL(BSJH.VacCnt,0) >0 then  NVL(j.AttDayAC,0)*NVL(BSJH.VACCNT,0) else 
					case when j.WorkSts = 'HOL' AND j.AttDayAC>0 then j.AttDayAC else 0 END end VACTIME  
				, BSJH.VACOFFFLAG
				, BSJH.VacCodeName
				, BSJH.VacStartTime
				, BSJH.VacEndTime
				, BSJH.VacAmPmVacDay
				, BSJH.DEPTFULLPATH
				, BSJH.DISPLAYNAME
				, BSJH.DEPTNAME
				, BSJH.JOBPOSITIONNAME
				, BSJH.JOBLEVELNAME
				, BSJH.JOBTITLENAME
				, BSJH.ENTERDATE
				, BSJH.PHOTOPATH
				, BSJH.JOBPOSITIONSORTKEY
				, BSJH.DEPTSORTKEY
				, BSJH.SORTKEY
				, BSJH.VACCNT
				, NVL(S.WORKINGSYSTEMTYPE, 0) AS WORKINGSYSTEMTYPE
				, NVL(M.MONTHLYATTACSUM, 0) AS MONTHLYATTACSUM
		FROM (
				SELECT
					BS.DAYLIST
					, BS.WEEKD
					, BS.TARGETUSERCODE
					, BS.DEPTFULLPATH
					, BS.DISPLAYNAME
					, BS.DEPTNAME
					, BS.JOBPOSITIONNAME
					, BS.JOBLEVELNAME
					, BS.JOBTITLENAME
					, BS.ENTERDATE
					, BS.PHOTOPATH
					, BS.DEPTCODE
					, BS.COMPANYCODE
					, BS.JOBPOSITIONSORTKEY
					, BS.DEPTSORTKEY
					, BS.SORTKEY
					, VV.VACOFFFLAG
					, VV.VACFLAG AS TMP_VACFLAG
					, VV.VACCNT
					, VV.VacCodeName
					, VV.VacStartTime
					, VV.VacEndTime
					, VV.VacAmPmVacDay
					, JH.JOBSTSHISSEQ
					, JH.STARTTIME
					, JH.JOBSTSNAME
					, CASE WHEN SUM(NVL(VV.VACCNT, 0)) > 0 THEN VV.VACFLAG ELSE '' END AS VACFLAG
					, CASE
						WHEN COUNT(JH.JOBSTSHISSEQ) > 0 THEN
							CASE
								WHEN COUNT(JH.JOBSTSHISSEQ) > 1 THEN FN_BASEGETDICTIONARY_S(#{lang}, JH.JOBSTSNAME) || '+'
								ELSE FN_BASEGETDICTIONARY_S(#{lang}, JH.JOBSTSNAME)
							END
						ELSE ''
					END AS JH_JOBSTSNAME
					, MIN(JH.STARTTIME) AS JH_STARTTIME
				FROM (
					SELECT
						DAYLIST
						, WEEKD
						, USERCODE AS TARGETUSERCODE
						, DEPTFULLPATH
						, DISPLAYNAME
						, DEPTNAME
						, JOBPOSITIONNAME
						, JOBLEVELNAME
						, JOBTITLENAME
						, ENTERDATE
						, PHOTOPATH
						, DEPTCODE
						, COMPANYCODE
						, JOBPOSITIONSORTKEY
						, DEPTSORTKEY
						, SORTKEY
					FROM (
						SELECT
							DAYLIST
							, WEEKD
						FROM ATTEND_DAYLIST
						WHERE DAYLIST BETWEEN #{StartDate} AND #{EndDate}
					) DL,
					(
						SELECT
							U.USERCODE
							, FN_BASEGETDICTIONARY_S(#{lang}, U.MULTIDISPLAYNAME) AS DISPLAYNAME
							, FN_BASEGETDICTIONARY_S(#{lang}, B.MULTIDEPTNAME) AS DEPTNAME
							, FN_BASEGETDICTIONARY_S(#{lang}, B.MULTIJOBPOSITIONNAME) AS JOBPOSITIONNAME
							, FN_BASEGETDICTIONARY_S(#{lang}, B.MULTIJOBLEVELNAME) AS JOBLEVELNAME
							, FN_BASEGETDICTIONARY_S(#{lang}, B.MULTIJOBTITLENAME) AS JOBTITLENAME
							, U.ENTERDATE
							, B.JOBPOSITIONSORTKEY
							, B.DEPTSORTKEY
							, U.SORTKEY
							, U.PHOTOPATH
							, B.COMPANYCODE
							, B.DEPTCODE
							, (SELECT DISPLAYNAME FROM SYS_OBJECT_GROUP R WHERE GROUPCODE = SOG.MEMBEROF) AS DEPTFULLPATH
						FROM SYS_OBJECT_USER_BASEGROUP B
							JOIN SYS_OBJECT_USER U ON B.USERCODE = U.USERCODE
							LEFT JOIN SYS_OBJECT_GROUP SOG ON B.DEPTCODE = SOG.GROUPCODE
						WHERE B.COMPANYCODE = #{CompanyCode}
							<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
								U.USERCODE = #{user.UserCode} AND B.DEPTCODE = #{user.DeptCode}
							</foreach>
					) U
				) BS
					LEFT JOIN (
					select vd.VacDate, vd.UR_Code, SUM(vd.VacDay) as VacCnt
							, LISTAGG(vd.VacFlag,'|') WITHIN GROUP(ORDER BY vd.StartTime, vd.VacOffFlag ASC) as VacFlag
							, LISTAGG(vd.VacOffFlag,'|') WITHIN GROUP(ORDER BY vd.StartTime, vd.VacOffFlag ASC) as VacOffFlag
							, LISTAGG(NVL(vd.StartTime,'00:00'),'|') WITHIN GROUP(ORDER BY vd.StartTime, vd.VacOffFlag ASC) as VacStartTime
							, LISTAGG(NVL(vd.EndTime,'00:00'),'|') WITHIN GROUP(ORDER BY vd.StartTime, vd.VacOffFlag ASC) as VacEndTime
							, LISTAGG(NVL(bc.CodeName,vd.VacFlag),'|') WITHIN GROUP(ORDER BY vd.StartTime, vd.VacOffFlag ASC) as VacCodeName
							, TO_CHAR(NVL(SUM(AmVacDay),0),'fm90.000')||'|'||TO_CHAR(NVL(SUM(PmVacDay),0),'fm90.000') as VacAmPmVacDay
							from (select UR_Code, VacDate, REPLACE(VacOffFlag,' ','') as VacOffFlag, REPLACE(VacFlag,' ','') as VacFlag, VacDay, StartTime, EndTime
								,CASE WHEN VacOffFlag = 'AM' THEN
										CAST(VacDay AS DECIMAL(9,3))
									END as AmVacDay
								,CASE WHEN VacOffFlag = 'PM' THEN
										CAST(VacDay AS DECIMAL(9,3))
									END as PmVacDay
								from vm_vacationinfo_day
									where 1=1
									<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
										UR_Code = #{user.UserCode}
									</foreach>
							) vd
							left join sys_base_code bc
								on bc.DomainID = #{domainID}
									AND bc.codegroup='VACATION_TYPE'
									AND bc.CODE=vd.VacFlag
									AND vd.VacDate BETWEEN TO_DATE(#{StartDate},'YYYY-MM-DD') AND TO_DATE(#{EndDate},'YYYY-MM-DD')
								group by vd.VacDate, vd.UR_Code
					) VV ON BS.DAYLIST = VV.VacDate AND BS.TARGETUSERCODE = VV.UR_CODE
					LEFT JOIN ATTEND_JOB_HISTORY JH ON BS.DAYLIST = JH.JOBDATE AND BS.TARGETUSERCODE = JH.USERCODE AND BS.COMPANYCODE = JH.COMPANYCODE
				GROUP BY
					BS.DAYLIST
					, BS.WEEKD
					, BS.TARGETUSERCODE
					, BS.DEPTFULLPATH
					, BS.DISPLAYNAME
					, BS.DEPTNAME
					, BS.JOBPOSITIONNAME
					, BS.JOBTITLENAME
					, BS.JOBLEVELNAME
					, BS.ENTERDATE
					, BS.PHOTOPATH
					, BS.DEPTCODE
					, BS.COMPANYCODE
					, BS.JOBPOSITIONSORTKEY
					, BS.DEPTSORTKEY
					, BS.SORTKEY
					, VV.VACOFFFLAG
					, VV.VACFLAG
					, VV.VACCNT
					, VV.VacCodeName
					, VV.VacStartTime
					, VV.VacEndTime
					, VV.VacAmPmVacDay
					, JH.JOBSTSHISSEQ
					, JH.STARTTIME
					, JH.JOBSTSNAME
			) BSJH
				LEFT JOIN ATTEND_COMMUTING_MST M ON BSJH.DAYLIST = M.TARGETDATE AND BSJH.COMPANYCODE = M.COMPANYCODE AND BSJH.TARGETUSERCODE = M.USERCODE
				LEFT JOIN ATTEND_JOB J ON BSJH.DAYLIST = J.JOBDATE AND BSJH.COMPANYCODE = J.COMPANYCODE AND BSJH.TARGETUSERCODE = J.USERCODE
				LEFT JOIN ATTEND_SCHEDULE S ON J.SCHSEQ = S.SCHSEQ
		) ATT
		ORDER BY DEPTFULLPATH, DEPTSORTKEY, JOBPOSITIONSORTKEY, SORTKEY, TARGETUSERCODE, DAYLIST
	</select>

	<select id="getUserAttStatusV2" parameterType="cmap" resultType="cmap">
		SELECT
		TO_CHAR(dayList, 'YYYY-MM-DD') AS "dayList"
		,DeptFullPath as "DeptFullPath"
		,DisplayName as "DisplayName"
		,DeptName as "DeptName"
		,JobPositionName as "JobPositionName"
		,JobTitleName as "JobTitleName"
		,EnterDate as "EnterDate"
		,PhotoPath as "PhotoPath"
		,weekd as "weekd"
		,TO_NUMBER(TO_CHAR(dayList, 'DD')) AS "v_day"
		,TargetUserCode as "TargetUserCode"
		,TargetUserCode as "UserCode"
		,SchName as "SchName"
		,VacFlag as "VacFlag"
		,VacOffFlag as "VacOffFlag"
		,VacAmPmVacDay as "VacAmPmVacDay"
		,VacCodeName as "VacCodeName"
		,CASE WHEN VacFlag IS NOT NULL THEN (SELECT MAX(CodeName) FROM sys_base_code WHERE codegroup='VACATION_TYPE' AND CODE=VacFlag) END as "VacName"
		,WorkSts as "WorkSts"

		,TO_CHAR(AttStartTime,'YYYY-MM-DD HH24:MI:SS') as "AttStartTime"
		,TO_CHAR(AttEndTime,'YYYY-MM-DD HH24:MI:SS') as "AttEndTime"
		,TO_CHAR(AttDayStartTime,'YYYY-MM-DD HH24:MI:SS') as "AttDayStartTime"
		,TO_CHAR(AttDayEndTime,'YYYY-MM-DD HH24:MI:SS') as "AttDayEndTime"

		,TO_CHAR(AttDayStartTime, 'HH24:MIAM') as "v_AttDayStartTime"
		,TO_CHAR(AttDayEndTime, 'HH24:MIAM') as "v_AttDayEndTime"
		,TO_CHAR(mAttDayStartTime,'YYYY-MM-DD HH24:MI:SS') AS "mAttDayStartTime"
		,TO_CHAR(mAttDayEndTime,'YYYY-MM-DD HH24:MI:SS') AS "mAttDayEndTime"
		,CASE
		WHEN WorkingSystemType='0' THEN
		case when TO_DATE(TO_CHAR(AttDayStartTime,'YYYYMMDD'),'YYYYMMDD') <![CDATA[<]]> TO_DATE(TO_CHAR(AttDayEndTime,'YYYYMMDD'),'YYYYMMDD') then
		'Y'
		else
		'N'
		end
		ELSE
		case when TO_DATE(TO_CHAR(mAttDayStartTime,'YYYYMMDD'),'YYYYMMDD') <![CDATA[<]]> TO_DATE(TO_CHAR(mAttDayEndTime,'YYYYMMDD'),'YYYYMMDD') then
		'Y'
		else
		'N'
		end
		END as "v_NextDayYn"
		,TO_CHAR(AttStartTime, 'HH24:MIAM') as "v_AttStartTime"
		,TO_CHAR(AttEndTime, 'HH24:MIAM') as "v_AttEndTime"

		,TO_CHAR(AttDayStartTime, 'HH24') as "v_AttDayStartHour"
		,TO_CHAR(AttDayStartTime, 'MI') as "v_AttDayStartMin"
		,TO_CHAR(AttDayEndTime, 'HH24') as "v_AttDayEndHour"
		,TO_CHAR(AttDayEndTime, 'MI') as "v_AttDayEndMin"

		,TO_CHAR(AttStartTime, 'HH24') as "v_AttStartHour"
		,TO_CHAR(AttStartTime, 'MI') as "v_AttStartMin"
		,CASE WHEN WorkingSystemType='2' AND mAttDayEndTime <![CDATA[<]]> AttEndTime THEN
		TO_CHAR(mAttDayEndTime, 'HH24')
		ELSE
		TO_CHAR(AttEndTime, 'HH24')
		END as "v_AttEndHour"
		,CASE WHEN WorkingSystemType='2' AND mAttDayEndTime <![CDATA[<]]> AttEndTime THEN
		TO_CHAR(mAttDayEndTime, 'MI')
		ELSE
		TO_CHAR(AttEndTime, 'MI')
		END as "v_AttEndMin"
		,AttConfirmYn as "AttConfirmYn"
		,StartSts as "StartSts"
		,EndSts as "EndSts"
		,AttAc as "AttAc"
		,AttAcD as "AttAcD"
		,AttAcN as "AttAcN"
		,AttReal as "AttReal"
		,DECODE(ExtenNotEnough,'Y',ExtenAc,0) as "ExtenAc"
		,DECODE(ExtenNotEnough,'Y',ExtenAcD,0) as "ExtenAcD"
		,DECODE(ExtenNotEnough,'Y',ExtenAcN,0) as "ExtenAcN"
		,DECODE(HoliNotEnough,'Y',HoliAc,0) as "HoliAc"
		,DECODE(HoliNotEnough,'Y',HoliAcD,0) as "HoliAcD"
		,DECODE(HoliNotEnough,'Y',HoliAcN,0) as "HoliAcN"
		,NVL(ExtenCnt,0) as "ExtenCnt"
		,NVL(HoliCnt,0) as "HoliCnt"
		,AssYn as "AssYn"
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(ExtenNotEnough,'Y' , ExtenAc , 0) +DECODE(HoliNotEnough, 'Y' , HoliAc,0)+DECODE(AssYn,'Y',0,VacTime) as "TotWorkTime"
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(AssYn,'Y',0,VacTime) as "AttRealTime"
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(ExtenNotEnough, 'Y' , ExtenAc , 0) +DECODE(HoliNotEnough, 'Y' , HoliAc,0) as  "AttRealConfTime"
		,ROUND((AttEndTime - AttStartTime)*1440,0) as "v_startToEndSec"
		,jh_JobStsName as "jh_JobStsName"
		,Etc as "Etc"
		,UserEtc as "UserEtc"
		,ExtenNotEnough as "ExtenNotEnough"
		,HoliNotEnough as "HoliNotEnough"
		,TO_CHAR(ExtenStart, 'HH24MI') as "v_ExtenStartTime"
		,TO_CHAR(ExtenEnd, 'HH24MI') as "v_ExtenEndTime"
		,TO_CHAR(HoliStart, 'HH24MI') as "v_HoliStartTime"
		,TO_CHAR(HoliEnd, 'HH24MI') as "v_HoliEndTime"

		,CASE WHEN CoreStartTime IS NOT NULL AND CoreEndTime IS NOT NULL and WorkSts = 'ON' THEN
		TO_CHAR(CoreStartTime, 'HH24:MI')||'~'||TO_CHAR(CoreEndTime, 'HH24:MI')
		ELSE
		''
		END as "CoreTime"
		,CASE WHEN AttDayStartTime IS NOT NULL AND AttDayStartTime != '' AND AttDayEndTime IS NOT NULL AND AttDayEndTime != '' THEN
		case when TO_DATE(TO_CHAR(AttDayStartTime,'HH24MISS'),'HH24MISS') <![CDATA[<=]]>  TO_DATE(TO_CHAR(CoreStartTime,'HH24MISS'),'HH24MISS')
		and TO_DATE(TO_CHAR(AttDayEndTime,'HH24MISS'),'HH24MISS') >= TO_DATE(TO_CHAR(CoreEndTime,'HH24MISS'),'HH24MISS') then
		'Y'
		else
		'N'
		end
		ELSE
		NULL
		END as "CoreTimeObey"
		,WorkAddr as "WorkAddr"
		,WorkZone as "WorkZone"
		,WorkPointX as "WorkPointX"
		,WorkPointY as "WorkPointY"
		,StartPointX as "StartPointX"
		,StartPointY as "StartPointY"
		,StartAddr as "StartAddr"
		,EndPointX as "EndPointX"
		,EndPointY as "EndPointY"
		,EndAddr as "EndAddr"
		,VacCnt as "VacCnt"
		,userWorkInfo as "userWorkInfo"
		,MonthlyAttAcSum as "MonthlyAttAcSum"
		,WorkingSystemType as "WorkingSystemType"
		,CoreSchTimeYn as "CoreSchTimeYn"
		,CoreStartTimeHour as "CoreStartTimeHour"
		,CoreStartTimeMin as "CoreStartTimeMin"
		,CoreEndTimeHour as "CoreEndTimeHour"
		,CoreEndTimeMin as "CoreEndTimeMin"
		,CoreSchTime as "CoreSchTime"
		,GoWorkTimeYn as "GoWorkTimeYn"
		,GoWorkStartTimeHour as "GoWorkStartTimeHour"
		,GoWorkStartTimeMin as "GoWorkStartTimeMin"
		,GoWorkEndTimeHour as "GoWorkEndTimeHour"
		,GoWorkEndTimeMin as "GoWorkEndTimeMin"
		,GoWorkEndTime as "GoWorkEndTime"
		,OffWorkTimeYn as "OffWorkTimeYn"
		,OffWorkStartTimeHour as "OffWorkStartTimeHour"
		,OffWorkStartTimeMin as "OffWorkStartTimeMin"
		,OffWorkEndTimeHour as "OffWorkEndTimeHour"
		,OffWorkEndTimeMin as "OffWorkEndTimeMin"
		,OffWorkEndTime as "OffWorkEndTime"
		FROM
		(
		SELECT
		dl.dayList
		,weekd
		,TargetUserCode
		,DeptCode
		,m.CommuSeq
		,NVL(m.Etc,'') Etc
		,m.TardyReason
		,m.UserEtc
		,m.LeaveEarlyReason
		,m.AttStartTime
		,m.AttEndTime
		,m.AttDayStartTime AS mAttDayStartTime
		,m.AttDayEndTime AS mAttDayEndTime
		,case when VacCnt >= 1 then 0 else NVL(m.AttReal,0) end AttReal
		,NVL(m.AttAc,0) AttAc
		,NVL(fn_attend_getNightDayTimeV2(m.AttDayStartTime, m.AttDayEndTime, '${NightStartDate}', '${NightEndDate}', NVL(j.AttDayIdle,NVL(m.AttIdle,0)), 'D'),0)  as AttAcD
		,NVL(fn_attend_getNightDayTimeV2(m.AttDayStartTime, m.AttDayEndTime, '${NightStartDate}', '${NightEndDate}', NVL(j.AttDayIdle,NVL(m.AttIdle,0)), 'N'),0)  as AttAcN
		,NVL(m.AttIdle,0) AttIdle
		,NVL(m.ExtenReal,0) ExtenReal
		,NVL(m.ExtenAc,0) ExtenAc
		,CASE WHEN m.ExtenCnt>1 THEN
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'D'),0)
		ELSE
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'D'),0) END  as ExtenAcD
		,CASE WHEN m.ExtenCnt>1 THEN
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'N'),0)
		ELSE
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'N'),0) END  as ExtenAcN
		,CASE WHEN m.AttEndTime is not null and m.AttEndTime <![CDATA[>=]]> m.ExtenEnd THEN 'Y' ELSE 'N' END as ExtenNotEnough
		,CASE WHEN m.AttStartTime is not null and m.AttStartTime <![CDATA[<=]]> m.HoliStart AND m.AttEndTime is not null and m.AttEndTime >= m.HoliEnd THEN 'Y' ELSE 'N' END as HoliNotEnough
		,m.ExtenStart
		,m.ExtenEnd
		,NVL(m.HoliReal,0) HoliReal
		,NVL(m.HoliAc,0) HoliAc
		,NVL(fn_attend_getNightDayTimeV2(m.HoliStart, m.HoliEnd, '${HolNightStartDate}', '${HolNightEndDate}', ehh.IdleTime, 'D'),0)  as HoliAcD
		,NVL(fn_attend_getNightDayTimeV2(m.HoliStart, m.HoliEnd, '${HolNightStartDate}', '${HolNightEndDate}', ehh.IdleTime, 'N'),0)  as HoliAcN
		,m.HoliStart
		,m.HoliEnd
		,m.ExtenCnt
		,m.HoliCnt
		,m.AttConfirmYn
		,m.AttConfirmTime
		,m.StartSts
		,m.EndSts
		,m.StartPointX
		,m.StartPointY
		,m.StartAddr
		,m.EndPointX
		,m.EndPointY
		,m.EndAddr
		,m.StartChangeYn
		,m.EndChangeYn
		,m.CoreStartTime
		,m.CoreEndTime
		,NVL(m.MonthlyAttAcSum, 0) as MonthlyAttAcSum

		,j.WorkSts
		,NVL(j.AttDayStartTime, '') AttDayStartTime
		,NVL(j.AttDayEndTime, '') AttDayEndTime
		,j.NextDayYn
		,j.ConfmYn
		,NVL(j.AssYn,'N') AssYn
		,j.WorkZone
		,j.WorkAddr
		,j.WorkPointX
		,j.WorkPointY
		,j.AllowRadius
		,j.StartZone
		,j.StartPointX jobStartPointX
		,j.StartPointY jobStartPointY
		,j.EndZone
		,j.EndPointX jobEndPointX
		,j.EndPointY jobEndPointY
		,j.Etc jobEtc
		,case when  TO_DATE(#{UR_TimeZone},'YYYY-MM-DD') <![CDATA[<]]>  TO_DATE(TO_CHAR(j.JobDate,'YYYYMMDD'),'YYYYMMDD') THEN 0 else j.AttDayAc end AttDayAc
		,NVL(s.SchName,'') SchName
		,Fn_BaseGetDictionary_S(#{lang},s.MultiDisplayName) schMultiDisplayName
		,BaseYn
		,CASE WHEN JobStsHisSeq > 0 THEN
		CASE WHEN JobStsHisSeq > 1 THEN
		Fn_BaseGetDictionary_S(#{lang},jh.JobStsName)||'+'
		ELSE
		Fn_BaseGetDictionary_S(#{lang},jh.JobStsName)
		END
		ELSE
		''
		END as jh_JobStsName
		,jh.StartTime as jh_StartTime
		,CASE WHEN NVL(VacCnt,0) >  0 THEN VacFlag ELSE '' END as VacFlag
		,case when NVL(VacCnt,0) > 0 then  NVL(j.AttDayAC,0)*NVL(VacCnt,0) else
		case when j.WorkSts = 'HOL' AND j.AttDayAC>0 then j.AttDayAC else 0 END end VacTime
		,VacOffFlag
		,VacCodeName
		,VacAmPmVacDay
		,DeptFullPath,DisplayName,DeptName,JobPositionName, JobTitleName,EnterDate,PhotoPath
		,JobPositionSortKey,DeptSortKey,SortKey,VacCnt
		,JobLevelSortKey
		,JobTitlecode
		,Fn_attend_getUserWorkInfo(TargetUserCode, dl.dayList) as userWorkInfo
		,NVL(s.WorkingSystemType, 0) as WorkingSystemType
		,NVL(s.CoreTimeYn, 'N') as CoreSchTimeYn
		,NVL(s.CoreStartTimeHour, '00') as CoreStartTimeHour
		,NVL(s.CoreStartTimeMin, '00') as CoreStartTimeMin
		,NVL(s.CoreEndTimeHour, '00') as CoreEndTimeHour
		,NVL(s.CoreEndTimeMin, '00') as CoreEndTimeMin
		,NVL(s.CoreStartTimeHour, '00')||':'||NVL(s.CoreStartTimeMin, '00')||'~'||NVL(s.CoreEndTimeHour, '00')||':'||NVL(s.CoreEndTimeMin, '00') as CoreSchTime
		,NVL(s.GoWorkTimeYn, 'N') as GoWorkTimeYn
		,NVL(s.GoWorkStartTimeHour, '00') as GoWorkStartTimeHour
		,NVL(s.GoWorkStartTimeMin, '00') as GoWorkStartTimeMin
		,NVL(s.GoWorkEndTimeHour, '00') as GoWorkEndTimeHour
		,NVL(s.GoWorkEndTimeMin, '00') as GoWorkEndTimeMin
		,NVL(s.GoWorkStartTimeHour, '00')||':'||NVL(s.GoWorkStartTimeMin, '00')||'~'||NVL(s.GoWorkEndTimeHour, '00')||':'||NVL(s.GoWorkEndTimeMin, '00') as GoWorkEndTime
		,NVL(s.OffWorkTimeYn, 'N') as OffWorkTimeYn
		,NVL(s.OffWorkStartTimeHour, '00') as OffWorkStartTimeHour
		,NVL(s.OffWorkStartTimeMin, '00') as OffWorkStartTimeMin
		,NVL(s.OffWorkEndTimeHour, '00') as OffWorkEndTimeHour
		,NVL(s.OffWorkEndTimeMin, '00') as OffWorkEndTimeMin
		,NVL(s.OffWorkStartTimeHour, '00')||':'||NVL(s.OffWorkStartTimeMin, '00')||'~'||NVL(s.OffWorkEndTimeHour, '00')||':'||NVL(s.OffWorkEndTimeMin, '00') as OffWorkEndTime

		FROM
		(
		SELECT
		daylist ,weekd
		,UserCode TargetUserCode
		,DeptFullPath,DisplayName,DeptName,JobPositionName, JobTitleName,EnterDate,PhotoPath,DeptCode
		,JobPositionSortKey,DeptSortKey,SortKey
		,JobLevelSortKey
		,JobTitlecode
		FROM
		(
		SELECT
		daylist
		,weekd
		FROM attend_daylist
		WHERE dayList BETWEEN TO_DATE(#{StartDate},'YYYY-MM-DD') AND TO_DATE(#{EndDate},'YYYY-MM-DD')
		) dl ,(
		SELECT
		u.UserCode
		,CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang},u.MultiDisplayName))>0 THEN
		Fn_BaseGetDictionary_S(#{lang},u.MultiDisplayName)
		ELSE
		u.DisplayName
		END as DisplayName
		,Fn_BaseGetDictionary_S(#{lang},MultiDeptName) DeptName
		,Fn_BaseGetDictionary_S(#{lang},MultiJobPositionName) JobPositionName
		,Fn_BaseGetDictionary_S(#{lang},MultiJobTitleName) JobTitleName
		,u.EnterDate
		,b.JobPositionSortKey
		,b.JobLevelSortKey
		,b.JobTitlecode
		,b.DeptSortKey
		,b.SortKey
		,u.PhotoPath
		,DeptCode
		,(SELECT DisplayName FROM sys_object_group r WHERE GroupCode = sog.MemberOf) DeptFullPath
		FROM sys_object_user_basegroup  b
		JOIN sys_object_user u					ON b.UserCode = u.UserCode
		LEFT JOIN sys_object_group sog			ON b.DeptCode = sog.GroupCode
		WHERE b.CompanyCode = #{CompanyCode}
		<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
			U.UserCode = #{user.UserCode} AND DeptCode = #{user.DeptCode}
		</foreach>
		) u
		)dl
		LEFT JOIN attend_commuting_mst m	 ON dl.dayList = m.TargetDate		AND m.CompanyCode = #{CompanyCode}			AND dl.TargetUserCode = m.UserCode
		LEFT JOIN attend_job j			 ON dl.dayList = j.JobDate			AND j.CompanyCode = #{CompanyCode}			AND dl.TargetUserCode = j.UserCode
		LEFT JOIN attend_schedule s	 ON j.SchSeq = s.SchSeq
		LEFT JOIN attend_job_history jh ON dl.dayList = jh.JobDate			AND TargetUserCode = jh.UserCode			AND jh.CompanyCode = #{CompanyCode}
		LEFT JOIN (
			select vd.VacDate, vd.UR_Code, SUM(vd.VacDay) as VacCnt
				, LISTAGG(vd.VacFlag,'|') WITHIN GROUP(ORDER BY vd.StartTime, vd.VacOffFlag ASC) as VacFlag
				, LISTAGG(vd.VacOffFlag,'|') WITHIN GROUP(ORDER BY vd.StartTime, vd.VacOffFlag ASC) as VacOffFlag
				, LISTAGG(vd.StartTime,'|') WITHIN GROUP(ORDER BY vd.StartTime, vd.VacOffFlag ASC) as StartTime
				, LISTAGG(vd.EndTime,'|') WITHIN GROUP(ORDER BY vd.StartTime, vd.VacOffFlag ASC) as EndTime
				, LISTAGG(NVL(bc.CodeName,vd.VacFlag),'|') WITHIN GROUP(ORDER BY vd.StartTime, vd.VacOffFlag ASC) as VacCodeName
				, TO_CHAR(NVL(SUM(AmVacDay),0),'fm90.000')||'|'||TO_CHAR(NVL(SUM(PmVacDay),0),'fm90.000') as VacAmPmVacDay
			from (select UR_Code, VacDate, REPLACE(VacOffFlag,' ','') as VacOffFlag, REPLACE(VacFlag,' ','') as VacFlag, VacDay, StartTime, EndTime
				,CASE WHEN VacOffFlag = 'AM' THEN
					CAST(VacDay AS DECIMAL(9,3))
				END as AmVacDay
				,CASE WHEN VacOffFlag = 'PM' THEN
					CAST(VacDay AS DECIMAL(9,3))
				END as PmVacDay
				from vm_vacationinfo_day
					where 1=1
				<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
					UR_Code = #{user.UserCode}
				</foreach>
				) vd
				left join sys_base_code bc
					on bc.DomainID = #{domainID}
						AND bc.codegroup='VACATION_TYPE'
						AND bc.CODE=vd.VacFlag
						AND vd.VacDate BETWEEN TO_DATE(#{StartDate},'YYYY-MM-DD') AND TO_DATE(#{EndDate},'YYYY-MM-DD')
						group by vd.VacDate, vd.UR_Code
		) vv
		ON dl.dayList = vv.VacDate AND dl.TargetUserCode = vv.UR_Code
		LEFT JOIN attend_extensionholiday eho ON dl.dayList = eho.jobDate AND dl.TargetUserCode = eho.UserCode AND eho.JobStsName = 'O' AND eho.CompanyCode = #{CompanyCode} AND eho.ApprovalSts = 'Y'
		LEFT JOIN attend_extensionholiday ehh ON dl.dayList = ehh.jobDate AND dl.TargetUserCode = ehh.UserCode AND ehh.JobStsName = 'H' AND ehh.CompanyCode = #{CompanyCode} AND ehh.ApprovalSts = 'Y'
		<!--GROUP BY dl.dayList , TargetUserCode , DeptCode-->
		) att
		ORDER BY SortKey, JobPositionSortKey, JobLevelSortKey, JobTitlecode, EnterDate, DisplayName, dayList ASC
	</select>

	<select id="getUserAttStatusWeekly" parameterType="cmap" resultType="cmap">
		SELECT
		usertbl.DeptFullPath as "DeptFullPath"
		,usertbl.UserName as "UserName"
		,usertbl.DeptName as "DeptName"
		,usertbl.JobPositionName as "JobPositionName"
		,usertbl.JobLevelName as "JobLevelName"
		,usertbl.JobTitleName as "JobTitleName"
		,usertbl.EnterDate as "EnterDate"
		,usertbl.PhotoPath as "PhotoPath"
		,usertbl.UserCode                     as "TargetUserCode"
		,usertbl.UserCode                           as "UserCode"
		,usertbl.SortKey as "SortKey"
		,usertbl.JobPositionSortKey as "JobPositionSortKey"
		,usertbl.JobLevelSortKey as "JobLevelSortKey"
		,usertbl.JobTitleSortKey as "JobTitleSortKey"
		,usertbl.DeptSortKey as "DeptSortKey"
		,usertbl.JobTitlecode as "JobTitlecode"
		<foreach collection="WeeksNum" item="item" index="index" separator="" open="" close="">
			, AttDayWeeksNum_${index} as "AttDayWeeksNum_${index}"
			, AttAc_${index} as "AttAc_${index}"
			, AttAcD_${index} as "AttAcD_${index}"
			, AttAcN_${index} as "AttAcN_${index}"
			, AttReal_${index} as "AttReal_${index}"
			, ExtenAc_${index} as "ExtenAc_${index}"
			, ExtenAcD_${index} as "ExtenAcD_${index}"
			, ExtenAcN_${index} as "ExtenAcN_${index}"
			, HoliAc_${index} as "HoliAc_${index}"
			, HoliAcD_${index} as "HoliAcD_${index}"
			, HoliAcN_${index} as "HoliAcN_${index}"
			, TotWorkTime_${index} as "TotWorkTime_${index}"
			, AttRealConfTime_${index} as "AttRealConfTime_${index}"
			, userWorkInfo_${index} as "userWorkInfo_${index}"
			, MonthlyAttAcSum_${index} as "MonthlyAttAcSum_${index}"
			, WorkingSystemType_${index} as "WorkingSystemType_${index}"
		</foreach>
			,FN_ATTEND_DAYNIGHTWORKTIME(usertbl.UserCode, '${CompanyCode}', '${StartDate}', '${EndDate}', '${NightStartDate}', '${NightEndDate}','${HolNightStartDate}', '${HolNightEndDate}','${ExtNightStartDate}','${ExtNightEndDate}') as "summary"
		FROM(
		SELECT UserCode
		<foreach collection="WeeksNum" item="item" index="index" separator="" open="" close="">
			, MAX(AttDayWeeksNum_${index}) as AttDayWeeksNum_${index}
			, NVL(SUM(AttAc_${index}),0) as AttAc_${index}
			, NVL(SUM(AttAcD_${index}),0) as AttAcD_${index}
			, NVL(SUM(AttAcN_${index}),0) as AttAcN_${index}
			, NVL(SUM(AttReal_${index}),0) as AttReal_${index}
			, NVL(SUM(ExtenAc_${index}),0) as ExtenAc_${index}
			, NVL(SUM(ExtenAcD_${index}),0) as ExtenAcD_${index}
			, NVL(SUM(ExtenAcN_${index}),0) as ExtenAcN_${index}
			, NVL(SUM(HoliAc_${index}),0) as HoliAc_${index}
			, NVL(SUM(HoliAcD_${index}),0) as HoliAcD_${index}
			, NVL(SUM(HoliAcN_${index}),0) as HoliAcN_${index}
			, NVL(SUM(TotWorkTime_${index}),0) as TotWorkTime_${index}
			, NVL(SUM(AttRealConfTime_${index}),0) as AttRealConfTime_${index}
			, MAX(userWorkInfo_${index}) as userWorkInfo_${index}
			, MAX(MonthlyAttAcSum_${index}) as MonthlyAttAcSum_${index}
			, NVL(MAX(WorkingSystemType_${index}),0) as WorkingSystemType_${index}
		</foreach>
		FROM (
		SELECT
		dayList
		,DeptFullPath,DisplayName as UserName
		,DeptName,JobPositionName,JobLevelName,JobTitleName,EnterDate,PhotoPath
		,TargetUserCode,UserCode,SchName,VacFlag,VacOffFlag,WorkSts
		,AttDayStartTime,AttDayEndTime,AttStartTime,AttEndTime
		,AttConfirmYn,StartSts,EndSts,
		SortKey,
		JobPositionSortKey,
		JobLevelSortKey,
		JobTitleSortKey,
		DeptSortKey,
		JobTitlecode
		<foreach collection="WeeksNum" item="item" index="index" separator="" open="" close="">
			, ${item} as AttDayWeeksNum_${index}
		</foreach>
		<foreach collection="listRangeFronToDate" item="item" index="index" separator="" open="" close="">
			<foreach item="value" index="key" collection="item.entrySet()" separator="">
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD')) and (WorkSts = 'ON' or WorkSts = 'HOL') then sum(AttAc) END as AttAc_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD')) and (WorkSts = 'ON' or WorkSts = 'HOL') then sum(AttAcD) END as AttAcD_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD')) and (WorkSts = 'ON' or WorkSts = 'HOL') then sum(AttAcN) END as AttAcN_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then sum(AttReal) END as AttReal_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then sum(ExtenAc) END as ExtenAc_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then sum(ExtenAcD) END as ExtenAcD_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then sum(ExtenAcN) END as ExtenAcN_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then sum(HoliAc) END as HoliAc_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then sum(HoliAcD) END as HoliAcD_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then sum(HoliAcN) END as HoliAcN_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then sum(TotWorkTime) END as TotWorkTime_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then sum(AttRealConfTime) END as AttRealConfTime_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then MAX(userWorkInfo) END as userWorkInfo_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then MAX(MonthlyAttAcSum) END as MonthlyAttAcSum_${index}
				, case when (dayList between TO_DATE('${key}','YYYYMMDD') and TO_DATE('${value}','YYYYMMDD'))  then MAX(WorkingSystemType) END as WorkingSystemType_${index}
			</foreach>
		</foreach>
		FROM (SELECT
		dayList
		,DeptFullPath,DisplayName,DeptName,JobPositionName,JobLevelName,JobTitleName,EnterDate,PhotoPath
		,TargetUserCode, TargetUserCode as UserCode,SchName,VacFlag,VacOffFlag,WorkSts
		,AttDayStartTime,AttDayEndTime,AttStartTime,AttEndTime
		,AttConfirmYn,StartSts,EndSts
		,AttAc
		,AttAcD
		,AttAcN
		,AttReal
		,DECODE(ExtenNotEnough,'Y',ExtenAc,0) ExtenAc
		,DECODE(ExtenNotEnough,'Y',ExtenAcD,0) ExtenAcD
		,DECODE(ExtenNotEnough,'Y',ExtenAcN,0) ExtenAcN
		,DECODE(HoliNotEnough,'Y',HoliAc,0) HoliAc
		,DECODE(HoliNotEnough,'Y',HoliAcD,0) HoliAcD
		,DECODE(HoliNotEnough,'Y',HoliAcN,0) HoliAcN
		,NVL(ExtenCnt,0) ExtenCnt
		,NVL(HoliCnt,0) HoliCnt
		,MonthlyAttAcSum
		,WorkingSystemType
		,AssYn
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(ExtenNotEnough,'Y' , ExtenAc , 0) +DECODE(HoliNotEnough, 'Y' , HoliAc,0)+DECODE(AssYn,'Y',0,VacTime) TotWorkTime
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(AssYn,'Y',0,VacTime) AttRealTime
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(ExtenNotEnough, 'Y' , ExtenAc , 0) +DECODE(HoliNotEnough, 'Y' , HoliAc,0)	 AttRealConfTime
		,ROUND((AttEndTime - AttStartTime)*1440,0) as v_startToEndSec
		,jh_JobStsName
		,Etc
		,UserEtc
		,ExtenNotEnough
		,HoliNotEnough

		,CASE WHEN CoreStartTime IS NOT NULL AND CoreEndTime IS NOT NULL and WorkSts = 'ON' THEN
		TO_CHAR(CoreStartTime,'HH24:MI')||'~'||TO_CHAR(CoreEndTime,'HH24:MI')
		ELSE '' END as CoreTime
		,CASE WHEN AttDayStartTime IS NOT NULL AND AttDayStartTime != '' AND AttDayEndTime IS NOT NULL AND AttDayEndTime != '' THEN
		CASE WHEN TO_DATE(TO_CHAR(AttDayStartTime,'HH24MISS'),'HH24MISS') <![CDATA[<=]]>  TO_DATE(TO_CHAR(CoreStartTime,'HH24MISS'),'HH24MISS')
		AND TO_DATE(TO_CHAR(AttDayEndTime,'HH24MISS'),'HH24MISS') <![CDATA[>=]]> TO_DATE(TO_CHAR(CoreEndTime,'HH24MISS'),'HH24MISS') THEN
		'Y'
		ELSE 'N' END
		ELSE NULL END as CoreTimeObey
		,WorkAddr
		,WorkZone
		,WorkPointX
		,WorkPointY
		,StartPointX
		,StartPointY
		,StartAddr
		,EndPointX
		,EndPointY
		,EndAddr
		,VacCnt
		,userWorkInfo
		,SortKey,
		JobPositionSortKey,
		JobLevelSortKey,
		JobTitleSortKey,
		DeptSortKey,
		JobTitlecode
		FROM
		(
		SELECT
		dl.dayList
		,weekd
		,TargetUserCode
		,DeptCode
		,m.CommuSeq
		,NVL(m.Etc,'') Etc
		,m.TardyReason
		,m.UserEtc
		,m.LeaveEarlyReason
		,m.AttStartTime
		,m.AttEndTime
		,case when VacCnt <![CDATA[>=]]> 1 then 0 else NVL(m.AttReal,0) end AttReal
		,NVL(m.AttAc,0) AttAc
		,NVL(fn_attend_getNightDayTimeV2(m.AttDayStartTime, m.AttDayEndTime, '${NightStartDate}', '${NightEndDate}', NVL(j.AttDayIdle,NVL(m.AttIdle,0)), 'D'),0)  as AttAcD
		,NVL(fn_attend_getNightDayTimeV2(m.AttDayStartTime, m.AttDayEndTime, '${NightStartDate}', '${NightEndDate}', NVL(j.AttDayIdle,NVL(m.AttIdle,0)), 'N'),0)  as AttAcN
		,NVL(m.AttIdle,0) AttIdle
		,NVL(m.ExtenReal,0) ExtenReal
		,NVL(m.ExtenAc,0) ExtenAc
		,CASE WHEN m.ExtenCnt>1 THEN
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'D'),0)
		ELSE
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'D'),0) END  as ExtenAcD
		,CASE WHEN m.ExtenCnt>1 THEN
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'N'),0)
		ELSE
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'N'),0) END  as ExtenAcN
		,CASE WHEN m.AttEndTime is not null and m.AttEndTime <![CDATA[>=]]> m.ExtenEnd THEN  'Y' ELSE 'N' END as ExtenNotEnough
		,CASE WHEN m.AttStartTime is not null and m.AttStartTime <![CDATA[<=]]> m.HoliStart AND m.AttEndTime is not null and m.AttEndTime <![CDATA[>=]]> m.HoliEnd THEN 'Y' ELSE 'N' END as HoliNotEnough
		,m.ExtenStart
		,m.ExtenEnd
		,NVL(m.HoliReal,0) HoliReal
		,NVL(m.HoliAc,0) HoliAc
		,NVL(fn_attend_getNightDayTimeV2(m.HoliStart, m.HoliEnd, '${HolNightStartDate}', '${HolNightEndDate}', ehh.IdleTime, 'D'),0)  as HoliAcD
		,NVL(fn_attend_getNightDayTimeV2(m.HoliStart, m.HoliEnd, '${HolNightStartDate}', '${HolNightEndDate}', ehh.IdleTime, 'N'),0)  as HoliAcN
		,m.HoliStart
		,m.HoliEnd
		,m.ExtenCnt
		,m.HoliCnt
		,m.AttConfirmYn
		,m.AttConfirmTime
		,m.StartSts
		,m.EndSts
		,m.StartPointX
		,m.StartPointY
		,m.StartAddr
		,m.EndPointX
		,m.EndPointY
		,m.EndAddr
		,m.StartChangeYn
		,m.EndChangeYn
		,m.CoreStartTime
		,m.CoreEndTime
		,NVL(m.MonthlyAttAcSum, 0) MonthlyAttAcSum
		,s.WorkingSystemType
		,j.WorkSts
		,DECODE(TO_CHAR(j.AttDayStartTime,'YYYY-MM-DD HH24:MI:SS'), '0000-00-00 00:00:00', '',j.AttDayStartTime) as AttDayStartTime
		,DECODE(TO_CHAR(j.AttDayEndTime,'YYYY-MM-DD HH24:MI:SS'), '0000-00-00 00:00:00', '',j.AttDayEndTime) as AttDayEndTime
		,j.NextDayYn
		,j.ConfmYn
		,NVL(j.AssYn,'N') AssYn
		,j.WorkZone
		,j.WorkAddr
		,j.WorkPointX
		,j.WorkPointY
		,j.AllowRadius
		,j.StartZone
		,j.StartPointX as jobStartPointX
		,j.StartPointY as jobStartPointY
		,j.EndZone
		,j.EndPointX as jobEndPointX
		,j.EndPointY as jobEndPointY
		,j.Etc jobEtc
		,case when  TO_DATE(#{UR_TimeZone},'YYYYMMDD') <![CDATA[<]]>  TO_DATE(TO_CHAR(j.JobDate,'YYYYMMDD'),'YYYYMMDD') THEN 0 else j.AttDayAc end AttDayAc
		,NVL(s.SchName,'') SchName
		,Fn_BaseGetDictionary_S(#{lang},s.MultiDisplayName) schMultiDisplayName
		,BaseYn
		,CASE WHEN JobStsHisSeq > 0 THEN
		case when JobStsHisSeq > 1 then Fn_BaseGetDictionary_S(#{lang},jh.JobStsName)||'+' else Fn_BaseGetDictionary_S(#{lang} ,jh.JobStsName) end
		ELSE '' END as jh_JobStsName
		,jh.StartTime as jh_StartTime
		,CASE WHEN NVL(VacCnt,0) >  0 THEN VacFlag ELSE '' END as VacFlag
		,case when NVL(VacCnt,0) > 0 then
		NVL(j.AttDayAC,0)*NVL(VacCnt,0)
		else
		case when j.WorkSts = 'HOL' AND j.AttDayAC > 0 then
		j.AttDayAC
		else 0 end
		END as VacTime
		,VacOffFlag
		,DeptFullPath,DisplayName,DeptName,JobPositionName,JobLevelName, JobTitleName,
		EnterDate,
		PhotoPath,
		JobPositionSortKey,
		DeptSortKey,
		JobLevelSortKey,
		JobTitleSortKey,
		SortKey,
		VacCnt,
		JobTitlecode,
		Fn_attend_getUserWorkInfo(TargetUserCode, dl.dayList) as   userWorkInfo

		FROM
		(
		SELECT
		daylist ,weekd
		,UserCode TargetUserCode
		,DeptFullPath,DisplayName,DeptName,JobPositionName, JobLevelName, JobTitleName,EnterDate,PhotoPath,DeptCode
		,JobPositionSortKey,DeptSortKey,SortKey
		,JobLevelSortKey
		,JobTitleSortKey
		,JobTitlecode
		FROM
		(
		SELECT
		daylist
		,weekd
		FROM attend_daylist
		WHERE dayList BETWEEN TO_DATE(#{StartDate},'YYYYMMDD') AND TO_DATE(#{EndDate},'YYYYMMDD')
		) dl ,(
		SELECT
		u.UserCode
		,CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang},u.MultiDisplayName))>0 THEN
		Fn_BaseGetDictionary_S(#{lang},u.MultiDisplayName)
		ELSE u.DisplayName END as DisplayName
		,Fn_BaseGetDictionary_S(#{lang},MultiDeptName) DeptName
		,Fn_BaseGetDictionary_S(#{lang},MultiJobPositionName) JobPositionName
		,Fn_BaseGetDictionary_S(#{lang},MultiJobLevelName) JobLevelName
		,Fn_BaseGetDictionary_S(#{lang},MultiJobTitleName) JobTitleName
		,u.EnterDate
		,b.JobPositionSortKey
		,b.JobLevelSortKey
		,b.JobTitleSortKey
		,b.JobTitlecode
		,b.DeptSortKey
		,b.SortKey
		,u.PhotoPath
		,DeptCode
		,(SELECT DisplayName FROM sys_object_group r WHERE GroupCode = sog.MemberOf) DeptFullPath
		FROM sys_object_user_basegroup  b
		JOIN sys_object_user u					ON b.UserCode = u.UserCode
		LEFT JOIN sys_object_group sog			ON b.DeptCode = sog.GroupCode
		WHERE b.CompanyCode = #{CompanyCode}
		<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
			U.UserCode = #{user.UserCode} AND DeptCode = #{user.DeptCode}
		</foreach>
		) u
		)dl
		LEFT JOIN attend_commuting_mst m	 ON dl.dayList = m.TargetDate		AND m.CompanyCode = #{CompanyCode}			AND dl.TargetUserCode = m.UserCode
		LEFT JOIN attend_job j			 ON dl.dayList = j.JobDate			AND j.CompanyCode = #{CompanyCode}			AND dl.TargetUserCode = j.UserCode
		LEFT JOIN attend_schedule s	 ON j.SchSeq = s.SchSeq
		LEFT JOIN attend_job_history jh ON dl.dayList = jh.JobDate			AND TargetUserCode = jh.UserCode			AND jh.CompanyCode = #{CompanyCode}
		LEFT JOIN (SELECT   vv.VacDate as dayList, UR_Code, vv.VacFlag, vv.VacOffFlag, vv.VacCnt
					FROM  attend_daylist d
					LEFT JOIN (select vd.VacDate, SUM(vd.VacDay) as VacCnt, vd.UR_Code
						, LISTAGG(REPLACE(VacFlag,' ',''),'|') WITHIN GROUP(ORDER BY StartTime, VacOffFlag ASC) as VacFlag
						, LISTAGG(REPLACE(VacOffFlag,' ',''),'|') WITHIN GROUP(ORDER BY StartTime, VacOffFlag ASC) as VacOffFlag
						from vm_vacationinfo_day vd
						where 1=1
						<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
							UR_Code = #{user.UserCode}
						</foreach>
						group by vd.VacDate, vd.UR_Code) vv ON d.dayList = vv.VacDate
						WHERE  d.dayList BETWEEN #{StartDate} AND #{EndDate}
					) v
					ON dl.dayList = v.dayList AND dl.TargetUserCode = v.UR_Code
		LEFT JOIN (select NVL(NULLIF(IdleTime,''),0) as IdleTime, jobDate, UserCode, JobStsName, CompanyCode, ApprovalSts from attend_extensionholiday) eho ON dl.dayList = eho.jobDate AND dl.TargetUserCode = eho.UserCode AND eho.JobStsName = 'O' AND eho.CompanyCode = #{CompanyCode} AND eho.ApprovalSts = 'Y'
		LEFT JOIN (select NVL(NULLIF(IdleTime,''),0) as IdleTime, jobDate, UserCode, JobStsName, CompanyCode, ApprovalSts from attend_extensionholiday) ehh ON dl.dayList = ehh.jobDate AND dl.TargetUserCode = ehh.UserCode AND ehh.JobStsName = 'H' AND ehh.CompanyCode = #{CompanyCode} AND ehh.ApprovalSts = 'Y'

		) att
		) tt
		GROUP BY dayList
		,DeptFullPath, DisplayName
		,DeptName,JobPositionName, JobLevelName, JobTitleName,EnterDate,PhotoPath
		,TargetUserCode,UserCode,SchName,VacFlag,VacOffFlag,WorkSts
		,AttDayStartTime,AttDayEndTime,AttStartTime,AttEndTime
		,AttConfirmYn,StartSts,EndSts,
		SortKey,
		JobPositionSortKey,
		JobLevelSortKey,
		JobTitleSortKey,
		DeptSortKey,
		JobTitlecode
		) tb
		GROUP BY  UserCode
		)tbl,
		(SELECT u.UserCode,
		CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang}, u.MultiDisplayName)) >
		0 THEN Fn_BaseGetDictionary_S(#{lang}, u.MultiDisplayName)
		ELSE u.DisplayName END as                                UserName,
		Fn_BaseGetDictionary_S(#{lang}, MultiDeptName)        DeptName,
		Fn_BaseGetDictionary_S(#{lang}, MultiJobPositionName) JobPositionName,
		Fn_BaseGetDictionary_S(#{lang}, MultiJobLevelName)    JobLevelName,
		Fn_BaseGetDictionary_S(#{lang}, MultiJobTitleName)    JobTitleName,
		u.EnterDate,
		b.JobPositionSortKey,
		b.JobLevelSortKey,
		b.JobTitleSortKey,
		b.JobTitlecode,
		b.DeptSortKey,
		b.SortKey,
		u.PhotoPath,
		DeptCode,
		(SELECT DisplayName
		FROM sys_object_group r
		WHERE GroupCode = sog.MemberOf)                             DeptFullPath
		FROM sys_object_user_basegroup b
		JOIN sys_object_user u ON b.UserCode = u.UserCode
		LEFT JOIN sys_object_group sog ON b.DeptCode = sog.GroupCode
		WHERE b.CompanyCode = #{CompanyCode} ) usertbl

		WHERE 1 = 1
		and tbl.UserCode = usertbl.USERCODE
		<if test='weeklyWorkValue != null and weeklyWorkValue != "" and weeklyWorkValue != "0"'>
			<if test='weeklyWorkType != null and weeklyWorkType != "" and weeklyWorkType == "over"'>
				AND (
				<foreach collection="WeeksNum" item="item" index="index" separator="or" open="" close="">
					TotWorkTime_${index} <![CDATA[>]]> #{weeklyWorkValue}
				</foreach>
				)
			</if>
			<if test='weeklyWorkType != null and weeklyWorkType != "" and weeklyWorkType == "under"'>
				AND (
				<foreach collection="WeeksNum" item="item" index="index" separator="and" open="" close="">
					TotWorkTime_${index} <![CDATA[<=]]> #{weeklyWorkValue}
				</foreach>
				)
			</if>
		</if>
		<trim prefix="ORDER BY"  prefixOverrides =",">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			"JobTitleSortKey" ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			"JobLevelSortKey" ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			"JobPositionSortKey" ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			"UserName" ASC
				  		</if>
				  	</foreach>
				  	, usertbl.SortKey, usertbl.JobTitlecode, usertbl.EnterDate
			  	</when>
			</choose>
		</trim>
	</select>


	<select id="getUserAttStatusDaily" parameterType="cmap" resultType="cmap">
		SELECT
		TO_CHAR(dayList,'YYYY-MM-DD') as "dayList"
		,DeptFullPath as "DeptFullPath"
		,UserName as "UserName"
		,DeptName as "DeptName"
		,JobPositionName as "JobPositionName"
		,JobTitleName as "JobTitleName"
		,EnterDate as "EnterDate"
		,PhotoPath as "PhotoPath"
		,TargetUserCode as "TargetUserCode"
		,UserCode as "UserCode"
		,SchName as "SchName"
		,VacFlag as "VacFlag"
		,VacOffFlag as "VacOffFlag"
		,VacCnt as "VacCnt"
		,VacAmPmVacDay as "VacAmPmVacDay"
		,VacCodeName as "VacCodeName"
		,WorkSts as "WorkSts"
		,AttDayStartTime as "AttDayStartTime"
		,AttDayEndTime as "AttDayEndTime"
		,AttStartTime as "AttStartTime"
		,AttEndTime as "AttEndTime"
		,AttConfirmYn as "AttConfirmYn"
		,StartSts as "StartSts"
		,EndSts as "EndSts"
		,SortKey as "SortKey"
		,JobPositionSortKey as "JobPositionSortKey"
		,JobLevelSortKey as "JobLevelSortKey"
		,JobTitleSortKey as "JobTitleSortKey"
		,DeptSortKey as "DeptSortKey"
		,JobTitlecode as "JobTitlecode"
		,AttAc as "AttAc"
		,AttAcD as "AttAcD"
		,AttAcN as "AttAcN"
		,AttReal as "AttReal"
		,ExtenAc as "ExtenAc"
		,ExtenAcD as "ExtenAcD"
		,ExtenAcN as "ExtenAcN"
		,HoliAc as "HoliAc"
		,HoliAcD as "HoliAcD"
		,HoliAcN as "HoliAcN"
		,TotWorkTime as "TotWorkTime"
		,AttRealTime as "AttRealTime"
		,AttRealConfTime as "AttRealConfTime"
		,MonthlyAttAcSum as "MonthlyAttAcSum"
		,WorkingSystemType as "WorkingSystemType"
		,userWorkInfo as "userWorkInfo"
		,TO_CHAR(TO_DATE(AttDayStartTime, 'YYYY-MM-DD HH24:MI:SS'), 'HH24:MIAM')    as "v_AttDayStartTime"
		,TO_CHAR(TO_DATE(AttDayEndTime, 'YYYY-MM-DD HH24:MI:SS'), 'HH24:MIAM')   as "v_AttDayEndTime"
		,CASE WHEN TO_DATE(TO_CHAR(TO_DATE(AttDayStartTime, 'YYYY-MM-DD HH24:MI:SS'),'YYYYMMDD'),'YYYYMMDD')  <![CDATA[<]]>  TO_DATE(TO_CHAR(TO_DATE(AttDayEndTime, 'YYYY-MM-DD HH24:MI:SS'),'YYYYMMDD'),'YYYYMMDD') THEN
		'Y'
		ELSE 'N' END as v_NextDayYn
		,TO_CHAR(AttStartTime, 'HH24:MIAM') as "v_AttStartTime"
		,TO_CHAR(AttEndTime, 'HH24:MIAM') as "v_AttEndTime"

		,TO_CHAR(TO_DATE(AttDayStartTime,'YYYY-MM-DD HH24:MI:SS'), 'HH24') as "v_AttDayStartHour"
		,TO_CHAR(TO_DATE(AttDayStartTime,'YYYY-MM-DD HH24:MI:SS'), 'MI') as "v_AttDayStartMin"
		,TO_CHAR(TO_DATE(AttDayEndTime,'YYYY-MM-DD HH24:MI:SS'), 'HH24')  as "v_AttDayEndHour"
		,TO_CHAR(TO_DATE(AttDayEndTime,'YYYY-MM-DD HH24:MI:SS'), 'MI')  as "v_AttDayEndMin"
		,TO_CHAR(TO_DATE(AttStartTime,'YYYY-MM-DD HH24:MI:SS'), 'HH24')  as "v_AttStartHour"
		,TO_CHAR(TO_DATE(AttStartTime,'YYYY-MM-DD HH24:MI:SS'), 'MI')  as "v_AttStartMin"
		,TO_CHAR(AttEndTime, 'HH24') as "v_AttEndHour"
		,TO_CHAR(AttEndTime, 'MI')   as "v_AttEndMins"

		,StartPointX as "StartPointX"
		,StartPointY as "StartPointY"
		,StartAddr as "StartAddr"
		,EndPointX as "EndPointX"
		,EndPointY as "EndPointY"
		,EndAddr as "EndAddr"
		,CASE WHEN VacFlag IS NOT NULL THEN
		(SELECT MAX(CodeName) FROM sys_base_code WHERE codegroup='VACATION_TYPE' AND CODE=VacFlag)
		END as "VacName"
		FROM (
		SELECT
		dayList
		,DeptFullPath,DisplayName as UserName
		,DeptName,JobPositionName, JobTitleName,EnterDate,PhotoPath
		,TargetUserCode,UserCode,SchName,VacFlag,VacOffFlag,WorkSts
		,VacCnt ,VacAmPmVacDay ,VacCodeName
		,AttDayStartTime,AttDayEndTime,AttStartTime,AttEndTime
		,AttConfirmYn,StartSts,EndSts,
		SortKey,
		JobPositionSortKey,
		JobLevelSortKey,
		JobTitleSortKey,
		DeptSortKey,
		JobTitlecode
		, case when WorkSts = 'ON' or WorkSts = 'HOL' then NVL(AttAc, 0) END as AttAc
		, case when WorkSts = 'ON' or WorkSts = 'HOL' then NVL(AttAcD, 0) END as AttAcD
		, case when WorkSts = 'ON' or WorkSts = 'HOL' then NVL(AttAcN, 0) END as AttAcN
		, NVL(AttReal, 0) as AttReal
		, NVL(ExtenAc, 0) as ExtenAc
		, NVL(ExtenAcD, 0) as ExtenAcD
		, NVL(ExtenAcN, 0) as ExtenAcN
		, NVL(HoliAc, 0) as HoliAc
		, NVL(HoliAcD, 0) as HoliAcD
		, NVL(HoliAcN, 0) as HoliAcN
		, NVL(TotWorkTime, 0) as TotWorkTime
		, NVL(AttRealTime, 0) as AttRealTime
		, NVL(AttRealConfTime, 0) as AttRealConfTime
		, MonthlyAttAcSum
		, WorkingSystemType
		, userWorkInfo
		, StartPointX
		, StartPointY
		, StartAddr
		, EndPointX
		, EndPointY
		, EndAddr
		FROM (SELECT
		dayList
		,DeptFullPath,DisplayName,DeptName,JobPositionName, JobTitleName,EnterDate,PhotoPath
		,TargetUserCode,UserCode,SchName,VacFlag,VacOffFlag,VacAmPmVacDay ,VacCodeName,WorkSts
		,AttDayStartTime,AttDayEndTime,AttStartTime,AttEndTime
		,AttConfirmYn,StartSts,EndSts
		,AttAc
		,AttAcD
		,AttAcN
		,AttReal
		,DECODE(ExtenNotEnough,'Y',ExtenAc,0) ExtenAc
		,DECODE(ExtenNotEnough,'Y',ExtenAcD,0) ExtenAcD
		,DECODE(ExtenNotEnough,'Y',ExtenAcN,0) ExtenAcN
		,DECODE(HoliNotEnough,'Y',HoliAc,0) HoliAc
		,DECODE(HoliNotEnough,'Y',HoliAcD,0) HoliAcD
		,DECODE(HoliNotEnough,'Y',HoliAcN,0) HoliAcN
		,NVL(ExtenCnt,0) ExtenCnt
		,NVL(HoliCnt,0) HoliCnt
		,MonthlyAttAcSum
		,WorkingSystemType
		,AssYn
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(ExtenNotEnough,'Y' , ExtenAc , 0) +DECODE(HoliNotEnough,'Y' , HoliAc,0)+DECODE(AssYn,'Y',0,VacTime) TotWorkTime
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(AssYn,'Y',0,VacTime) AttRealTime
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(ExtenNotEnough,'Y' , ExtenAc , 0) +DECODE(HoliNotEnough,'Y' , HoliAc,0)	 AttRealConfTime
		,ROUND((AttEndTime - AttStartTime)*1440,0) as v_startToEndSec
		,jh_JobStsName
		,Etc
		,UserEtc
		,ExtenNotEnough
		,HoliNotEnough
		,WorkAddr
		,WorkZone
		,WorkPointX
		,WorkPointY
		,StartPointX
		,StartPointY
		,StartAddr
		,EndPointX
		,EndPointY
		,EndAddr
		,VacCnt
		,userWorkInfo
		,SortKey,
		JobPositionSortKey,
		JobLevelSortKey,
		JobTitleSortKey,
		DeptSortKey,
		JobTitlecode
		FROM
		(
		SELECT
		dl.dayList
		,weekd
		,TargetUserCode
		,TargetUserCode UserCode
		,DeptCode
		,m.CommuSeq
		,NVL(m.Etc,'') Etc
		,m.TardyReason
		,m.UserEtc
		,m.LeaveEarlyReason
		,m.AttStartTime
		,m.AttEndTime
		,case when VacCnt <![CDATA[>=]]> 1 then 0 else NVL(m.AttReal,0) end AttReal
		,NVL(m.AttAc,0) AttAc
		,NVL(fn_attend_getNightDayTimeV2(m.AttDayStartTime, m.AttDayEndTime, '${NightStartDate}', '${NightEndDate}', NVL(j.AttDayIdle,NVL(m.AttIdle,0)), 'D'),0)  as AttAcD
		,NVL(fn_attend_getNightDayTimeV2(m.AttDayStartTime, m.AttDayEndTime, '${NightStartDate}', '${NightEndDate}', NVL(j.AttDayIdle,NVL(m.AttIdle,0)), 'N'),0)  as AttAcN
		,NVL(m.AttIdle,0) AttIdle
		,NVL(m.ExtenReal,0) ExtenReal
		,NVL(m.ExtenAc,0) ExtenAc
		,CASE WHEN m.ExtenCnt>1 THEN
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'D'),0)		ELSE
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'D'),0) END  as ExtenAcD
		,CASE WHEN m.ExtenCnt>1 THEN
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'N'),0)
		ELSE
			NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'N'),0) END  as ExtenAcN
		,CASE WHEN m.AttEndTime is not null and m.AttEndTime <![CDATA[>=]]> m.ExtenEnd THEN 'Y' ELSE 'N' END as ExtenNotEnough
		,CASE WHEN m.AttStartTime is not null and m.AttStartTime <![CDATA[<=]]> m.HoliStart AND m.AttEndTime is not null and m.AttEndTime <![CDATA[>=]]> m.HoliEnd THEN 'Y' ELSE 'N' END as HoliNotEnough
		,m.ExtenStart
		,m.ExtenEnd
		,NVL(m.HoliReal,0) HoliReal
		,NVL(m.HoliAc,0) HoliAc
		,NVL(fn_attend_getNightDayTimeV2(m.HoliStart, m.HoliEnd, '${HolNightStartDate}', '${HolNightEndDate}', ehh.IdleTime, 'D'),0)  as HoliAcD
		,NVL(fn_attend_getNightDayTimeV2(m.HoliStart, m.HoliEnd, '${HolNightStartDate}', '${HolNightEndDate}', ehh.IdleTime, 'N'),0)  as HoliAcN
		,m.HoliStart
		,m.HoliEnd
		,m.ExtenCnt
		,m.HoliCnt
		,m.AttConfirmYn
		,m.AttConfirmTime
		,m.StartSts
		,m.EndSts
		,m.StartPointX
		,m.StartPointY
		,m.StartAddr
		,m.EndPointX
		,m.EndPointY
		,m.EndAddr
		,m.StartChangeYn
		,m.EndChangeYn
		,m.CoreStartTime
		,m.CoreEndTime
		,NVL(m.MonthlyAttAcSum, 0) MonthlyAttAcSum
		,s.WorkingSystemType
		,j.WorkSts
		,DECODE(TO_CHAR(j.AttDayStartTime,'YYYY-MM-DD HH24:MI:SS'), '0000-00-00 00:00:00', '',j.AttDayStartTime) as AttDayStartTime
		,DECODE(TO_CHAR(j.AttDayEndTime,'YYYY-MM-DD HH24:MI:SS'), '0000-00-00 00:00:00', '',j.AttDayEndTime) as AttDayEndTime
		,j.NextDayYn
		,j.ConfmYn
		,NVL(j.AssYn,'N') AssYn
		,j.WorkZone
		,j.WorkAddr
		,j.WorkPointX
		,j.WorkPointY
		,j.AllowRadius
		,j.StartZone
		,j.StartPointX jobStartPointX
		,j.StartPointY jobStartPointY
		,j.EndZone
		,j.EndPointX jobEndPointX
		,j.EndPointY jobEndPointY
		,j.Etc jobEtc
		,case when  TO_DATE(#{UR_TimeZone},'YYYY-MM-DD') <![CDATA[<]]>  TO_DATE(TO_CHAR(j.JobDate,'YYYYMMDD'),'YYYYMMDD') THEN 0 else j.AttDayAc end AttDayAc
		,NVL(s.SchName,'') SchName
		,Fn_BaseGetDictionary_S(#{lang},s.MultiDisplayName) schMultiDisplayName
		,BaseYn
		,CASE WHEN JobStsHisSeq > 0 THEN
		case when JobStsHisSeq > 1 then
		Fn_BaseGetDictionary_S(#{lang},jh.JobStsName)||'+'
		else Fn_BaseGetDictionary_S(#{lang},jh.JobStsName) end
		ELSE '' END as jh_JobStsName
		,jh.StartTime jh_StartTime
		,CASE WHEN NVL(VacCnt,0) >  0 THEN VacFlag ELSE '' END as VacFlag
		,case when NVL(VacCnt,0) > 0 then
		NVL(j.AttDayAC,0)*NVL(VacCnt,0)
		else
		case when j.WorkSts = 'HOL' AND j.AttDayAC > 0 then
		j.AttDayAC else 0  end
		end as VacTime
		,VacOffFlag
		,VacAmPmVacDay, VacCodeName
		,DeptFullPath,DisplayName,DeptName,JobPositionName, JobTitleName,
		EnterDate,
		PhotoPath,
		JobPositionSortKey,
		DeptSortKey,
		JobLevelSortKey,
		JobTitleSortKey,
		SortKey,
		VacCnt,
		JobTitlecode,
		Fn_attend_getUserWorkInfo(TargetUserCode, dl.dayList) as   userWorkInfo

		FROM
		(
		SELECT
		daylist ,weekd
		,UserCode TargetUserCode
		,DeptFullPath,DisplayName,DeptName,JobPositionName, JobTitleName,EnterDate,PhotoPath,DeptCode
		,JobPositionSortKey,DeptSortKey,SortKey
		,JobLevelSortKey
		,JobTitleSortKey
		,JobTitlecode
		FROM
		(
		SELECT
		daylist
		,weekd
		FROM attend_daylist
		WHERE dayList BETWEEN TO_DATE(#{StartDate},'YYYYMMDD') AND TO_DATE(#{EndDate},'YYYYMMDD')
		) dl ,(
		SELECT
		u.UserCode
		,CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang},u.MultiDisplayName))>0 THEN
		Fn_BaseGetDictionary_S(#{lang},u.MultiDisplayName)
		ELSE u.DisplayName END as DisplayName
		,Fn_BaseGetDictionary_S(#{lang},MultiDeptName) DeptName
		,Fn_BaseGetDictionary_S(#{lang},MultiJobPositionName) JobPositionName
		,Fn_BaseGetDictionary_S(#{lang},MultiJobTitleName) JobTitleName
		,u.EnterDate
		,b.JobPositionSortKey
		,b.JobLevelSortKey
		,b.JobTitleSortKey
		,b.JobTitlecode
		,b.DeptSortKey
		,b.SortKey
		,u.PhotoPath
		,DeptCode
		,(SELECT DisplayName FROM sys_object_group r WHERE GroupCode = sog.MemberOf) DeptFullPath
		FROM sys_object_user_basegroup  b
		JOIN sys_object_user u					ON b.UserCode = u.UserCode
		LEFT JOIN sys_object_group sog			ON b.DeptCode = sog.GroupCode
		WHERE b.CompanyCode = #{CompanyCode}
		<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
			U.UserCode = #{user.UserCode} AND DeptCode = #{user.DeptCode}
		</foreach>
		) u
		)dl
		LEFT JOIN attend_commuting_mst m	 ON dl.dayList = m.TargetDate		AND m.CompanyCode = #{CompanyCode}			AND dl.TargetUserCode = m.UserCode
		LEFT JOIN attend_job j			 ON dl.dayList = j.JobDate			AND j.CompanyCode = #{CompanyCode}			AND dl.TargetUserCode = j.UserCode
		LEFT JOIN attend_schedule s	 ON j.SchSeq = s.SchSeq
		LEFT JOIN attend_job_history jh ON dl.dayList = jh.JobDate			AND TargetUserCode = jh.UserCode			AND jh.CompanyCode = #{CompanyCode}
		LEFT JOIN (SELECT   vv.VacDate as dayList, UR_Code, vv.VacFlag, vv.VacOffFlag, vv.VacCnt, vv.VacAmPmVacDay, vv.VacCodeName
			FROM  attend_daylist d
			LEFT JOIN (select vd.VacDate, SUM(vd.VacDay) as VacCnt, vd.UR_Code
						, LISTAGG(REPLACE(VacFlag,' ',''),'|') WITHIN GROUP(ORDER BY StartTime, VacOffFlag ASC) as VacFlag
						, LISTAGG(REPLACE(VacOffFlag,' ',''),'|') WITHIN GROUP(ORDER BY StartTime, VacOffFlag ASC) as VacOffFlag
						, LISTAGG(StartTime,'|') WITHIN GROUP(ORDER BY StartTime, VacOffFlag ASC) as StartTime
						, LISTAGG(EndTime,'|') WITHIN GROUP(ORDER BY StartTime, VacOffFlag ASC) as EndTime
						, LISTAGG(bc.CodeName,'|') WITHIN GROUP(ORDER BY StartTime, VacOffFlag ASC) as VacCodeName
						, NVL( SUM(vd.AmVacDay),0)||'|'||NVL( SUM(vd.PmVacDay),0)  as VacAmPmVacDay
						from (select UR_Code, VacDate, VacOffFlag, VacFlag, VacDay, StartTime, EndTime
						,CASE WHEN VacOffFlag = 'AM' THEN
						VacDay
						END as AmVacDay
						,CASE WHEN VacOffFlag = 'PM' THEN
						VacDay
						END as PmVacDay
						from vm_vacationinfo_day
						where 1=1
						AND VacDate BETWEEN #{StartDate} AND #{EndDate}
						<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
							UR_Code = #{user.UserCode}
						</foreach>
						) vd
						left join sys_base_code bc
						on bc.DomainID = #{domainID}
						AND bc.codegroup='VACATION_TYPE'
						AND bc.CODE=vd.VacFlag
						group by vd.VacDate, vd.UR_Code) vv ON d.dayList = vv.VacDate
						WHERE  d.dayList BETWEEN #{StartDate} AND #{EndDate}
			) v ON dl.dayList = v.dayList AND dl.TargetUserCode = v.UR_Code
		LEFT JOIN (select NVL(NULLIF(IdleTime,''),0) as IdleTime, jobDate, UserCode, JobStsName, CompanyCode, ApprovalSts from attend_extensionholiday) eho ON dl.dayList = eho.jobDate AND dl.TargetUserCode = eho.UserCode AND eho.JobStsName = 'O' AND eho.CompanyCode = #{CompanyCode} AND eho.ApprovalSts = 'Y'
		LEFT JOIN (select NVL(NULLIF(IdleTime,''),0) as IdleTime, jobDate, UserCode, JobStsName, CompanyCode, ApprovalSts from attend_extensionholiday) ehh ON dl.dayList = ehh.jobDate AND dl.TargetUserCode = ehh.UserCode AND ehh.JobStsName = 'H' AND ehh.CompanyCode = #{CompanyCode} AND ehh.ApprovalSts = 'Y'

		) att

		) tb

		) tbl
		<trim prefix="ORDER BY"  prefixOverrides =",">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			"JobTitleSortKey" ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			"JobLevelSortKey" ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			"JobPositionSortKey" ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			"UserName" ASC
				  		</if>
				  	</foreach>
				  	, SortKey, JobTitlecode, EnterDate, dayList ASC
			  	</when>
			</choose>
		</trim>
	</select>
	
	<!-- 근무상태 조회 -->
	<select id="getUserJobHistory" parameterType="cmap" resultType="cmap">
		SELECT
			JOBSTSHISSEQ AS "JobStsHisSeq"
			, AMJH.JOBSTSSEQ AS "JobStsSeq"
			, AMJH.USERCODE AS "UserCode" 
			, FN_BASEGETDICTIONARY_S(#{lang}, u.MultiDisplayName) AS "DisplayName"
			, FN_BASEGETDICTIONARY_S(#{lang}, b.MultiDeptName) AS "DeptName"
			, FN_BASEGETDICTIONARY_S(#{lang}, b.MultiJobPositionName) AS "JobPositionName"
			, FN_BASEGETDICTIONARY_S(#{lang}, b.MultiJobLevelName) AS "JobLevelName"
    		, FN_BASEGETDICTIONARY_S(#{lang}, b.MultiJobTitleName) AS "JobTitleName"
			, TO_CHAR(JOBDATE, 'YYYY-MM-DD') AS "JobDate"
			, FN_BASEGETDICTIONARY_S(#{lang}, AMJH.JOBSTSNAME) AS "JobStsName"
			, ETC AS "Etc"
			, STARTTIME AS "StartTime"
			, ENDTIME AS "EndTime"
			, TO_CHAR(TO_DATE(STARTTIME, 'HH24MI'), 'HH24:MI') AS "v_StartTime"
			, TO_CHAR(TO_DATE(ENDTIME, 'HH24MI'), 'HH24:MI') AS "v_EndTime"

			, TO_CHAR(TO_DATE(STARTTIME, 'HH24MI'), 'HH') AS "v_StartHour"
			, TO_CHAR(TO_DATE(STARTTIME, 'HH24MI'), 'MI') AS "v_StartMin"
			, TO_CHAR(TO_DATE(STARTTIME, 'HH24MI'), 'AM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_StartAP"
			, TO_CHAR(TO_DATE(ENDTIME, 'HH24MI'), 'HH') AS "v_EndHour"
			, TO_CHAR(TO_DATE(ENDTIME, 'HH24MI'), 'MI') AS "v_EndMin"
			, TO_CHAR(TO_DATE(ENDTIME, 'HH24MI'), 'AM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_EndAP"

			, TO_CHAR(TO_DATE(STARTTIME, 'HH24MI'),'HH24') AS "t_StartHour"
			, TO_CHAR(TO_DATE(ENDTIME, 'HH24MI'),'HH24') AS "t_EndHour"
			, AMJH.PROCESSID AS "ProcessId"
			, AMJS.REQMETHOD AS "ReqMethod"
			, AMJS.UPDMETHOD AS "UpdMethod"
			, AMJS.DELMETHOD AS "DelMethod"
		FROM ATTEND_JOB_HISTORY AMJH
		JOIN SYS_OBJECT_USER u ON u.UserCode = amjh.Usercode
		JOIN SYS_OBJECT_USER_BASEGROUP  b ON b.UserCode = u.UserCode AND b.JobType = 'Origin'
		JOIN SYS_OBJECT_GROUP og          ON b.CompanyCode = og.CompanyCode AND og.GroupType='Dept' AND b.DeptCode = og.GroupCode AND MemberOf != 'NOUSE'
			LEFT JOIN ATTEND_JOB_STATUS AMJS ON AMJH.JOBSTSSEQ = AMJS.JOBSTSSEQ AND AMJS.COMPANYCODE = AMJS.COMPANYCODE
		WHERE AMJH.COMPANYCODE = #{CompanyCode}
			<if test='UserCode != null and UserCode != ""'>
				AND AMJH.USERCODE = #{UserCode}
			</if>
			<if test='StartDate != null and StartDate != ""'>
				AND JOBDATE <![CDATA[>=]]> #{StartDate}
			</if>
			<if test='EndDate != null and EndDate != ""'>
				AND JOBDATE <![CDATA[<=]]> #{EndDate}
			</if>
			<if test='TargetDate != null and TargetDate != ""'>
				AND JOBDATE = #{TargetDate}
			</if>
			<if test='JobStsHisSeq != null and JobStsHisSeq != ""'>
				AND AMJH.JOBSTSHISSEQ = #{JobStsHisSeq}
			</if>
			<if test='GroupPath != null and GroupPath != ""'>
				AND og.GroupPath LIKE CONCAT(#{GroupPath},'%')
			</if>
			<if test="sJobTitleCode != null and sJobTitleCode !=''">
			    and b.JobTitleCode = #{sJobTitleCode}
			</if>
			
			<if test="sJobLevelCode != null and sJobLevelCode !=''">
			    and b.JobLevelCode = #{sJobLevelCode}
			</if>
	</select>
	
	<select id="getDayList" parameterType="cmap" resultType="cmap">
		SELECT
			TO_CHAR(DAYLIST, 'YYYY-MM-DD') AS "dayList"
			, TO_CHAR(DAYLIST, 'MM') AS "dMonth"
			, TO_CHAR(DAYLIST, 'DD') AS "dDate"
			, WEEKD AS "weekd"
		FROM ATTEND_DAYLIST
		WHERE DAYLIST BETWEEN #{StartDate} AND #{EndDate}
	</select>

	<!-- 기간 별 근무 시간 -->
	<update id="getUserAttWorkTimeProc" statementType="CALLABLE" parameterType="cmap" >
		{CALL sp_attend_getUserAttendWT(#{UserCode},#{CompanyCode},#{StartDate},#{EndDate}
			,#{TargetUserCode, mode=OUT, jdbcType=VARCHAR}
			,#{WorkDay, mode=OUT, jdbcType=VARCHAR}
			,#{WorkTime, mode=OUT, jdbcType=VARCHAR}
			,#{ExptVacTime, mode=OUT, jdbcType=VARCHAR}
			,#{k, mode=OUT, jdbcType=VARCHAR}
			,#{TotWorkTime, mode=OUT, jdbcType=VARCHAR}
			,#{TotAcWorkTime, mode=OUT, jdbcType=VARCHAR}
			,#{AttRealTime, mode=OUT, jdbcType=VARCHAR}
			,#{ExtenAc, mode=OUT, jdbcType=VARCHAR}
			,#{HoliAc, mode=OUT, jdbcType=VARCHAR}
			,#{JobStsSumTime, mode=OUT, jdbcType=VARCHAR}
			,#{TotConfWorkTime, mode=OUT, jdbcType=VARCHAR}
			,#{RemainTime, mode=OUT, jdbcType=VARCHAR}
			,#{NormalCnt, mode=OUT, jdbcType=VARCHAR}
			,#{FixWorkTime, mode=OUT, jdbcType=VARCHAR}
			,#{TotRealWorkTime, mode=OUT, jdbcType=VARCHAR}
		)}
	</update>

	<select id="getUserAttWorkTime" parameterType="cmap" resultType="cmap">
		SELECT
			TARGETUSERCODE AS "TargetUserCode"
			,FN_ATTEND_GETTIMEFORMAT(SUM(ATTREAL) + SUM(EXTENAC) + SUM(HOLIAC) + SUM(VACTIME), 'M') AS "TotWorkTime" /* 해당기간 총 근무시간 */
			,FN_ATTEND_GETTIMEFORMAT(SUM(ATTREAL) + SUM(VACTIME), 'M') AS "v_AttRealTime" /* 출퇴근 인정시간 */
			,FN_ATTEND_GETTIMEFORMAT(SUM(EXTENAC), 'M') AS "v_ExtenAc" /* 연장근무시간 */
			,FN_ATTEND_GETTIMEFORMAT(SUM(HOLIAC), 'M') AS "v_HoliAc" /* 휴일근무시간 */
			,FN_ATTEND_GETTIMEFORMAT(SUM(JOBSTSSUMTIME), 'S') AS "JobStsSumTime" /* 근무상태 시간 */
			,FN_ATTEND_GETTIMEFORMAT((#{RemainTime} * 60) - (SUM(ATTREAL) + SUM(EXTENAC) + SUM(HOLIAC) + SUM(VACTIME)), 'M') AS "RemainTime" /* 남은시간 */
		FROM
		(
			SELECT
				TARGETUSERCODE
				, DAYLIST
				, NVL(ATTREAL, 0) AS ATTREAL
				, NVL(ATTAC, 0) AS ATTAC
				, NVL(ATTIDLE, 0) AS ATTIDLE
				, NVL(EXTENAC, 0) AS EXTENAC
				, NVL(HOLIAC, 0) AS HOLIAC
				, NVL(ATTAC, 0) * CASE WHEN SUM(NVL(VACCNT, 0)) > 0 THEN 1 ELSE 0 END AS VACTIME
				, NVL(SUM(((TO_DATE(STARTTIME||'00', 'HH24MISS') - TO_DATE(ENDTIME||'00', 'HH24MISS')) * (24 * 60 * 60))), 0) AS JOBSTSSUMTIME
			FROM
			(
				SELECT
					DAYLIST
					, WEEKD
					, #{UserCode} AS TARGETUSERCODE
				FROM ATTEND_DAYLIST
				WHERE DAYLIST BETWEEN #{StartDate} AND #{EndDate}
			) DL
				LEFT JOIN ATTEND_COMMUTING_MST M ON DL.DAYLIST = M.TARGETDATE AND M.COMPANYCODE = #{CompanyCode} AND DL.TARGETUSERCODE = M.USERCODE
				LEFT JOIN ATTEND_JOB_HISTORY JH ON DL.DAYLIST = JH.JOBDATE	AND TARGETUSERCODE = JH.USERCODE AND JH.COMPANYCODE = #{CompanyCode}
				LEFT JOIN (
					SELECT
						A.*
						, CASE
							WHEN GUBUN = 'VACATION_CANCEL' OR GUBUN = 'VACATION_PUBLIC_CANCEL' THEN -1
							ELSE 1
						END AS VACCNT
					FROM VM_VACATIONINFO A
						LEFT JOIN SYS_BASE_CODE C ON A.GUBUN = C.CODE
						LEFT JOIN SYS_BASE_CODE D ON A.VACFLAG = D.CODE
				) V	ON DL.DAYLIST BETWEEN V.SDATE AND V.EDATE AND DL.TARGETUSERCODE = V.UR_CODE
			GROUP BY DL.DAYLIST
		) ATT
		GROUP BY TARGETUSERCODE
	</select>
	
	<!-- 기간별 근로정보 지정 소정(최대)근로 기준 시간 조회 -->
	 <select id="getUserWorkTime" statementType="CALLABLE"  parameterType="cmap" resultType="cmap">
		{CALL sp_attend_getUserWorkTime(#{UserCode},#{CompanyCode},#{StartDate},#{EndDate})}
	</select>
	
	<!-- 근태기록 추가/수정 팝업 정보 조회 -->
	<select id="getUserAttData" parameterType="cmap" resultType="cmap">
		SELECT
			U.USERCODE AS "UserCode"
			, FN_BASEGETDICTIONARY_S(#{lang}, U.MULTIDISPLAYNAME) AS "DisplayName"
			, FN_BASEGETDICTIONARY_S(#{lang}, U.MULTIDEPTNAME) AS "DeptName"
			, FN_BASEGETDICTIONARY_S(#{lang}, U.MULTIJOBPOSITIONNAME) AS "JobPositionName"

			, TO_CHAR(TO_DATE(#{TargetDate}, 'YYYY-MM-DD'), 'YYYY.MM.DD') AS "TargetDate"
			, TO_CHAR(TO_DATE(#{TargetDate}, 'YYYY-MM-DD'), 'MM"월" DD"일"') AS "TargetDate_KOR"
			, TO_CHAR(M.ATTSTARTTIME, 'YYYY.MM.DD HH24:MI:SS') AS "AttStartTime"
			, TO_CHAR(M.ATTENDTIME, 'YYYY.MM.DD HH24:MI:SS') AS "AttEndTime"

			, TO_CHAR(M.ATTSTARTTIME, 'YYYY.MM.DD') AS "AttStart_Date"
			, TO_CHAR(M.ATTSTARTTIME, 'HH') AS "AttStart_Hour"
			, TO_CHAR(M.ATTSTARTTIME, 'MI') AS "AttStart_Min"
			, TO_CHAR(M.ATTSTARTTIME, 'AM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "AttStart_AP"

			, TO_CHAR(M.ATTENDTIME, 'YYYY.MM.DD') AS "AttEnd_Date"
			, TO_CHAR(M.ATTENDTIME, 'HH') AS "AttEnd_Hour"
			, TO_CHAR(M.ATTENDTIME, 'MI') AS "AttEnd_Min"
			, TO_CHAR(M.ATTENDTIME, 'AM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "AttEnd_AP"

			, M.ETC AS "Etc"
			, M.USERETC AS "UserEtc"
			, S.SCHNAME AS "SchName"
		FROM
		(
			SELECT
				U.USERCODE
				, U.MULTIDISPLAYNAME
				, MULTIDEPTNAME
				, MULTIJOBPOSITIONNAME
			FROM SYS_OBJECT_USER_BASEGROUP  B
				JOIN SYS_OBJECT_USER U ON B.USERCODE = U.USERCODE AND B.JOBTYPE = 'Origin'
			WHERE U.USERCODE = #{UserCode}
		) U
			LEFT JOIN (
				SELECT * FROM  ATTEND_COMMUTING_MST
				WHERE COMPANYCODE = #{CompanyCode} AND TARGETDATE = #{TargetDate} AND UserCode = #{UserCode}
				AND ROWNUM = 1
			) M ON U.USERCODE = M.USERCODE
			LEFT JOIN (
				SELECT * FROM ATTEND_JOB WHERE COMPANYCODE = #{CompanyCode}
			) J ON U.USERCODE = J.USERCODE AND J.JOBDATE = #{TargetDate}
			LEFT JOIN (
				SELECT * FROM ATTEND_SCHEDULE WHERE COMPANYCODE = #{CompanyCode}
			) S ON J.SCHSEQ = S.SCHSEQ
	</select>
	
	<!-- 기타근무 리스트 조회  -->
	<select id="getJobStatus" parameterType="cmap" resultType="cmap">
		SELECT
			JOBSTSSEQ AS "JobStsSeq"
			, AMM.ATTSEQ AS "AttSeq"
			, JOBSTSNAME AS "JobStsName"
			, MULTIDISPLAYNAME AS "MultiDIsplayName"
			, AMJS.VALIDYN AS "ValidYn"
		FROM ATTEND_JOB_STATUS AMJS
			JOIN ATTEND_MST AMM ON AMM.ATTSEQ = AMJS.ATTSEQ AND AMM.COMPANYCODE = #{CompanyCode}
		WHERE 1=1
			<if test='ValidYn != null and ValidYn != ""'>
				AND AMJS.VALIDYN = #{ValidYn}
			</if>
		ORDER BY JOBSTSSEQ
	</select>
	
	<!-- 연장근무 일정 조회 -->
	<select id="getExtensionInfo" parameterType="cmap" resultType="cmap">
		SELECT
			EXHOSEQ AS "ExHoSeq"
			, U.USERCODE AS "UserCode"
			, FN_BASEGETDICTIONARY_S(#{lang}, U.MULTIDISPLAYNAME) AS "DisplayName"
			, TO_CHAR(JOBDATE, 'YYYY.MM.DD') AS "JobDate"
			, TO_CHAR(JOBDATE, 'YYYY.MM.DD') AS "TargetDate"
			, JOBSTSNAME AS "JobStsName"
			, APPROVALSTS AS "ApprovalSts"
			, STARTTIME AS "StartTime"
			, TO_CHAR(TO_DATE(STARTTIME, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY.MM.DD') AS "StartDate"
			, TO_CHAR(TO_DATE(STARTTIME, 'YYYY-MM-DD HH24:MI:SS'), 'HH') AS "StartHour"
			, TO_CHAR(TO_DATE(STARTTIME, 'YYYY-MM-DD HH24:MI:SS'), 'MI') AS "StartMin"
			, TO_CHAR(TO_DATE(STARTTIME, 'YYYY-MM-DD HH24:MI:SS'),'AM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "StartAP"
			, TO_CHAR(TO_DATE(STARTTIME, 'YYYY-MM-DD HH24:MI:SS'),'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "StartTimeStr"
			, ENDTIME AS "EndTime"
			, TO_CHAR(TO_DATE(ENDTIME, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY.MM.DD') AS "EndDate"
			, TO_CHAR(TO_DATE(ENDTIME, 'YYYY-MM-DD HH24:MI:SS'), 'HH') AS "EndHour"
			, TO_CHAR(TO_DATE(ENDTIME, 'YYYY-MM-DD HH24:MI:SS'), 'MI') AS "EndMin"
			, TO_CHAR(TO_DATE(ENDTIME, 'YYYY-MM-DD HH24:MI:SS'), 'AM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "EndAP"
			, TO_CHAR(TO_DATE(ENDTIME, 'YYYY-MM-DD HH24:MI:SS'), 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "EndTimeStr"
			, IDLETIME AS "IdleTime"
			/* , TO_CHAR(TO_DATE(IDLETIME||'00', 'HH24MISS'), 'HH24') AS "IdleHour" */
			/* , TO_CHAR(TO_DATE(IDLETIME||'00', 'HH24MISS'), 'MI') AS "IdleMin" */
			, WORKTIME AS "WorkTime"
			, TO_CHAR(TO_DATE(WORKTIME||'00', 'HH24MISS'), 'HH24') AS "AcHour"
			, TO_CHAR(TO_DATE(WORKTIME||'00', 'HH24MISS'), 'MI') AS "AcMin"
			, ETC AS "Etc"
		FROM ATTEND_EXTENSIONHOLIDAY EX
			JOIN SYS_OBJECT_USER U ON U.USERCODE = EX.USERCODE
		WHERE COMPANYCODE = #{CompanyCode}
			<if test='ExHoSeq != null and ExHoSeq != "" '>
				AND EXHOSEQ = #{ExHoSeq}
			</if>
			<if test='ReqType != null and ReqType != "" '>
				AND JOBSTSNAME = #{ReqType}
			</if>
			AND APPROVALSTS = 'Y'
			AND EX.USERCODE = #{UserCode}
			AND JOBDATE = #{JobDate}
	</select>
	
	<!-- 근태현황 목록형 리스트 조회 -->
	<select id="getUserAttStatusByList" parameterType="cmap" resultType="cmap">
		<include refid="oracle.include.pagingHeader" />
		SELECT
			USERCODE AS "UserCode"
			, CASE
				WHEN MEMBEROF = 'ORGROOT' THEN ''
				ELSE (SELECT DisplayName FROM SYS_OBJECT_GROUP R WHERE GroupCode = MEMBEROF) 
			  END AS "DeptFullPath"
			, FN_BASEGETDICTIONARY_S(#{lang}, MultiDeptName) AS "DeptName"
			, FN_BASEGETDICTIONARY_S(#{lang}, MultiDisplayName) AS "DisplayName"
			, FN_BASEGETDICTIONARY_S(#{lang}, MultiJobPositionName) AS "JobPositionName"
			, FN_BASEGETDICTIONARY_S(#{lang}, MultiJobTitleName) AS "JobTitleName"
			, ENTERDATE AS "EnterDate"
			, TO_CHAR(DAYLIST, 'YYYY-MM-DD') AS "dayList"
			, TO_NUMBER(TO_CHAR(DAYLIST, 'D')) AS "weekd"
			, TO_NUMBER(TO_CHAR(DAYLIST - FN_ATTENDANCE_MYSQLWEEKDAY(DAYLIST) + #{FirstWeek}, 'WW')) AS "weeko"
			, TO_CHAR(DAYLIST, 'MM/DD') AS "v_dayList"
			, STARTSTS AS "StartSts"
			, ENDSTS AS "EndSts"
			, TO_CHAR(ATTDAYSTARTTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttDayStartTime" /* 스케줄출근시간 */
			, TO_CHAR(ATTDAYENDTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttDayEndTime" /* 스케줄퇴근시간 */
			, TO_CHAR(ATTSTARTTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttStartTime" /* 출근시간 */
			, TO_CHAR(ATTENDTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttEndTime" /* 퇴근시간 */
			, NVL(ETC, '') AS "Etc"
			, CASE WHEN ASSYN = 'Y' THEN ATTAC ELSE ATTREAL END
				+ CASE WHEN EXTENNOTENOUGH = 'Y' THEN EXTENAC ELSE 0 END
				+ HOLIAC
				+ (NVL(ATTDAYAC, 0) * CASE WHEN NVL(VACCNT, 0) > 0 THEN VACCNT ELSE 0 END) AS "TotWorkTime" /* 해당일 총 근무시간 */
			, NVL(FN_ATTEND_GETTIMEFORMAT(CASE WHEN ASSYN = 'Y' THEN ATTAC ELSE ATTREAL END + (NVL(ATTDAYAC, 0) * CASE WHEN NVL(VACCNT, 0) > 0 THEN VACCNT ELSE 0 END),'M'), '') AS "v_AttRealTime" /* 출퇴근 인정시간 */
			, FN_ATTEND_GETTIMEFORMAT(EXTENAC, 'M') AS "v_ExtenAc" /* 연장근무시간 */
			, FN_ATTEND_GETTIMEFORMAT(HOLIAC, 'M') AS "v_HoliAc" /* 휴일근무시간 */
			, FN_ATTEND_GETTIMEFORMAT(NVL(ROUND(((ATTENDTIME - ATTSTARTTIME) * (24 * 60)), 0), 0), 'M') AS "v_startToEnd" /* 출퇴근 실 근무시간 */
			, CASE WHEN StartSts ='lbl_n_att_absent' THEN '0' ELSE FN_ATTEND_GETTIMEFORMAT(ATTIDLE, 'M') END AS "v_AttIdle" /* 휴게시간 */
			, CASE WHEN ASSYN = 'Y' THEN ATTAC ELSE ATTREAL END + (NVL(ATTAC, 0) * CASE WHEN NVL(VACCNT, 0) > 0 THEN 1 ELSE 0 END) AS "AttRealTime" /* 출퇴근 인정시간 */
			, ATTIDLE AS "AttIdle"
			, ATTCONFIRMYN AS "AttConfirmYn"
			, VACCNT AS "VacCnt"
			, CASE
				WHEN VACCNT > 0 THEN (SELECT CODENAME FROM SYS_BASE_CODE WHERE CODEGROUP = 'VACATION_TYPE' AND VACFLAG = CODE and rownum=1)
				ELSE ''
			END AS "VacName"
			, EXTENCNT AS "ExtenCnt"
			, HOLICNT AS "HoliCnt"
			, WORKSTS AS "WorkSts"
			, (SELECT SCHNAME FROM ATTEND_SCHEDULE AMS WHERE AMS.SCHSEQ = l.SCHSEQ) AS "SchName"
			, CASE WHEN StartSts ='lbl_att_beingLate'  THEN TO_CHAR(TRUNC(((ATTDAYSTARTTIME - ATTSTARTTIME) * (24 * 60 * 60)) / 60, 0)) ELSE '' END AS "LateMin"
			, CASE WHEN JH_COUNT > 0 THEN CASE WHEN JH_COUNT > 1 THEN JOBSTSNAME || '+' ELSE JOBSTSNAME END ELSE '' END AS "JobStsName"
	        , SortKey, JobPositionSortKey, JobLevelSortKey, JobTitleSortKey, JobTitlecode
		FROM (
			SELECT
			<choose>
				<when test='(AttStatus == null or AttStatus == "") and (SchSeq == null or SchSeq == "")'>
					NVL(A.DAYLIST, B.DAYLIST) AS DAYLIST
					, NVL(A.USERCODE, B.USERCODE) AS USERCODE
					, NVL(A.MEMBEROF, B.MEMBEROF) AS MEMBEROF
					, NVL(A.MULTIDEPTNAME, B.MULTIDEPTNAME) AS MULTIDEPTNAME
					, NVL(A.MULTIDISPLAYNAME, B.MULTIDISPLAYNAME) AS MULTIDISPLAYNAME
					, NVL(A.MULTIJOBPOSITIONNAME, B.MULTIJOBPOSITIONNAME) AS MULTIJOBPOSITIONNAME
					, NVL(A.MULTIJOBTITLENAME, B.MULTIJOBTITLENAME) AS MULTIJOBTITLENAME
					, NVL(A.ENTERDATE, B.ENTERDATE) AS ENTERDATE
					, NVL(B.VACFLAG, '') AS VACFLAG
					, NVL(B.VACCNT, 0) AS VACCNT
					, (SELECT JOBSTSNAME FROM ATTEND_JOB_HISTORY JH WHERE NVL(A.DAYLIST, B.DAYLIST) = JH.JOBDATE AND NVL(A.USERCODE, B.USERCODE) = JH.USERCODE AND ROWNUM <![CDATA[<=]]> 1) AS JOBSTSNAME
					, (SELECT COUNT(*) FROM ATTEND_JOB_HISTORY JH WHERE NVL(A.DAYLIST, B.DAYLIST) = JH.JOBDATE AND NVL(A.USERCODE, B.USERCODE) = JH.USERCODE GROUP BY JH.JOBDATE, JH.USERCODE) AS JH_COUNT
				</when>
				<otherwise>
					A.DAYLIST
					, A.USERCODE
					, A.MEMBEROF
					, A.MULTIDEPTNAME
					, A.MULTIDISPLAYNAME
					, A.MULTIJOBPOSITIONNAME
					, A.MULTIJOBTITLENAME
					, A.ENTERDATE
					, '' AS VACFLAG
					, 0 AS VACCNT
					, (SELECT JOBSTSNAME FROM ATTEND_JOB_HISTORY JH WHERE A.DAYLIST = JH.JOBDATE AND A.USERCODE = JH.USERCODE AND ROWNUM <![CDATA[<=]]> 1) AS JOBSTSNAME
					, (SELECT COUNT(*) FROM ATTEND_JOB_HISTORY JH WHERE A.DAYLIST = JH.JOBDATE AND A.USERCODE = JH.USERCODE GROUP BY JH.JOBDATE, JH.USERCODE) AS JH_COUNT
				</otherwise>
			</choose>
				, NVL(A.COMMUSEQ, 0) AS COMMUSEQ
				, NVL(A.STARTSTS, '') AS STARTSTS
				, NVL(A.ENDSTS, '') AS ENDSTS
				, A.ATTSTARTTIME
				, A.ATTENDTIME
				, NVL(A.ATTREAL, 0) AS ATTREAL
				, NVL(A.ATTAC, 0) AS ATTAC
				, NVL(A.ATTIDLE, 0) AS ATTIDLE
				, NVL(A.EXTENREAL, 0) AS EXTENREAL
				, NVL(A.EXTENAC, 0) AS EXTENAC
				, A.EXTENNOTENOUGH
				, NVL(A.HOLIREAL, 0) AS HOLIREAL
				, NVL(A.HOLIAC, 0) AS HOLIAC
				, NVL(A.EXTENCNT, 0) AS EXTENCNT
				, NVL(A.HOLICNT, 0) AS HOLICNT
				, NVL(A.ATTCONFIRMYN, 'N') AS ATTCONFIRMYN
				, A.ETC
				, CASE WHEN TO_CHAR(J.ATTDAYSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') = '0000-00-00 00:00:00' THEN NULL ELSE J.ATTDAYSTARTTIME END AS ATTDAYSTARTTIME
				, CASE WHEN TO_CHAR(J.ATTDAYENDTIME, 'YYYY-MM-DD HH24:MI:SS') = '0000-00-00 00:00:00' THEN NULL ELSE J.ATTDAYENDTIME END AS ATTDAYENDTIME
				, NVL(J.ASSYN, 'N') AS ASSYN
				, J.WORKSTS
				, J.SCHSEQ
				, J.ATTDAYAC
		        , NVL(A.SortKey, b.SortKey) SortKey
		        , NVL(A.JobPositionSortKey, B.JobPositionSortKey) JobPositionSortKey
		        , NVL(A.JobLevelSortKey, B.JobLevelSortKey) JobLevelSortKey 
		        , NVL(A.JobTitleSortKey, B.JobTitleSortKey) JobTitleSortKey 
		        , NVL(A.JobTitlecode, b.JobTitlecode) JobTitlecode
			FROM (
				SELECT
					M.TARGETDATE AS DAYLIST
					, UR.USERCODE AS USERCODE
					, OG.MEMBEROF
					, BG.MULTIDEPTNAME
					, UR.MULTIDISPLAYNAME
					, BG.MULTIJOBPOSITIONNAME
					, BG.MULTIJOBTITLENAME
					, UR.ENTERDATE
					, M.COMMUSEQ
					, M.STARTSTS
					, M.ENDSTS
					, M.ATTSTARTTIME
					, M.ATTENDTIME
					, M.ATTREAL
					, M.ATTAC
					, M.ATTIDLE
					, M.EXTENREAL
					, M.EXTENAC
					, CASE
						WHEN M.ATTENDTIME IS NOT NULL AND M.ATTENDTIME >= M.EXTENEND THEN 'Y'
						ELSE 'N'
					END AS EXTENNOTENOUGH
					, HOLIREAL
					, M.HOLIAC
					, M.EXTENCNT
					, M.HOLICNT
					, M.ATTCONFIRMYN
					, M.ETC
					, bg.SortKey, bg.JobPositionSortKey, bg.JobLevelSortKey, bg.JobTitleSortKey, bg.JobTitlecode
				FROM SYS_OBJECT_USER UR
					JOIN SYS_OBJECT_USER_BASEGROUP BG ON UR.USERCODE = BG.USERCODE AND BG.COMPANYCODE = #{CompanyCode} AND BG.JOBTYPE = 'Origin'
					JOIN SYS_OBJECT_GROUP OG ON BG.COMPANYCODE = OG.COMPANYCODE AND OG.GROUPTYPE IN ('Dept', 'Company') AND BG.DEPTCODE = OG.GROUPCODE AND MEMBEROF != 'NOUSE'
					JOIN ATTEND_COMMUTING_MST M ON M.TARGETDATE BETWEEN #{StartDate} AND #{EndDate} AND UR.USERCODE = M.USERCODE
				WHERE
					OG.GROUPPATH LIKE #{GroupPath} || '%'
					<if test='RetireUser neq "Y"'>
						AND UR.ISUSE = 'Y' AND UR.ISDISPLAY = 'Y'
					</if>
					<!-- 직책   -->
					<if test='sJobTitleCode != null and sJobTitleCode != ""'>
						AND BG.JOBTITLECODE = #{sJobTitleCode}
					</if>
					<!-- 직급 -->
					<if test='sJobLevelCode != null and sJobLevelCode != ""'>
						AND BG.JOBLEVELCODE = #{sJobLevelCode}
					</if>
					<if test='sUserTxt != null and sUserTxt != ""'>
						AND UR.MULTIDISPLAYNAME LIKE '%'||#{sUserTxt}||'%'
					</if>
			) A
			<choose>
				<when test='(AttStatus == null or AttStatus == "") and (SchSeq == null or SchSeq == "")'>
				FULL OUTER JOIN (
					SELECT
						DL.DAYLIST
						, A.UR_CODE AS USERCODE
						, OG.MEMBEROF
						, BG.MULTIDEPTNAME
						, UR.MULTIDISPLAYNAME
						, BG.MULTIJOBPOSITIONNAME
						, BG.MULTIJOBTITLENAME
						, UR.ENTERDATE
						, A.VACFLAG
						, SUM(A.VacDay) AS VACCNT
						, bg.SortKey, bg.JobPositionSortKey, bg.JobLevelSortKey, bg.JobTitleSortKey, bg.JobTitlecode
					FROM SYS_OBJECT_USER UR
						JOIN SYS_OBJECT_USER_BASEGROUP BG ON UR.USERCODE = BG.USERCODE AND BG.COMPANYCODE = #{CompanyCode} AND BG.JOBTYPE = 'Origin'
						JOIN SYS_OBJECT_GROUP OG ON BG.COMPANYCODE = OG.COMPANYCODE AND OG.GROUPTYPE IN ('Dept', 'Company') AND BG.DEPTCODE = OG.GROUPCODE AND MEMBEROF != 'NOUSE'
						LEFT JOIN VM_VACATIONINFO_DAY A ON UR.USERCODE = A.UR_CODE
						LEFT JOIN ATTEND_DAYLIST DL ON DL.DAYLIST BETWEEN #{StartDate} AND #{EndDate} AND DL.DAYLIST = TO_DATE(A.VacDate,'YYYY-MM-DD')
					WHERE
						OG.GROUPPATH LIKE #{GroupPath} || '%'
						<if test='RetireUser neq "Y"'>
							AND UR.ISUSE = 'Y' AND UR.ISDISPLAY = 'Y'
						</if>
						<!-- 직책   -->
						<if test='sJobTitleCode != null and sJobTitleCode != ""'>
							AND BG.JOBTITLECODE = #{sJobTitleCode}
						</if>
						<!-- 직급 -->
						<if test='sJobLevelCode != null and sJobLevelCode != ""'>
							AND BG.JOBLEVELCODE = #{sJobLevelCode}
						</if>
						<if test='sUserTxt != null and sUserTxt != ""'>
							AND UR.MULTIDISPLAYNAME LIKE '%'||#{sUserTxt}||'%'
						</if>
					GROUP BY
						DL.DAYLIST
						, A.UR_CODE
						, OG.MEMBEROF
						, BG.MULTIDEPTNAME
						, UR.MULTIDISPLAYNAME
						, BG.MULTIJOBPOSITIONNAME
						, BG.MULTIJOBTITLENAME
           				, bg.SortKey
           				, bg.JobPositionSortKey
           				, bg.JobLevelSortKey
           				, bg.JobTitleSortKey
           				, bg.JobTitlecode
						, UR.ENTERDATE
						, A.VACFLAG
				) B ON B.DAYLIST = A.DAYLIST AND B.USERCODE = A.USERCODE
				LEFT JOIN ATTEND_JOB J ON NVL(A.DAYLIST, B.DAYLIST) = J.JOBDATE AND NVL(A.USERCODE, B.USERCODE) = J.USERCODE
				</when>
				<otherwise>
					LEFT JOIN ATTEND_JOB J ON A.DAYLIST = J.JOBDATE AND A.USERCODE = J.USERCODE
				</otherwise>
			</choose>
			WHERE
				1 = 1
				<if test='SchSeq != null and SchSeq != ""'>
					AND J.SCHSEQ = #{SchSeq}
				</if>
				<if test='AttStatus == "B10"'>
					<![CDATA[AND ((J.ATTDAYSTARTTIME - A.ATTSTARTTIME) * (24 * 60 * 60)) BETWEEN 1 AND 10 * 60]]>
				</if>
				<if test='AttStatus == "A1" '>
					<![CDATA[AND ((J.ATTDAYSTARTTIME - A.ATTSTARTTIME) * (24 * 60 * 60)) BETWEEN - 60 * 60 AND 0]]>
				</if>
				<if test='AttStatus == "LATE"'>
					AND A.STARTSTS='lbl_att_beingLate'
				</if>
		) L
		<trim prefix="ORDER BY"  prefixOverrides =",">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			JobTitleSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			JobLevelSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			JobPositionSortKey ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			"DisplayName" ASC
				  		</if>
				  	</foreach>
				  	, dayList, SortKey, JobTitlecode, EnterDate, UserCode
			  	</when>
			  	<otherwise>
		  			<![CDATA[ SortKey ASC, JobTitleSortKey ASC, JobLevelSortKey ASC, JobPositionSortKey ASC, "DisplayName" ASC ]]>
		  		</otherwise>
			</choose>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>
	
	<!-- 근태현황 목록형 리스트 조회 -->
	<select id="getUserAttStatusByListCnt" parameterType="cmap" resultType="java.lang.Long">
		SELECT
			COUNT(*)
		FROM (
			SELECT
			<choose>
				<when test='(AttStatus == null or AttStatus == "") and (SchSeq == null or SchSeq == "")'>
					NVL(A.DAYLIST, B.DAYLIST) AS DAYLIST
					, NVL(A.USERCODE, B.USERCODE) AS USERCODE
				</when>
				<otherwise>
					A.DAYLIST
					, A.USERCODE
				</otherwise>
			</choose>
			FROM (
				SELECT
					M.TARGETDATE AS DAYLIST
					, UR.USERCODE AS USERCODE
					, M.ATTSTARTTIME
					, M.ATTENDTIME
					, M.STARTSTS
					, 0 AS VACCNT
				FROM SYS_OBJECT_USER UR
					JOIN SYS_OBJECT_USER_BASEGROUP BG ON UR.USERCODE = BG.USERCODE AND BG.COMPANYCODE = #{CompanyCode} AND BG.JOBTYPE = 'Origin'
					JOIN SYS_OBJECT_GROUP OG ON BG.COMPANYCODE = OG.COMPANYCODE AND OG.GROUPTYPE IN ('Dept', 'Company') AND BG.DEPTCODE = OG.GROUPCODE AND MEMBEROF != 'NOUSE'
					JOIN ATTEND_COMMUTING_MST M ON M.TARGETDATE BETWEEN #{StartDate} AND #{EndDate} AND UR.USERCODE = M.USERCODE
				WHERE
					OG.GROUPPATH LIKE #{GroupPath} || '%'
					<if test='RetireUser neq "Y"'>
						AND UR.ISUSE = 'Y' AND UR.ISDISPLAY = 'Y'
					</if>
					<!-- 직책   -->
					<if test='sJobTitleCode != null and sJobTitleCode != ""'>
						AND BG.JOBTITLECODE = #{sJobTitleCode}
					</if>
					<!-- 직급 -->
					<if test='sJobLevelCode != null and sJobLevelCode != ""'>
						AND BG.JOBLEVELCODE = #{sJobLevelCode}
					</if>
					<if test='sUserTxt != null and sUserTxt != ""'>
						AND UR.DISPLAYNAME LIKE '%'||#{sUserTxt}||'%'
					</if>
				) A
				<choose>
					<when test='(AttStatus == null or AttStatus == "") and (SchSeq == null or SchSeq == "")'>
					FULL OUTER JOIN (
						SELECT
							DL.DAYLIST
							, A.UR_CODE AS USERCODE
							, SUM(FN_ATTEND_CALVACDAY(A.VACFLAG, A.VACOFFFLAG, A.GUBUN)) AS VACCNT
						FROM SYS_OBJECT_USER UR
							JOIN SYS_OBJECT_USER_BASEGROUP BG ON UR.USERCODE = BG.USERCODE AND BG.COMPANYCODE = #{CompanyCode} AND BG.JOBTYPE = 'Origin'
							JOIN SYS_OBJECT_GROUP OG ON BG.COMPANYCODE = OG.COMPANYCODE AND OG.GROUPTYPE IN ('Dept', 'Company') AND BG.DEPTCODE = OG.GROUPCODE AND MEMBEROF != 'NOUSE'
							JOIN VM_VACATIONINFO A ON UR.USERCODE = A.UR_CODE
							JOIN ATTEND_DAYLIST DL ON DL.DAYLIST BETWEEN #{StartDate} AND #{EndDate} AND DL.DAYLIST BETWEEN A.SDATE AND A.EDATE
						WHERE
							OG.GROUPPATH LIKE #{GroupPath} || '%'
							<if test='RetireUser neq "Y"'>
								AND UR.ISUSE = 'Y' AND UR.ISDISPLAY = 'Y'
							</if>
							<!-- 직책   -->
							<if test='sJobTitleCode != null and sJobTitleCode != ""'>
								AND BG.JOBTITLECODE = #{sJobTitleCode}
							</if>
							<!-- 직급 -->
							<if test='sJobLevelCode != null and sJobLevelCode != ""'>
								AND BG.JOBLEVELCODE = #{sJobLevelCode}
							</if>
							<if test='sUserTxt != null and sUserTxt != ""'>
								AND UR.DISPLAYNAME LIKE '%'||#{sUserTxt}||'%'
							</if>
						GROUP BY
							DL.DAYLIST
							, A.UR_CODE
						HAVING SUM(FN_ATTEND_CALVACDAY(A.VACFLAG, A.VACOFFFLAG, A.GUBUN)) > 0
					) B ON B.DAYLIST = A.DAYLIST AND B.USERCODE = A.USERCODE
					LEFT JOIN ATTEND_JOB J ON NVL(A.DAYLIST, B.DAYLIST) = J.JOBDATE AND NVL(A.USERCODE, B.USERCODE) = J.USERCODE
					</when>
					<otherwise>
						LEFT JOIN ATTEND_JOB J ON A.DAYLIST = J.JOBDATE AND A.USERCODE = J.USERCODE
					</otherwise>
				</choose>
			WHERE
				1 = 1
				<if test='SchSeq != null and SchSeq != ""'>
					AND J.SCHSEQ = #{SchSeq}
				</if>
				<if test='AttStatus == "B10"'>
					<![CDATA[AND ((J.ATTDAYSTARTTIME - A.ATTSTARTTIME) * (24 * 60 * 60)) BETWEEN 1 AND 10 * 60]]>
				</if>
				<if test='AttStatus == "A1" '>
					<![CDATA[AND ((J.ATTDAYSTARTTIME - A.ATTSTARTTIME) * (24 * 60 * 60)) BETWEEN - 60 * 60 AND 0]]>
				</if>
				<if test='AttStatus == "LATE"'>
					AND A.STARTSTS='lbl_att_beingLate'
				</if>
		) L
	</select>
	
	<!-- 휴무일 ( 공휴일 )  -->
	<!-- 회사 휴무일 조회 -->
	<select id="getHolidaySchList" parameterType="cmap" resultType="cmap">
		SELECT
			COMPANYCODE AS "CompanyCode"
			, TO_CHAR(HOLIDAYSTART, 'YYYY-MM-DD') AS "HolidayStart"
			, TO_CHAR(HOLIDAYEND, 'YYYY-MM-DD') AS "HolidayEnd"
			, HOLIDAYNAME AS "HolidayName"
			, GOOGLEYN AS "GoogleYn"
			, ETC AS "Etc"
		FROM
			ATTEND_HOLIDAY_SCHEDULE
		WHERE
			COMPANYCODE = #{CompanyCode}
			<if test='year != null and year !=""'>
				AND	#{year} BETWEEN TO_CHAR(HOLIDAYSTART, 'YYYY') AND TO_CHAR(HOLIDAYSTART, 'YYYY')
			</if>
			<if test='StartDate != null and StartDate !=""'>
				AND	HOLIDAYSTART <![CDATA[ >= ]]> #{StartDate}
			</if>
			<if test='EndDate != null and EndDate !=""'>
				AND	HOLIDAYEND <![CDATA[ <= ]]> #{EndDate}
			</if>
			<!-- <if test='StartDate != null and StartDate != null'>
				AND
				((
					HOLIDAYSTART <![CDATA[ >= ]]> #{StartDate}
					AND
					HOLIDAYEND <![CDATA[ <= ]]> #{EndDate}
				) OR (
					HOLIDAYSTART BETWEEN  #{StartDate} AND #{EndDate}
				) OR (
					HOLIDAYEND BETWEEN  #{StartDate} AND #{EndDate}
				))
			</if> -->
			<if test='GoogleCheck != null and GoogleCheck !=""'>
				AND GOOGLEYN  <![CDATA[ <> ]]>  'Y'
			</if>
			<if test='HolidayStart != null and HolidayStart !=""'>
				AND HOLIDAYSTART = #{HolidayStart}
			</if>
			<if test='HolidayEnd != null and HolidayEnd !=""'>
				AND HOLIDAYEND =  #{HolidayEnd}
			</if>
			<if test='GoogleYn != null and GoogleYn !=""'>
				AND GOOGLEYN = #{GoogleYn}
			</if>
	</select>

	<!-- 연장 휴일 근무 상태 변경 -->
	<insert id="setExHoDataProc" statementType="CALLABLE" parameterType="cmap">
		{
			CALL SP_ATTEND_SETCOMMUTEBYREQUEST(
				#{UserCode}
				, #{CompanyCode}
				, #{TargetDate}
				, #{ReqType}
				, #{ReqGubun}
				, #{StartTime}
				, #{EndTime}
				, #{AcTime}
				, #{IdleTime}
				, #{Etc}
				, #{BillName}
				, #{ProcessId}
				, #{FormInstId}
				, #{ExHoSeq}
			)
		}
	</insert>
	
	<!-- 기타근무 상태 변경 ( 삭제 ) -->
	<delete id="deleteJobHisData" parameterType="String" >
		DELETE FROM ATTEND_JOB_HISTORY
		WHERE JOBSTSHISSEQ = #{JobStsHisSeq}
	</delete>
	
	<update id="updateJobHisData" parameterType="cmap">
		UPDATE ATTEND_JOB_HISTORY SET
			MODIFYERCODE = #{RegUserCode}
			, MODIFYDATE = SYSDATE
			<if test='JobStsSeq != null and JobStsSeq !=""'>
				, JOBSTSSEQ = #{JobStsSeq}
			</if>
			<if test='JobStsName != null and JobStsName !=""'>
				, JOBSTSNAME = #{JobStsName}
			</if>
			<if test='Etc != null and Etc !=""'>
				, ETC = #{Etc}
			</if>
			<if test='StartTime != null and StartTime !=""'>
				, STARTTIME = #{StartTime}
			</if>
			<if test='EndTime != null and EndTime !=""'>
				, ENDTIME = #{EndTime}
			</if>
		WHERE JOBSTSHISSEQ = #{JobStsHisSeq}
	</update>
	
	<!-- 사용자 비고 입력 -->
	<update id="setUserEtc" parameterType="cmap">
		UPDATE ATTEND_COMMUTING_MST SET
			USERETC = #{UserEtc}
		WHERE COMMUSEQ = #{CommuSeq}
	</update>
	
	<!-- 내 근태현황 다운로드 엑셀 리스트 -->
	<select id="getMyAttExcelInfo" parameterType="cmap" resultType="cmap">
		SELECT
			DEPTNAME AS "DeptName"
			, DISPLAYNAME AS "DisplayName"
			, JOBPOSITIONNAME AS "JobPositionName"
			, ENTERDATE AS "EnterDate"
			, DAYLIST AS "dayList"
			, NVL(SCHMULTIDISPLAYNAME, '') AS "SchName"
			, CASE
			WHEN WORKSTS = 'ON' THEN TO_CHAR(ATTDAYSTARTTIME, 'YYYY-MM-DD HH24:MI')
			WHEN WORKSTS = 'OFF' THEN
			CASE
			WHEN FN_GETSELDICTIONARY(#{lang}, 'lbl_att_sch_holidaySts', #{CompanyId}) IS NULL THEN FN_GETSELDICTIONARY(#{lang}, 'lbl_att_sch_holidaySts', '0')
			ELSE FN_GETSELDICTIONARY(#{lang}, 'lbl_att_sch_holidaySts', #{CompanyId})
			END
			ELSE ''
			END AS "AttDayStartTime"
			, CASE
			WHEN WORKSTS = 'ON' THEN TO_CHAR(ATTDAYENDTIME, 'YYYY-MM-DD HH24:MI')
			WHEN WORKSTS = 'OFF' THEN
			CASE
			WHEN FN_GETSELDICTIONARY(#{lang}, 'lbl_att_sch_holidaySts', #{CompanyId}) IS NULL THEN FN_GETSELDICTIONARY(#{lang}, 'lbl_att_sch_holidaySts', '0')
			ELSE FN_GETSELDICTIONARY(#{lang}, 'lbl_att_sch_holidaySts', #{CompanyId})
			END
			ELSE ''
			END AS "AttDayEndTime"
			, CASE
			WHEN ATTSTARTTIME IS NOT NULL THEN TO_CHAR(ATTSTARTTIME, 'YYYY-MM-DD HH24:MI:SS')
			ELSE ''
			END AS "AttStartTime"
			, CASE
			WHEN ATTENDTIME IS NOT NULL THEN TO_CHAR(ATTENDTIME, 'YYYY-MM-DD HH24:MI:SS')
			ELSE ''
			END AS "AttEndTime"
			, CASE
			WHEN STARTSTS IS NOT NULL THEN
			CASE
			WHEN FN_GETSELDICTIONARY(#{lang}, STARTSTS, #{CompanyId}) IS NULL THEN FN_GETSELDICTIONARY(#{lang}, STARTSTS, '0')
			ELSE FN_GETSELDICTIONARY(#{lang}, STARTSTS, #{CompanyId})
			END
			ELSE ''
			END AS "StartSts"
			, CASE
			WHEN ENDSTS IS NOT NULL THEN
			CASE
			WHEN FN_GETSELDICTIONARY(#{lang}, ENDSTS, #{CompanyId}) IS NULL THEN FN_GETSELDICTIONARY(#{lang}, ENDSTS, '0')
			ELSE FN_GETSELDICTIONARY(#{lang}, ENDSTS, #{CompanyId})
			END
			ELSE ''
			END AS "EndSts"
			, FN_ATTEND_GETTIMEFORMAT(CASE WHEN F_ASSYN = 'Y' THEN F_ATTAC ELSE F_ATTREAL END + CASE WHEN EXTENNOTENOUGH = 'Y' THEN F_EXTENAC ELSE 0 END + F_HOLIAC + F_VACTIME,'M') AS "v_TotWorkTime" /* 해당일 총 근무시간 */
			, FN_ATTEND_GETTIMEFORMAT(CASE WHEN F_ASSYN = 'Y' THEN F_ATTAC ELSE F_ATTREAL END + F_VACTIME,'M') AS "v_AttRealTime" /* 출퇴근 인정시간 */
			, FN_ATTEND_GETTIMEFORMAT(F_EXTENAC, 'M') AS "v_ExtenAc" /* 연장근무시간 */
			, FN_ATTEND_GETTIMEFORMAT(F_HOLIAC, 'M') AS "v_HoliAc" /* 휴일근무시간 */
			, NVL(VACNAME, '')AS "VacName"
		FROM (
			SELECT
				DL.DAYLIST
				, DL.DISPLAYNAME
				, DL.DEPTNAME
				, DL.JOBPOSITIONNAME
				, DL.ENTERDATE
				, DL.SETTINGVALUE
				, J.WORKSTS
				, J.ATTDAYSTARTTIME
				, J.ATTDAYENDTIME
				, CASE WHEN DL.SETTINGVALUE = 'Y' THEN M.ATTSTARTTIME END AS ATTSTARTTIME
				, CASE WHEN DL.SETTINGVALUE = 'Y' THEN M.ATTENDTIME END AS ATTENDTIME
				, M.STARTSTS
				, M.ENDSTS
				, NVL(M.ATTREAL, 0) AS F_ATTREAL
				, NVL(M.ATTAC, 0) AS F_ATTAC
				, NVL(M.ATTIDLE, 0) AS F_ATTIDLE
				, NVL(M.EXTENREAL, 0) AS F_EXTENREAL
				, NVL(M.EXTENAC, 0) AS F_EXTENAC
				, NVL(M.HOLIREAL, 0) AS F_HOLIREAL
				, NVL(M.HOLIAC, 0) AS F_HOLIAC
				, NVL(J.ASSYN, 'N') AS F_ASSYN
				, CASE WHEN M.ATTENDTIME IS NOT NULL AND M.ATTENDTIME >= M.EXTENEND THEN 'Y' ELSE 'N' END AS EXTENNOTENOUGH
				, CASE WHEN S.MULTIDISPLAYNAME IS NOT NULL THEN FN_BASEGETDICTIONARY_S(#{lang}, S.MULTIDISPLAYNAME) ELSE S.SCHNAME END AS SCHMULTIDISPLAYNAME
				, CASE WHEN V.VACCNT > 0 THEN V.VACFLAG ELSE '' END AS F_VACFLAG
				, NVL(M.ATTAC, 0) * CASE WHEN V.VACCNT > 0 THEN 1 ELSE 0 END AS F_VACTIME
				, V.VACNAME
				, DL.SETTINGVALUE
			FROM
			(
				SELECT
					DAYLIST
					, WEEKD
					, USERCODE AS TARGETUSERCODE
					, DISPLAYNAME
					, DEPTNAME
					, JOBPOSITIONNAME
					, ENTERDATE
					, SETTINGVALUE
				FROM
				(
					SELECT
						DAYLIST
						, WEEKD
					FROM ATTEND_DAYLIST
					WHERE DAYLIST BETWEEN #{StartDate} AND #{EndDate}
				) DL,
				(
					SELECT
						U.USERCODE
						, FN_BASEGETDICTIONARY_S(#{lang}, U.MULTIDISPLAYNAME) AS DISPLAYNAME
						, FN_BASEGETDICTIONARY_S(#{lang}, MULTIDEPTNAME) AS DEPTNAME
						, FN_BASEGETDICTIONARY_S(#{lang}, MULTIJOBPOSITIONNAME) AS JOBPOSITIONNAME
						, U.ENTERDATE
					FROM SYS_OBJECT_USER_BASEGROUP B
						JOIN SYS_OBJECT_USER U ON B.USERCODE = U.USERCODE
					WHERE U.USERCODE = #{UserCode}
						AND B.COMPANYCODE = #{CompanyCode}
						AND B.DEPTCODE = #{DeptCode}
				) U,
				(
					SELECT
						SETTINGVALUE
					FROM (
						SELECT
							SETTINGVALUE
						FROM SYS_BASE_CONFIG
						WHERE SETTINGKEY = 'CommuteTimeYn'
							AND ISUSE = 'Y'
						ORDER BY DOMAINID DESC
					)
					WHERE ROWNUM <![CDATA[<=]]> 1
				) T
			) DL
				LEFT JOIN ATTEND_COMMUTING_MST M ON DL.DAYLIST = M.TARGETDATE AND M.COMPANYCODE = 'GENERAL' AND DL.TARGETUSERCODE = M.USERCODE
				LEFT JOIN ATTEND_JOB J ON DL.DAYLIST = J.JOBDATE AND J.COMPANYCODE = 'GENERAL' AND DL.TARGETUSERCODE = J.USERCODE
				LEFT JOIN ATTEND_SCHEDULE S ON J.SCHSEQ = S.SCHSEQ
				LEFT JOIN (
					SELECT
						DAYLIST
						, USERCODE
						, VACFLAG
						, VACNAME
						, SUM(NVL(VACCNT, 0)) AS VACCNT
					FROM (
						SELECT
							DL.DAYLIST
							, A.UR_CODE AS USERCODE
							, A.VACFLAG
							, CASE WHEN N.CODENAME IS NULL OR N.CODENAME = '' THEN D.CODENAME ELSE N.CODENAME END AS VACNAME
							, CASE WHEN A.GUBUN = 'VACATION_CANCEL' OR A.GUBUN = 'VACATION_PUBLIC_CANCEL' THEN -1 ELSE 1 END VACCNT
						FROM VM_VACATIONINFO A
							JOIN ATTEND_DAYLIST DL ON DL.DAYLIST BETWEEN SDATE AND EDATE
							LEFT JOIN SYS_BASE_CODE C ON A.GUBUN = C.CODE
							LEFT JOIN SYS_BASE_CODE D ON A.VACFLAG = D.CODE
							LEFT JOIN SYS_BASE_CODE N ON D.RESERVEDINT = N.CODEID
						WHERE
							DL.DAYLIST BETWEEN #{StartDate} AND #{EndDate}
							AND A.UR_CODE = #{UserCode}
					)
					GROUP BY
						DAYLIST
						, USERCODE
						, VACFLAG
						, VACNAME
				) V ON DL.DAYLIST = V.DAYLIST AND DL.TARGETUSERCODE = V.USERCODE
		) ATT
	</select>
	
	<select id="getUserApprovalList" parameterType="cmap" resultType="cmap">
		/* attend.status.getUserApprovalList */
		SELECT distinct BillName AS "BillName"
		, ProcessId AS "ProcessId"
		, JobDate AS "JobDate"
		, JobStsName AS "JobStsName"
		FROM (
		SELECT
			JOBSTSNAME AS JobStsName
			, JOBDATE AS JobDate
			, PROCESSID AS ProcessId
			, BILLNAME AS BillName
		FROM ATTEND_EXTENSIONHOLIDAY EX
			JOIN SYS_OBJECT_USER U ON U.USERCODE = EX.USERCODE
		WHERE COMPANYCODE = #{CompanyCode}
			AND APPROVALSTS = 'Y'
			AND EX.USERCODE = #{UserCode}
			AND JOBDATE = #{TargetDate}
			AND PROCESSID IS NOT NULL
		UNION ALL
		SELECT
			'C'
			, TARGETDATE
			, PROCESSID
			, BILLNAME
		FROM ATTEND_CALLING EX
			JOIN SYS_OBJECT_USER U ON U.USERCODE = EX.USERCODE
		WHERE COMPANYCODE = #{CompanyCode}
			AND EX.USERCODE = #{UserCode}
			AND TARGETDATE = #{TargetDate}
			AND PROCESSID IS NOT NULL )
	</select>

	<!-- 관리자 근태현황 - 휴일근무자현황 -->
	<select id="getHolidayAttendance" parameterType="cmap" resultType="cmap">
		<![CDATA[
			SELECT
				BG.USERCODE AS "UserCode",
				JOBPOSITIONNAME AS "JobPositionName",
				JOBPOSITIONCODE AS "JobPositionCode",
				JOBLEVELNAME AS "JobLevelName",
				JOBLEVELCODE AS "JobLevelCode",
				JOBTITLENAME AS "JobTitleName",
				JOBTITLECODE AS "JobTitleCode",
				DEPTNAME AS "DeptName",
				M.TARGETDATE AS "TargetDate",
				M.STARTSTS AS "StartSts",
				M.ENDSTS AS "EndSts",
				FN_BASEGETDICTIONARY_S(#{lang}, UR.MULTIDISPLAYNAME) AS "URName",
				ATTAC AS "AttAC",
				EXTENAC AS "ExtenAC",
				HOLIAC AS "HoliAc",
				EX.ETC AS "Etc",
				'내근' AS "Remark",
				TO_CHAR(ATTSTARTTIME, 'HH24:MI:SS') AS "AttStartTime",
				TO_CHAR(ATTENDTIME, 'HH24:MI:SS') AS "AttEndTime",
				TO_CHAR(ATTDAYSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttDayStartTime",
				TO_CHAR(ATTDAYENDTIME, 'YYYY-MM-DD HH24:MI:SS') AS "AttDayEndTime"
			FROM
				 SYS_OBJECT_GROUP OG
			JOIN SYS_OBJECT_USER_BASEGROUP BG ON
				BG.COMPANYCODE = OG.COMPANYCODE
				AND BG.DEPTCODE = OG.GROUPCODE
				AND BG.JOBTYPE = 'Origin'
			JOIN SYS_OBJECT_USER UR ON
				BG.USERCODE = UR.USERCODE
			JOIN ATTEND_COMMUTING_MST M ON
				M.USERCODE = BG.USERCODE
			LEFT OUTER JOIN ATTEND_EXTENSIONHOLIDAY EX ON
			    M.USERCODE = EX.USERCODE AND M.TARGETDATE = EX.JOBDATE
			WHERE
				OG.COMPANYCODE = #{CompanyCode}
				AND OG.GROUPPATH LIKE #{GroupPath} || '%'
				AND UR.ISUSE = 'Y'
				AND UR.ISDISPLAY = 'Y'
				AND TO_CHAR(M.TARGETDATE, 'YYYY-MM-DD') = #{TargetDate}
				AND HOLICNT > 0
				AND M.ATTENDTIME IS NOT NULL
				AND M.ATTENDTIME >= M.HOLIEND
		]]>
				<if test="sJobTitleCode != null and sJobTitleCode !=''">
				    AND JOBTITLECODE = #{sJobTitleCode}
				</if>

				<if test="sJobLevelCode != null and sJobLevelCode !=''">
				    AND JOBLEVELCODE = #{sJobLevelCode}
				</if>

				<if test="sUserTxt != null and sUserTxt !=''">
				    AND FN_BASEGETDICTIONARY_S(#{lang}, ur.MultiDisplayName) LIKE '%'||#{sUserTxt}||'%'
				</if>
		<![CDATA[
			ORDER BY TARGETDATE, DEPTNAME, JOBPOSITIONCODE, JOBLEVELCODE, JOBTITLECODE, FN_BASEGETDICTIONARY_S(#{lang}, UR.MULTIDISPLAYNAME)
		]]>
	</select>

	<!-- 관리자 근태현황 - 개인별 지각현황 -->
	<select id="getLateAttendance" parameterType="cmap" resultType="cmap">
		<![CDATA[
			SELECT TB.USERCODE AS "UserCode",
			       TB.DEPTNAME AS "DeptName",
			       TB.JOBPOSITIONNAME AS "JobPositionName",
			       TB.JOBLEVELNAME AS "JobLevelName",
			       TB.JOBTITLENAME AS "JobTitleName",
			       TB.URNAME AS "URName",
			       SUM(CNT1) AS "MonthCnt1",
			       SUM(CNT2) AS "MonthCnt2",
			       SUM(CNT3) AS "MonthCnt3",
			       SUM(CNT4) AS "MonthCnt4",
			       SUM(CNT5) AS "MonthCnt5",
			       SUM(CNT6) AS "MonthCnt6",
			       SUM(CNT7) AS "MonthCnt7",
			       SUM(CNT8) AS "MonthCnt8",
			       SUM(CNT9) AS "MonthCnt9",
			       SUM(CNT10) AS "MonthCnt10",
			       SUM(CNT11) AS "MonthCnt11",
			       SUM(CNT12) AS "MonthCnt12",
			       SUM(CNT1) + SUM(CNT2) + SUM(CNT3) + SUM(CNT4) + SUM(CNT5) + SUM(CNT6) + SUM(CNT7) + SUM(CNT8) + SUM(CNT9) + SUM(CNT10) + SUM(CNT11) + SUM(CNT12) AS "TotalCnt"
			  FROM (SELECT T.USERCODE,
					       T.DEPTNAME,
					       T.JOBPOSITIONNAME,
					       T.JOBPOSITIONCODE,
					       T.JOBLEVELNAME,
					       T.JOBLEVELCODE,
					       T.JOBTITLENAME,
					       T.JOBTITLECODE,
					       T.URNAME,
					       DECODE(T.TARGETMONTH, '01', COUNT(T.USERCODE), 0) AS CNT1,
					       DECODE(T.TARGETMONTH, '02', COUNT(T.USERCODE), 0) AS CNT2,
					       DECODE(T.TARGETMONTH, '03', COUNT(T.USERCODE), 0) AS CNT3,
					       DECODE(T.TARGETMONTH, '04', COUNT(T.USERCODE), 0) AS CNT4,
					       DECODE(T.TARGETMONTH, '05', COUNT(T.USERCODE), 0) AS CNT5,
					       DECODE(T.TARGETMONTH, '06', COUNT(T.USERCODE), 0) AS CNT6,
					       DECODE(T.TARGETMONTH, '07', COUNT(T.USERCODE), 0) AS CNT7,
					       DECODE(T.TARGETMONTH, '08', COUNT(T.USERCODE), 0) AS CNT8,
					       DECODE(T.TARGETMONTH, '09', COUNT(T.USERCODE), 0) AS CNT9,
					       DECODE(T.TARGETMONTH, '10', COUNT(T.USERCODE), 0) AS CNT10,
					       DECODE(T.TARGETMONTH, '11', COUNT(T.USERCODE), 0) AS CNT11,
					       DECODE(T.TARGETMONTH, '12', COUNT(T.USERCODE), 0) AS CNT12
					  FROM (SELECT
								BG.USERCODE,
								DEPTNAME,
								JOBPOSITIONNAME,
								JOBPOSITIONCODE,
								JOBLEVELNAME,
								JOBLEVELCODE,
								JOBTITLENAME,
								JOBTITLECODE,
								FN_BASEGETDICTIONARY_S(#{lang}, UR.MULTIDISPLAYNAME) AS URNAME,
								TO_CHAR(M.TARGETDATE, 'MM') AS TARGETMONTH
							FROM
								SYS_OBJECT_GROUP OG
							JOIN SYS_OBJECT_USER_BASEGROUP BG ON
								BG.COMPANYCODE = OG.COMPANYCODE
								AND BG.DEPTCODE = OG.GROUPCODE
								AND BG.JOBTYPE = 'Origin'
							JOIN SYS_OBJECT_USER UR ON
								BG.USERCODE = UR.USERCODE
							JOIN ATTEND_COMMUTING_MST M ON
								M.USERCODE = BG.USERCODE
							WHERE
								OG.COMPANYCODE = #{CompanyCode}
								AND OG.GROUPPATH LIKE #{GroupPath} || '%'
								AND UR.ISUSE = 'Y'
								AND UR.ISDISPLAY = 'Y'
			]]>
							<if test="sJobTitleCode != null and sJobTitleCode !=''">
							    AND JOBTITLECODE = #{sJobTitleCode}
							</if>

							<if test="sJobLevelCode != null and sJobLevelCode !=''">
							    AND JOBLEVELCODE = #{sJobLevelCode}
							</if>

							<if test="sUserTxt != null and sUserTxt !=''">
							    AND FN_BASEGETDICTIONARY_S(#{lang}, ur.MultiDisplayName) LIKE '%'||#{sUserTxt}||'%'
							</if>
			<![CDATA[
								AND TO_CHAR(M.TARGETDATE, 'YYYY') = #{TargetYear}
								AND M.STARTSTS = 'lbl_att_beingLate') T
					 GROUP BY T.USERCODE, T.DEPTNAME, T.JOBPOSITIONNAME, T.JOBPOSITIONCODE, T.JOBLEVELNAME, T.JOBLEVELCODE, T.JOBTITLENAME, T.JOBTITLECODE, T.URNAME, T.TARGETMONTH) TB
			 GROUP BY TB.USERCODE, TB.DEPTNAME, TB.JOBPOSITIONNAME, TB.JOBPOSITIONCODE, TB.JOBLEVELNAME, TB.JOBLEVELCODE, TB.JOBTITLENAME, TB.JOBTITLECODE, TB.URNAME
			 ORDER BY DEPTNAME, JOBPOSITIONCODE, JOBLEVELCODE, JOBTITLECODE, URNAME
			]]>
	</select>

	<!-- 관리자 근태현황 - 월별 지각현황 -->
	<select id="getMonthlyLateAttendance" parameterType="cmap" resultType="cmap">
		SELECT
		UserCode as "UserCode"
		,DeptFullPath as "DeptFullPath"
		,UserName as "UserName"
		,NVL(DeptName,'') as "DeptName"
		,NVL(JobPositionName,'') as "JobPositionName"
		,NVL(JobTitleName,'') as "JobTitleName"
		,EnterDate as "EnterDate"
		,PhotoPath as "PhotoPath"
		,DeptCode as "DeptCode"
		,JobPositionSortKey as "JobPositionSortKey"
		,DeptSortKey as "DeptSortKey"
		,SortKey as "SortKey"
		,JobLevelSortKey as "JobLevelSortKey"
		,JobTitlecode as "JobTitlecode"
		FROM
		(SELECT u.UserCode,
		CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang}, u.MultiDisplayName)) > 0 THEN
		Fn_BaseGetDictionary_S(#{lang}, u.MultiDisplayName)
		ELSE
		u.DisplayName
		END as UserName,
		CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang}, MultiDeptName)) > 0 THEN
		Fn_BaseGetDictionary_S(#{lang}, MultiDeptName)
		ELSE
		DeptName
		END as DeptName,
		CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang}, MultiJobPositionName)) > 0 THEN
		Fn_BaseGetDictionary_S(#{lang}, MultiJobPositionName)
		ELSE
		JobPositionName
		END as JobPositionName,
		CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang}, MultiJobTitleName)) > 0 THEN
		Fn_BaseGetDictionary_S(#{lang}, MultiJobTitleName)
		ELSE
		JobTitleName
		END as JobTitleName,
		u.EnterDate,
		b.JobPositionSortKey,
		b.JobLevelSortKey,
		b.JobTitlecode,
		b.DeptSortKey,
		b.SortKey,
		u.PhotoPath,
		DeptCode,
		(SELECT DisplayName
		FROM sys_object_group r
		WHERE GroupCode = sog.MemberOf) DeptFullPath
		FROM sys_object_user_basegroup b
		JOIN sys_object_user u ON b.UserCode = u.UserCode
		LEFT JOIN sys_object_group sog
		ON b.DeptCode = sog.GroupCode
		WHERE b.CompanyCode = #{CompanyCode}
		<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
			U.UserCode = #{user.UserCode} AND DeptCode = #{user.DeptCode}
		</foreach>
		) tb
		ORDER BY SortKey, JobPositionSortKey, JobLevelSortKey, JobTitlecode, EnterDate ASC
	</select>

	<!-- 휴무일 근무현황 날짜 해더 -->
	<select id="getClosedDayHeader" parameterType="cmap" resultType="string">
		<![CDATA[
		SELECT T.HEADER AS "Header",
		       MAX(T.HOLIDAYYN) as "HolidayYn"
		  FROM (SELECT TO_CHAR(YYYYMMDD, 'YYYY-MM-DD') AS HEADER,
				       DECODE(TO_CHAR(YYYYMMDD, 'd'), 1, 'Y', 'N') AS HOLIDAYYN
				FROM (SELECT START_DATE + LEVEL - 1 YYYYMMDD
						FROM (SELECT TO_DATE(#{stDate}, 'YYYY-MM-DD') START_DATE,
									 TO_DATE(#{edDate}, 'YYYY-MM-DD') END_DATE
								FROM DUAL) CONNECT BY LEVEL <= END_DATE - START_DATE + 1)
				WHERE TO_CHAR(YYYYMMDD, 'd') IN (1, 7)

				UNION ALL

				SELECT TO_CHAR(HOLIDAYSTART, 'YYYY-MM-DD') AS HEADER,
				       'Y' AS HOLIDAYYN
				  FROM ATTEND_HOLIDAY_SCHEDULE
				 WHERE TO_CHAR(HOLIDAYSTART, 'YYYY-MM-DD') BETWEEN #{stDate} AND #{edDate}) T
		GROUP BY T.HEADER
		ORDER BY T.HEADER
		]]>
	</select>

	<!-- 휴무일 근무현황 데이터 -->
	<select id="getClosedDayAttendance" parameterType="cmap" resultType="cmap">
		SELECT T.DEPTNAME AS "DeptName"
		<foreach collection="headerList" item="item" index="index">
			<![CDATA[ ,LISTAGG(DECODE(TO_CHAR(T.TARGETDATE, 'YYYY-MM-DD'),  #{item}, T.URNAME, NULL), '<br/><br/>') WITHIN GROUP (ORDER BY T.URNAME) AS "ClosedDay_${index}" ]]>
		</foreach>
		FROM (SELECT
		BG.USERCODE,
		DEPTNAME,
		M.TARGETDATE,
		<![CDATA[
					CASE WHEN EX.APPROVALSTS = 'Y' THEN FN_BASEGETDICTIONARY_S(#{lang}, UR.MULTIDISPLAYNAME)
						 WHEN EX.APPROVALSTS = 'N' THEN CONCAT(FN_BASEGETDICTIONARY_S(#{lang}, UR.MULTIDISPLAYNAME), '<br/>(미승인)')
					     ELSE CONCAT(FN_BASEGETDICTIONARY_S(#{lang}, UR.MULTIDISPLAYNAME), '<br/>(미신청)') END URNAME
					]]>
		FROM
		SYS_OBJECT_GROUP OG
		JOIN SYS_OBJECT_USER_BASEGROUP BG ON
		BG.COMPANYCODE = OG.COMPANYCODE
		AND BG.DEPTCODE = OG.GROUPCODE
		AND BG.JOBTYPE = 'Origin'
		JOIN SYS_OBJECT_USER UR ON
		BG.USERCODE = UR.USERCODE
		JOIN ATTEND_COMMUTING_MST M ON
		M.USERCODE = BG.USERCODE
		LEFT OUTER JOIN ATTEND_EXTENSIONHOLIDAY EX ON
		M.USERCODE = EX.USERCODE AND M.TARGETDATE = EX.JOBDATE
		WHERE
		OG.COMPANYCODE = #{CompanyCode}
		AND OG.GROUPPATH LIKE #{GroupPath} || '%'
		AND UR.ISUSE = 'Y'
		AND UR.ISDISPLAY = 'Y'
		AND M.ATTENDTIME IS NOT NULL

		<if test='normalWork != null and normalWork !="" and normalWork == "Y"'>
			<![CDATA[ AND NVL(EX.APPROVALSTS, '') = 'Y' ]]>
		</if>

		AND TO_CHAR(M.TARGETDATE, 'YYYY-MM-DD') IN
		<foreach collection="headerList" item="item" index="index" separator="," open="(" close=")">
			#{item}
		</foreach>
		) T
		GROUP BY T.DEPTNAME
		ORDER BY DEPTNAME
	</select>

	<!-- 휴무일 근무계획 데이터 -->
	<select id="getClosedDayPlan" parameterType="cmap" resultType="cmap">
		SELECT
		<foreach collection="headerList" item="item" index="index" separator="," >
			<![CDATA[ LISTAGG(DECODE(TO_CHAR(T.JOBDATE, 'YYYY-MM-DD'), #{item}, T.URNAME, NULL), '<br/><br/>') WITHIN GROUP (ORDER BY T.URNAME) AS "ClosedDay_${index}" ]]>
		</foreach>
		FROM (SELECT
		AME.USERCODE,
		FN_BASEGETDICTIONARY_S(#{lang}, UR.MULTIDISPLAYNAME) AS URNAME,
		JOBSTSNAME,
		NVL(APPROVALSTS, 'Y') APPROVALSTS,
		JOBDATE
		FROM
		ATTEND_EXTENSIONHOLIDAY AME
		JOIN SYS_OBJECT_USER UR ON
		AME.USERCODE = UR.USERCODE
		JOIN SYS_OBJECT_USER_BASEGROUP BG ON
		BG.USERCODE = UR.USERCODE
		AND BG.COMPANYCODE = #{CompanyCode}
		AND BG.JOBTYPE = 'Origin'
		JOIN SYS_OBJECT_GROUP OG ON
		BG.COMPANYCODE = OG.COMPANYCODE
		AND OG.GROUPTYPE = 'Dept'
		AND BG.DEPTCODE = OG.GROUPCODE
		AND MEMBEROF != 'NOUSE'
		LEFT JOIN ATTEND_COMMUTING_MST ACM ON
		AME.USERCODE = ACM.USERCODE
		AND AME.JOBDATE = ACM.TARGETDATE
		WHERE
		UR.ISUSE = 'Y'
		AND UR.ISDISPLAY = 'Y'
		<![CDATA[ AND NVL(APPROVALSTS, '') <> 'N' ]]>
		AND OG.GROUPPATH LIKE #{GroupPath} || '%'

		<if test="sJobTitleCode != null and sJobTitleCode !=''">
			AND JOBTITLECODE = #{sJobTitleCode}
		</if>

		<if test="sJobLevelCode != null and sJobLevelCode !=''">
			AND JOBLEVELCODE = #{sJobLevelCode}
		</if>

		<if test="sUserTxt != null and sUserTxt !=''">
			AND FN_BASEGETDICTIONARY_S(#{lang}, ur.MultiDisplayName) LIKE '%'||#{sUserTxt}||'%'
		</if>
		AND TO_CHAR(JOBDATE, 'YYYY-MM-DD') IN
		<foreach collection="headerList" item="item" index="index" separator="," open="(" close=")">
			#{item}
		</foreach>
		ORDER BY AME.USERCODE) T
	</select>

	<!-- 휴무일 근무계획 현활 데이터 -->
	<select id="getClosedDayPlanStatus" parameterType="cmap" resultType="cmap">
		SELECT
		T.USERCODE AS "UserCode",
		T.DEPTNAME AS "DeptName",
		T.JOBTITLENAME AS "JobTitleName",
		T.JOBPOSITIONNAME AS "JobPositionName",
		T.JOBLEVELNAME AS "JobLevelName",
		T.URNAME AS "URName",
		(TO_DATE(#{edDate}) - TO_DATE(#{stDate})) + 1 AS "MonthDayCnt",
		(SELECT COUNT(*) FROM ATTEND_JOB WHERE USERCODE = T.USERCODE AND WORKSTS = 'ON' AND TO_CHAR(JOBDATE, 'YYYY-MM-DD') BETWEEN #{stDate} AND #{edDate}) AS "AttendDayCnt",
		SUM(DECODE(T.DAYNAMES, 7, 1, 0)) AS "SaturdayCnt",
		SUM(DECODE(T.DAYNAMES, 1, 1, 0)) AS "SundayCnt",
		SUM(DECODE(T.DAYNAMES, 1, 0, DECODE(T.DAYNAMES, 7, 0, 1))) AS "EtcHolidayCnt",
		SUM(DECODE(T.DAYNAMES, 7, 1, 0)) + SUM(DECODE(T.DAYNAMES, 1, 1, 0)) + SUM(DECODE(T.DAYNAMES, 1, 0, DECODE(T.DAYNAMES, 7, 0, 1))) AS "ClosedDayCnt",
		'' AS "Etc"
		FROM (SELECT
		AME.USERCODE,
		DEPTNAME,
		JOBTITLENAME,
		JOBTITLECODE,
		JOBPOSITIONNAME,
		JOBPOSITIONCODE,
		JOBLEVELNAME,
		JOBLEVELCODE,
		FN_BASEGETDICTIONARY_S(#{lang}, UR.MULTIDISPLAYNAME) AS URNAME,
		JOBDATE,
		TO_CHAR(JOBDATE, 'd') AS DAYNAMES
		FROM
		ATTEND_EXTENSIONHOLIDAY AME
		JOIN SYS_OBJECT_USER UR ON
		AME.USERCODE = UR.USERCODE
		JOIN SYS_OBJECT_USER_BASEGROUP BG ON
		BG.USERCODE = UR.USERCODE
		AND BG.COMPANYCODE = #{CompanyCode}
		AND BG.JOBTYPE = 'Origin'
		JOIN SYS_OBJECT_GROUP OG ON
		BG.COMPANYCODE = OG.COMPANYCODE
		AND OG.GROUPTYPE = 'Dept'
		AND BG.DEPTCODE = OG.GROUPCODE
		AND MEMBEROF != 'NOUSE'
		LEFT JOIN ATTEND_COMMUTING_MST ACM ON
		AME.USERCODE = ACM.USERCODE
		AND AME.JOBDATE = ACM.TARGETDATE
		WHERE
		UR.ISUSE = 'Y'
		AND UR.ISDISPLAY = 'Y'
		<![CDATA[ AND NVL(APPROVALSTS, '') <> 'N' ]]>
		AND OG.GROUPPATH LIKE #{GroupPath} || '%'
		<if test="sJobTitleCode != null and sJobTitleCode !=''">
			AND JOBTITLECODE = #{sJobTitleCode}
		</if>

		<if test="sJobLevelCode != null and sJobLevelCode !=''">
			AND JOBLEVELCODE = #{sJobLevelCode}
		</if>

		<if test="sUserTxt != null and sUserTxt !=''">
			AND FN_BASEGETDICTIONARY_S(#{lang}, ur.MultiDisplayName) LIKE '%'||#{sUserTxt}||'%'
		</if>
		AND TO_CHAR(JOBDATE, 'YYYY-MM-DD') IN
		<foreach collection="headerList" item="item" index="index" separator="," open="(" close=")">
			#{item}
		</foreach>
		) T
		GROUP BY T.USERCODE, T.DEPTNAME, T.JOBTITLENAME, T.JOBPOSITIONNAME, T.JOBLEVELNAME, T.URNAME
		ORDER BY T.DEPTNAME, T.URNAME
	</select>

	<select id="getUserAttStatusInfo" parameterType="cmap" resultType="cmap">
		SELECT
		UserCode as "UserCode"
		,DeptFullPath as "DeptFullPath"
		,UserName as "UserName"
		,NVL(DeptName,'') as "DeptName"
		,NVL(JobPositionName,'') as "JobPositionName"
		,NVL(JobTitleName,'') as "JobTitleName"
		,NVL(JobLevelName,'') as "JobLevelName"
		,EnterDate as "EnterDate"
		,PhotoPath as "PhotoPath"
		,DeptCode as "DeptCode"
		,JobPositionSortKey as "JobPositionSortKey"
		,DeptSortKey as "DeptSortKey"
		,SortKey as "SortKey"
		,JobLevelSortKey as "JobLevelSortKey"
		,JobTitlecode as "JobTitlecode"
		FROM
		(SELECT u.UserCode,
		CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang}, u.MultiDisplayName)) > 0 THEN
		Fn_BaseGetDictionary_S(#{lang}, u.MultiDisplayName)
		ELSE
		u.DisplayName
		END as UserName,
		CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang}, MultiDeptName)) > 0 THEN
		Fn_BaseGetDictionary_S(#{lang}, MultiDeptName)
		ELSE
		DeptName
		END as DeptName,
		CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang}, MultiJobPositionName)) > 0 THEN
		Fn_BaseGetDictionary_S(#{lang}, MultiJobPositionName)
		ELSE
		JobPositionName
		END as JobPositionName,
		CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang}, MultiJobTitleName)) > 0 THEN
		Fn_BaseGetDictionary_S(#{lang}, MultiJobTitleName)
		ELSE
		JobTitleName
		END as JobTitleName,
		CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang}, MultiJobLevelName)) > 0 THEN
		Fn_BaseGetDictionary_S(#{lang}, MultiJobLevelName)
		ELSE
		JobLevelName
		END as JobLevelName,
		u.EnterDate,
		b.JobPositionSortKey,
		b.JobLevelSortKey,
		b.JobTitlecode,
		b.DeptSortKey,
		b.SortKey,
		u.PhotoPath,
		DeptCode,
		(SELECT DisplayName
		FROM sys_object_group r
		WHERE GroupCode = sog.MemberOf) DeptFullPath
		FROM sys_object_user_basegroup b
		JOIN sys_object_user u ON b.UserCode = u.UserCode
		LEFT JOIN sys_object_group sog
		ON b.DeptCode = sog.GroupCode
		WHERE b.CompanyCode = #{CompanyCode}
		<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
			U.UserCode = #{user.UserCode} AND DeptCode = #{user.DeptCode}
		</foreach>
		) tb
		ORDER BY SortKey, JobPositionSortKey, JobLevelSortKey, JobTitlecode, EnterDate ASC
	</select>

	<!-- 기간 별 근무 시간 휴무/연장 근무에 대한 주야 근무 구분 처리 -->
	<update id="getUserAttWorkWithDayAndNightTimeProc" statementType="CALLABLE" parameterType="cmap" >
		{ CALL sp_attend_DayNightWorkTime(#{UserCode},#{CompanyCode},#{StartDate},#{EndDate},#{NightStartDate},#{NightEndDate},#{HolNightStartDate},#{HolNightEndDate},#{ExtNightStartDate},#{ExtNightEndDate},#{TargetUserCode, mode=OUT, jdbcType=VARCHAR},#{WorkDay, mode=OUT, jdbcType=VARCHAR},#{WorkTime, mode=OUT, jdbcType=VARCHAR},#{TotWorkTime, mode=OUT, jdbcType=VARCHAR},#{TotAcWorkTime, mode=OUT, jdbcType=VARCHAR},#{AttRealTime, mode=OUT, jdbcType=VARCHAR},#{AttRealDTime, mode=OUT, jdbcType=VARCHAR},#{AttRealNTime, mode=OUT, jdbcType=VARCHAR},#{ExtenAc, mode=OUT, jdbcType=VARCHAR},#{ExtenAcD, mode=OUT, jdbcType=VARCHAR},#{ExtenAcN, mode=OUT, jdbcType=VARCHAR},#{HoliAc, mode=OUT, jdbcType=VARCHAR},#{HoliAcD, mode=OUT, jdbcType=VARCHAR},#{HoliAcN, mode=OUT, jdbcType=VARCHAR},#{AttAc, mode=OUT, jdbcType=VARCHAR},#{AttAcD, mode=OUT, jdbcType=VARCHAR},#{AttAcN, mode=OUT, jdbcType=VARCHAR},#{JobStsSumTime, mode=OUT, jdbcType=VARCHAR},#{TotConfWorkTime, mode=OUT, jdbcType=VARCHAR},#{RemainTime, mode=OUT, jdbcType=VARCHAR},#{NormalCnt, mode=OUT, jdbcType=VARCHAR},#{FixWorkTime, mode=OUT, jdbcType=VARCHAR},#{TotRealWorkTime, mode=OUT, jdbcType=VARCHAR},#{ExptVacTime, mode=OUT, jdbcType=VARCHAR},#{k, mode=OUT, jdbcType=VARCHAR}) }
	</update>

	<select id="getUserAttExcelInfoV2" parameterType="cmap" resultType="cmap">
		SELECT
		TO_CHAR(dayList, 'YYYY-MM-DD') AS "dayList"
		,DeptFullPath as "DeptFullPath"
		,DisplayName as "DisplayName"
		,DeptName as "DeptName"
		,JobPositionName as "JobPositionName"
		,JobTitleName as "JobTitleName"
		,EnterDate as "EnterDate"
		,PhotoPath as "PhotoPath"
		,weekd as "weekd"
		,TO_NUMBER(TO_CHAR(dayList, 'DD')) AS "v_day"
		,TargetUserCode as "TargetUserCode"
		,TargetUserCode as "UserCode"
		,SchName as "SchName"
		,VacFlag as "VacFlag"
		,VacOffFlag as "VacOffFlag"
		,CASE WHEN VacFlag IS NOT NULL THEN (SELECT MAX(CodeName) FROM sys_base_code WHERE codegroup='VACATION_TYPE' AND CODE=VacFlag) END as "VacName"
		,WorkSts as "WorkSts"

		,TO_CHAR(AttStartTime,'YYYY-MM-DD HH24:MI:SS') as "AttStartTime"
		,TO_CHAR(AttEndTime,'YYYY-MM-DD HH24:MI:SS') as "AttEndTime"
		,TO_CHAR(AttDayStartTime,'YYYY-MM-DD HH24:MI:SS') as "AttDayStartTime"
		,TO_CHAR(AttDayEndTime,'YYYY-MM-DD HH24:MI:SS') as "AttDayEndTime"

		,TO_CHAR(AttDayStartTime, 'HH24:MIAM') as "v_AttDayStartTime"
		,TO_CHAR(AttDayEndTime, 'HH24:MIAM') as "v_AttDayEndTime"
		,TO_CHAR(mAttDayStartTime,'YYYY-MM-DD HH24:MI:SS') AS "mAttDayStartTime"
		,TO_CHAR(mAttDayEndTime,'YYYY-MM-DD HH24:MI:SS') AS "mAttDayEndTime"
		,CASE
		WHEN WorkingSystemType='0' THEN
		case when TO_DATE(TO_CHAR(AttDayStartTime,'YYYYMMDD'),'YYYYMMDD') <![CDATA[<]]> TO_DATE(TO_CHAR(AttDayEndTime,'YYYYMMDD'),'YYYYMMDD') then
		'Y'
		else
		'N'
		end
		ELSE
		case when TO_DATE(TO_CHAR(mAttDayStartTime,'YYYYMMDD'),'YYYYMMDD') <![CDATA[<]]> TO_DATE(TO_CHAR(mAttDayEndTime,'YYYYMMDD'),'YYYYMMDD') then
		'Y'
		else
		'N'
		end
		END as "v_NextDayYn"
		,TO_CHAR(AttStartTime, 'HH24:MIAM') as "v_AttStartTime"
		,TO_CHAR(AttEndTime, 'HH24:MIAM') as "v_AttEndTime"

		,TO_CHAR(AttDayStartTime, 'HH24') as "v_AttDayStartHour"
		,TO_CHAR(AttDayStartTime, 'MI') as "v_AttDayStartMin"
		,TO_CHAR(AttDayEndTime, 'HH24') as "v_AttDayEndHour"
		,TO_CHAR(AttDayEndTime, 'MI') as "v_AttDayEndMin"

		,TO_CHAR(AttStartTime, 'HH24') as "v_AttStartHour"
		,TO_CHAR(AttStartTime, 'MI') as "v_AttStartMin"
		,CASE WHEN WorkingSystemType='2' AND mAttDayEndTime <![CDATA[<]]> AttEndTime THEN
		TO_CHAR(mAttDayEndTime, 'HH24')
		ELSE
		TO_CHAR(AttEndTime, 'HH24')
		END as "v_AttEndHour"
		,CASE WHEN WorkingSystemType='2' AND mAttDayEndTime <![CDATA[<]]> AttEndTime THEN
		TO_CHAR(mAttDayEndTime, 'MI')
		ELSE
		TO_CHAR(AttEndTime, 'MI')
		END as "v_AttEndMin"
		,AttConfirmYn as "AttConfirmYn"
		,StartSts as "StartSts"
		,EndSts as "EndSts"
		,AttAc as "AttAc"
		,AttAcD as "AttAcD"
		,AttAcN as "AttAcN"
		,AttReal as "AttReal"
		,DECODE(ExtenNotEnough,'Y',ExtenAc,0) as "ExtenAc"
		,DECODE(ExtenNotEnough,'Y',ExtenAcD,0) as "ExtenAcD"
		,DECODE(ExtenNotEnough,'Y',ExtenAcN,0) as "ExtenAcN"
		,DECODE(HoliNotEnough,'Y',HoliAc,0) as "HoliAc"
		,DECODE(HoliNotEnough,'Y',HoliAcD,0) as "HoliAcD"
		,DECODE(HoliNotEnough,'Y',HoliAcN,0) as "HoliAcN"
		,NVL(ExtenCnt,0) as "ExtenCnt"
		,NVL(HoliCnt,0) as "HoliCnt"
		,AssYn as "AssYn"
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(ExtenNotEnough,'Y' , ExtenAc , 0) +DECODE(HoliNotEnough, 'Y' , HoliAc,0)+DECODE(AssYn,'Y',0,VacTime) as "TotWorkTime"
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(AssYn,'Y',0,VacTime) as "AttRealTime"
		,DECODE(AssYn,'Y',AttDayAc,AttReal)+ DECODE(ExtenNotEnough, 'Y' , ExtenAc , 0) +DECODE(HoliNotEnough, 'Y' , HoliAc,0) as  "AttRealConfTime"
		,ROUND((AttEndTime - AttStartTime)*1440,0) as "v_startToEndSec"
		,jh_JobStsName as "jh_JobStsName"
		,Etc as "Etc"
		,UserEtc as "UserEtc"
		,ExtenNotEnough as "ExtenNotEnough"
		,HoliNotEnough as "HoliNotEnough"
		,TO_CHAR(ExtenStart, 'HH24MI') as "v_ExtenStartTime"
		,TO_CHAR(ExtenEnd, 'HH24MI') as "v_ExtenEndTime"
		,TO_CHAR(HoliStart, 'HH24MI') as "v_HoliStartTime"
		,TO_CHAR(HoliEnd, 'HH24MI') as "v_HoliEndTime"

		,CASE WHEN CoreStartTime IS NOT NULL AND CoreEndTime IS NOT NULL and WorkSts = 'ON' THEN
		TO_CHAR(CoreStartTime, 'HH24:MI')||'~'||TO_CHAR(CoreEndTime, 'HH24:MI')
		ELSE
		''
		END as "CoreTime"
		,CASE WHEN AttDayStartTime IS NOT NULL AND AttDayStartTime != '' AND AttDayEndTime IS NOT NULL AND AttDayEndTime != '' THEN
		case when TO_DATE(TO_CHAR(AttDayStartTime,'HH24MISS'),'HH24MISS') <![CDATA[<=]]>  TO_DATE(TO_CHAR(CoreStartTime,'HH24MISS'),'HH24MISS')
		and TO_DATE(TO_CHAR(AttDayEndTime,'HH24MISS'),'HH24MISS') >= TO_DATE(TO_CHAR(CoreEndTime,'HH24MISS'),'HH24MISS') then
		'Y'
		else
		'N'
		end
		ELSE
		NULL
		END as "CoreTimeObey"
		,WorkAddr as "WorkAddr"
		,WorkZone as "WorkZone"
		,WorkPointX as "WorkPointX"
		,WorkPointY as "WorkPointY"
		,StartPointX as "StartPointX"
		,StartPointY as "StartPointY"
		,StartAddr as "StartAddr"
		,EndPointX as "EndPointX"
		,EndPointY as "EndPointY"
		,EndAddr as "EndAddr"
		,VacCnt as "VacCnt"
		,userWorkInfo as "userWorkInfo"
		,MonthlyAttAcSum as "MonthlyAttAcSum"
		,WorkingSystemType as "WorkingSystemType"
		,CoreSchTimeYn as "CoreSchTimeYn"
		,CoreStartTimeHour as "CoreStartTimeHour"
		,CoreStartTimeMin as "CoreStartTimeMin"
		,CoreEndTimeHour as "CoreEndTimeHour"
		,CoreEndTimeMin as "CoreEndTimeMin"
		,CoreSchTime as "CoreSchTime"
		,GoWorkTimeYn as "GoWorkTimeYn"
		,GoWorkStartTimeHour as "GoWorkStartTimeHour"
		,GoWorkStartTimeMin as "GoWorkStartTimeMin"
		,GoWorkEndTimeHour as "GoWorkEndTimeHour"
		,GoWorkEndTimeMin as "GoWorkEndTimeMin"
		,GoWorkEndTime as "GoWorkEndTime"
		,OffWorkTimeYn as "OffWorkTimeYn"
		,OffWorkStartTimeHour as "OffWorkStartTimeHour"
		,OffWorkStartTimeMin as "OffWorkStartTimeMin"
		,OffWorkEndTimeHour as "OffWorkEndTimeHour"
		,OffWorkEndTimeMin as "OffWorkEndTimeMin"
		,OffWorkEndTime as "OffWorkEndTime"
		FROM
		(
		SELECT
		dl.dayList
		,weekd
		,TargetUserCode
		,DeptCode
		,m.CommuSeq
		,NVL(m.Etc,'') Etc
		,m.TardyReason
		,m.UserEtc
		,m.LeaveEarlyReason
		,m.AttStartTime
		,m.AttEndTime
		,m.AttDayStartTime AS mAttDayStartTime
		,m.AttDayEndTime AS mAttDayEndTime
		,case when VacCnt >= 1 then 0 else NVL(m.AttReal,0) end AttReal
		,NVL(m.AttAc,0) AttAc
		,NVL(fn_attend_getNightDayTimeV2(m.AttDayStartTime, m.AttDayEndTime, '${NightStartDate}', '${NightEndDate}', NVL(j.AttDayIdle,NVL(m.AttIdle,0)), 'D'),0)  as AttAcD
		,NVL(fn_attend_getNightDayTimeV2(m.AttDayStartTime, m.AttDayEndTime, '${NightStartDate}', '${NightEndDate}', NVL(j.AttDayIdle,NVL(m.AttIdle,0)), 'N'),0)  as AttAcN
		,NVL(m.AttIdle,0) AttIdle
		,NVL(m.ExtenReal,0) ExtenReal
		,NVL(m.ExtenAc,0) ExtenAc
		,CASE WHEN m.ExtenCnt>1 THEN
		NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'D'),0)
		ELSE
		NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'D'),0) END  as ExtenAcD
		,CASE WHEN m.ExtenCnt>1 THEN
		NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'N'),0)
		ELSE
		NVL(fn_attend_getNightDayTimeV2(m.ExtenStart, m.ExtenEnd, '${ExtNightStartDate}', '${ExtNightEndDate}', eho.IdleTime, 'N'),0) END  as ExtenAcN
		,CASE WHEN m.AttEndTime is not null and m.AttEndTime <![CDATA[>=]]> m.ExtenEnd THEN 'Y' ELSE 'N' END as ExtenNotEnough
		,CASE WHEN m.AttStartTime is not null and m.AttStartTime <![CDATA[<=]]> m.HoliStart AND m.AttEndTime is not null and m.AttEndTime >= m.HoliEnd THEN 'Y' ELSE 'N' END as HoliNotEnough
		,m.ExtenStart
		,m.ExtenEnd
		,NVL(m.HoliReal,0) HoliReal
		,NVL(m.HoliAc,0) HoliAc
		,NVL(fn_attend_getNightDayTimeV2(m.HoliStart, m.HoliEnd, '${HolNightStartDate}', '${HolNightEndDate}', ehh.IdleTime, 'D'),0)  as HoliAcD
		,NVL(fn_attend_getNightDayTimeV2(m.HoliStart, m.HoliEnd, '${HolNightStartDate}', '${HolNightEndDate}', ehh.IdleTime, 'N'),0)  as HoliAcN
		,m.HoliStart
		,m.HoliEnd
		,m.ExtenCnt
		,m.HoliCnt
		,m.AttConfirmYn
		,m.AttConfirmTime
		,m.StartSts
		,m.EndSts
		,m.StartPointX
		,m.StartPointY
		,m.StartAddr
		,m.EndPointX
		,m.EndPointY
		,m.EndAddr
		,m.StartChangeYn
		,m.EndChangeYn
		,m.CoreStartTime
		,m.CoreEndTime
		,NVL(m.MonthlyAttAcSum, 0) as MonthlyAttAcSum

		,j.WorkSts
		,NVL(j.AttDayStartTime, '') AttDayStartTime
		,NVL(j.AttDayEndTime, '') AttDayEndTime
		,j.NextDayYn
		,j.ConfmYn
		,NVL(j.AssYn,'N') AssYn
		,j.WorkZone
		,j.WorkAddr
		,j.WorkPointX
		,j.WorkPointY
		,j.AllowRadius
		,j.StartZone
		,j.StartPointX jobStartPointX
		,j.StartPointY jobStartPointY
		,j.EndZone
		,j.EndPointX jobEndPointX
		,j.EndPointY jobEndPointY
		,j.Etc jobEtc
		,case when  TO_DATE(#{UR_TimeZone},'YYYY-MM-DD') <![CDATA[<]]>  TO_DATE(TO_CHAR(j.JobDate,'YYYYMMDD'),'YYYYMMDD') THEN 0 else j.AttDayAc end AttDayAc
		,NVL(s.SchName,'') SchName
		,Fn_BaseGetDictionary_S(#{lang},s.MultiDisplayName) schMultiDisplayName
		,BaseYn
		,CASE WHEN JobStsHisSeq > 0 THEN
		CASE WHEN JobStsHisSeq > 1 THEN
		Fn_BaseGetDictionary_S(#{lang},jh.JobStsName)||'+'
		ELSE
		Fn_BaseGetDictionary_S(#{lang},jh.JobStsName)
		END
		ELSE
		''
		END as jh_JobStsName
		,jh.StartTime as jh_StartTime
		,CASE WHEN NVL(VacCnt,0) >  0 THEN VacFlag ELSE '' END as VacFlag
		,case when NVL(VacCnt,0) > 0 then  NVL(j.AttDayAC,0)*NVL(VacCnt,0) else
		case when j.WorkSts = 'HOL' AND j.AttDayAC>0 then j.AttDayAC else 0 END end VacTime
		,VacOffFlag
		,DeptFullPath,DisplayName,DeptName,JobPositionName, JobTitleName,EnterDate,PhotoPath
		,JobPositionSortKey,DeptSortKey,SortKey,VacCnt
		,JobLevelSortKey
		,JobTitlecode
		,Fn_attend_getUserWorkInfo(TargetUserCode, dl.dayList) as userWorkInfo
		,NVL(s.WorkingSystemType, 0) as WorkingSystemType
		,NVL(s.CoreTimeYn, 'N') as CoreSchTimeYn
		,NVL(s.CoreStartTimeHour, '00') as CoreStartTimeHour
		,NVL(s.CoreStartTimeMin, '00') as CoreStartTimeMin
		,NVL(s.CoreEndTimeHour, '00') as CoreEndTimeHour
		,NVL(s.CoreEndTimeMin, '00') as CoreEndTimeMin
		,NVL(s.CoreStartTimeHour, '00')||':'||NVL(s.CoreStartTimeMin, '00')||'~'||NVL(s.CoreEndTimeHour, '00')||':'||NVL(s.CoreEndTimeMin, '00') as CoreSchTime
		,NVL(s.GoWorkTimeYn, 'N') as GoWorkTimeYn
		,NVL(s.GoWorkStartTimeHour, '00') as GoWorkStartTimeHour
		,NVL(s.GoWorkStartTimeMin, '00') as GoWorkStartTimeMin
		,NVL(s.GoWorkEndTimeHour, '00') as GoWorkEndTimeHour
		,NVL(s.GoWorkEndTimeMin, '00') as GoWorkEndTimeMin
		,NVL(s.GoWorkStartTimeHour, '00')||':'||NVL(s.GoWorkStartTimeMin, '00')||'~'||NVL(s.GoWorkEndTimeHour, '00')||':'||NVL(s.GoWorkEndTimeMin, '00') as GoWorkEndTime
		,NVL(s.OffWorkTimeYn, 'N') as OffWorkTimeYn
		,NVL(s.OffWorkStartTimeHour, '00') as OffWorkStartTimeHour
		,NVL(s.OffWorkStartTimeMin, '00') as OffWorkStartTimeMin
		,NVL(s.OffWorkEndTimeHour, '00') as OffWorkEndTimeHour
		,NVL(s.OffWorkEndTimeMin, '00') as OffWorkEndTimeMin
		,NVL(s.OffWorkStartTimeHour, '00')||':'||NVL(s.OffWorkStartTimeMin, '00')||'~'||NVL(s.OffWorkEndTimeHour, '00')||':'||NVL(s.OffWorkEndTimeMin, '00') as OffWorkEndTime

		FROM
		(
		SELECT
		daylist ,weekd
		,UserCode TargetUserCode
		,DeptFullPath,DisplayName,DeptName,JobPositionName, JobTitleName,EnterDate,PhotoPath,DeptCode
		,JobPositionSortKey,DeptSortKey,SortKey
		,JobLevelSortKey
		,JobTitlecode
		FROM
		(
		SELECT
		daylist
		,weekd
		FROM attend_daylist
		WHERE dayList BETWEEN TO_DATE(#{StartDate},'YYYY-MM-DD') AND TO_DATE(#{EndDate},'YYYY-MM-DD')
		) dl ,(
		SELECT
		u.UserCode
		,CASE WHEN LENGTH(Fn_BaseGetDictionary_S(#{lang},u.MultiDisplayName))>0 THEN
		Fn_BaseGetDictionary_S(#{lang},u.MultiDisplayName)
		ELSE
		u.DisplayName
		END as DisplayName
		,Fn_BaseGetDictionary_S(#{lang},MultiDeptName) DeptName
		,Fn_BaseGetDictionary_S(#{lang},MultiJobPositionName) JobPositionName
		,Fn_BaseGetDictionary_S(#{lang},MultiJobTitleName) JobTitleName
		,u.EnterDate
		,b.JobPositionSortKey
		,b.JobLevelSortKey
		,b.JobTitlecode
		,b.DeptSortKey
		,b.SortKey
		,u.PhotoPath
		,DeptCode
		,(SELECT DisplayName FROM sys_object_group r WHERE GroupCode = sog.MemberOf) DeptFullPath
		FROM sys_object_user_basegroup  b
		JOIN sys_object_user u					ON b.UserCode = u.UserCode
		LEFT JOIN sys_object_group sog			ON b.DeptCode = sog.GroupCode
		WHERE b.CompanyCode = #{CompanyCode}
		<if test='groupPath != null and groupPath != ""'>
			AND sog.GroupPath LIKE CONCAT(#{groupPath},'%')
		</if>
		<foreach collection="userCodeList" item="user" open="AND (" close=")"  separator=") OR (">
			U.UserCode = #{user.UserCode} AND DeptCode = #{user.DeptCode}
		</foreach>
		) u
		)dl
		LEFT JOIN attend_commuting_mst m	 ON dl.dayList = m.TargetDate		AND m.CompanyCode = #{CompanyCode}			AND dl.TargetUserCode = m.UserCode
		LEFT JOIN attend_job j			 ON dl.dayList = j.JobDate			AND j.CompanyCode = #{CompanyCode}			AND dl.TargetUserCode = j.UserCode
		LEFT JOIN attend_schedule s	 ON j.SchSeq = s.SchSeq
		LEFT JOIN attend_job_history jh ON dl.dayList = jh.JobDate			AND TargetUserCode = jh.UserCode			AND jh.CompanyCode = #{CompanyCode}
		LEFT JOIN (SELECT  dayList, ur_code, vv.VacFlag, VacOffFlag  , SUM(fn_attend_calVacDay(VacFlag, VacOffFlag, GUBUN)) VacCnt
		FROM  attend_daylist d JOIN vm_vacationinfo vv ON d.dayList BETWEEN vv.Sdate AND vv.eDate
		WHERE  d.dayList BETWEEN TO_DATE(#{StartDate},'YYYY-MM-DD') AND TO_DATE(#{EndDate},'YYYY-MM-DD')
		GROUP BY ur_code, dayList, VacOffFlag, VacFlag
		HAVING  SUM(fn_attend_calVacDay(VacFlag, VacOffFlag, GUBUN))>0) vv
		ON dl.dayList = vv.dayList AND dl.TargetUserCode = vv.UR_Code
		LEFT JOIN attend_extensionholiday eho ON dl.dayList = eho.jobDate AND dl.TargetUserCode = eho.UserCode AND eho.JobStsName = 'O' AND eho.CompanyCode = #{CompanyCode} AND eho.ApprovalSts = 'Y'
		LEFT JOIN attend_extensionholiday ehh ON dl.dayList = ehh.jobDate AND dl.TargetUserCode = ehh.UserCode AND ehh.JobStsName = 'H' AND ehh.CompanyCode = #{CompanyCode} AND ehh.ApprovalSts = 'Y'
		<!--GROUP BY dl.dayList , TargetUserCode , DeptCode-->
		<if test='AttStatus == "B10" '>
			<![CDATA[AND  TIMESTAMPDIFF(SECOND, m.AttStartTime , j.AttDayStartTime) between 1  AND 10*60 ]]>
		</if>
		<if test='AttStatus == "A1" '>
			<![CDATA[AND  TIMESTAMPDIFF(SECOND, m.AttStartTime , j.AttDayStartTime) between -60*60 AND  0]]>
		</if>
		<if test='AttStatus == "LATE" '>
			AND StartSts='lbl_att_beingLate'
		</if>
		) att
		ORDER BY SortKey, JobPositionSortKey, JobLevelSortKey, JobTitlecode, EnterDate, DisplayName, dayList ASC
	</select>
	
	<!-- 근태현황 엑셀 리스트 조회 -->
	<select id="getUserAttStatusByExcelList" parameterType="cmap" resultType="cmap">
		SELECT
			USERCODE AS "UserCode"
			, CASE
				WHEN MEMBEROF = 'ORGROOT' THEN ''
				ELSE (SELECT DisplayName FROM SYS_OBJECT_GROUP R WHERE GroupCode = MEMBEROF) 
			  END AS "DeptFullPath"
			, FN_BASEGETDICTIONARY_S(#{lang}, MultiDeptName) AS "DeptName"
			, FN_BASEGETDICTIONARY_S(#{lang}, MultiDisplayName) AS "DisplayName"
			, FN_BASEGETDICTIONARY_S(#{lang}, MultiJobPositionName) AS "JobPositionName"
			, FN_BASEGETDICTIONARY_S(#{lang}, MultiJobTitleName) AS "JobTitleName"
			, ENTERDATE AS "EnterDate"
			, TO_CHAR(DAYLIST, 'YYYY-MM-DD') AS "dayList"
			, TO_NUMBER(TO_CHAR(DAYLIST, 'D')) AS "weekd"
			, TO_NUMBER(TO_CHAR(DAYLIST - FN_ATTENDANCE_MYSQLWEEKDAY(DAYLIST) + #{FirstWeek}, 'WW')) AS "weeko"
			, TO_CHAR(DAYLIST, 'MM/DD') AS "v_dayList"
			, STARTSTS AS "StartSts"
			, ENDSTS AS "EndSts"
			, TO_CHAR(ATTDAYSTARTTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttDayStartTime" /* 스케줄출근시간 */
			, TO_CHAR(ATTDAYENDTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttDayEndTime" /* 스케줄퇴근시간 */
			, TO_CHAR(ATTSTARTTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttStartTime" /* 출근시간 */
			, TO_CHAR(ATTENDTIME, 'HH:MIAM', 'NLS_DATE_LANGUAGE=ENGLISH') AS "v_AttEndTime" /* 퇴근시간 */
			, NVL(ETC, '') AS "Etc"
			, CASE WHEN ASSYN = 'Y' THEN ATTAC ELSE ATTREAL END
				+ CASE WHEN EXTENNOTENOUGH = 'Y' THEN EXTENAC ELSE 0 END
				+ HOLIAC
				+ (NVL(ATTDAYAC, 0) * CASE WHEN NVL(VACCNT, 0) > 0 THEN VACCNT ELSE 0 END) AS "TotWorkTime" /* 해당일 총 근무시간 */
			, NVL((CASE WHEN ASSYN = 'Y' THEN ATTAC ELSE ATTREAL END + (NVL(ATTDAYAC, 0) * CASE WHEN NVL(VACCNT, 0) > 0 THEN VACCNT ELSE 0 END), '') AS "v_AttRealTime" /* 출퇴근 인정시간 */
			, EXTENAC AS "v_ExtenAc" /* 연장근무시간 */
			, HOLIAC  AS "v_HoliAc" /* 휴일근무시간 */
			, NVL(ROUND(((ATTENDTIME - ATTSTARTTIME) * (24 * 60)), 0), 0) AS "v_startToEnd" /* 출퇴근 실 근무시간 */
			, CASE WHEN StartSts ='lbl_n_att_absent' THEN '0' ELSE ATTIDLE END AS "v_AttIdle" /* 휴게시간 */
			, CASE WHEN ASSYN = 'Y' THEN ATTAC ELSE ATTREAL END + (NVL(ATTAC, 0) * CASE WHEN NVL(VACCNT, 0) > 0 THEN 1 ELSE 0 END) AS "AttRealTime" /* 출퇴근 인정시간 */
			, ATTIDLE AS "AttIdle"
			, ATTCONFIRMYN AS "AttConfirmYn"
			, VACCNT AS "VacCnt"
			, CASE WHEN VACCNT > 0 THEN (SELECT CODENAME FROM SYS_BASE_CODE WHERE CODEGROUP = 'VACATION_TYPE' AND VACFLAG = CODE and rownum=1)
				   ELSE '' END AS "VacName"
			, EXTENCNT AS "ExtenCnt"
			, HOLICNT AS "HoliCnt"
			, WORKSTS AS "WorkSts"
			, (SELECT SCHNAME FROM ATTEND_SCHEDULE AMS WHERE AMS.SCHSEQ = l.SCHSEQ) AS "SchName"
			, CASE WHEN StartSts ='lbl_att_beingLate'  THEN TO_CHAR(TRUNC(((ATTDAYSTARTTIME - ATTSTARTTIME) * (24 * 60 * 60)) / 60, 0)) ELSE '' END AS "LateMin"
			, CASE WHEN JH_COUNT > 0 THEN CASE WHEN JH_COUNT > 1 THEN JOBSTSNAME || '+' ELSE JOBSTSNAME END ELSE '' END AS "JobStsName"
	        , SortKey, JobPositionSortKey, JobLevelSortKey, JobTitleSortKey, JobTitlecode
		FROM (
			SELECT
			<choose>
				<when test='(AttStatus == null or AttStatus == "") and (SchSeq == null or SchSeq == "")'>
					NVL(A.DAYLIST, B.DAYLIST) AS DAYLIST
					, NVL(A.USERCODE, B.USERCODE) AS USERCODE
					, NVL(A.MEMBEROF, B.MEMBEROF) AS MEMBEROF
					, NVL(A.MULTIDEPTNAME, B.MULTIDEPTNAME) AS MULTIDEPTNAME
					, NVL(A.MULTIDISPLAYNAME, B.MULTIDISPLAYNAME) AS MULTIDISPLAYNAME
					, NVL(A.MULTIJOBPOSITIONNAME, B.MULTIJOBPOSITIONNAME) AS MULTIJOBPOSITIONNAME
					, NVL(A.MULTIJOBTITLENAME, B.MULTIJOBTITLENAME) AS MULTIJOBTITLENAME
					, NVL(A.ENTERDATE, B.ENTERDATE) AS ENTERDATE
					, NVL(B.VACFLAG, '') AS VACFLAG
					, NVL(B.VACCNT, 0) AS VACCNT
					, (SELECT JOBSTSNAME FROM ATTEND_JOB_HISTORY JH WHERE NVL(A.DAYLIST, B.DAYLIST) = JH.JOBDATE AND NVL(A.USERCODE, B.USERCODE) = JH.USERCODE AND ROWNUM <![CDATA[<=]]> 1) AS JOBSTSNAME
					, (SELECT COUNT(*) FROM ATTEND_JOB_HISTORY JH WHERE NVL(A.DAYLIST, B.DAYLIST) = JH.JOBDATE AND NVL(A.USERCODE, B.USERCODE) = JH.USERCODE GROUP BY JH.JOBDATE, JH.USERCODE) AS JH_COUNT
				</when>
				<otherwise>
					A.DAYLIST
					, A.USERCODE
					, A.MEMBEROF
					, A.MULTIDEPTNAME
					, A.MULTIDISPLAYNAME
					, A.MULTIJOBPOSITIONNAME
					, A.MULTIJOBTITLENAME
					, A.ENTERDATE
					, '' AS VACFLAG
					, 0 AS VACCNT
					, (SELECT JOBSTSNAME FROM ATTEND_JOB_HISTORY JH WHERE A.DAYLIST = JH.JOBDATE AND A.USERCODE = JH.USERCODE AND ROWNUM <![CDATA[<=]]> 1) AS JOBSTSNAME
					, (SELECT COUNT(*) FROM ATTEND_JOB_HISTORY JH WHERE A.DAYLIST = JH.JOBDATE AND A.USERCODE = JH.USERCODE GROUP BY JH.JOBDATE, JH.USERCODE) AS JH_COUNT
				</otherwise>
			</choose>
				, NVL(A.COMMUSEQ, 0) AS COMMUSEQ
				, NVL(A.STARTSTS, '') AS STARTSTS
				, NVL(A.ENDSTS, '') AS ENDSTS
				, A.ATTSTARTTIME
				, A.ATTENDTIME
				, NVL(A.ATTREAL, 0) AS ATTREAL
				, NVL(A.ATTAC, 0) AS ATTAC
				, NVL(A.ATTIDLE, 0) AS ATTIDLE
				, NVL(A.EXTENREAL, 0) AS EXTENREAL
				, NVL(A.EXTENAC, 0) AS EXTENAC
				, A.EXTENNOTENOUGH
				, NVL(A.HOLIREAL, 0) AS HOLIREAL
				, NVL(A.HOLIAC, 0) AS HOLIAC
				, NVL(A.EXTENCNT, 0) AS EXTENCNT
				, NVL(A.HOLICNT, 0) AS HOLICNT
				, NVL(A.ATTCONFIRMYN, 'N') AS ATTCONFIRMYN
				, A.ETC
				, CASE WHEN TO_CHAR(J.ATTDAYSTARTTIME, 'YYYY-MM-DD HH24:MI:SS') = '0000-00-00 00:00:00' THEN NULL ELSE J.ATTDAYSTARTTIME END AS ATTDAYSTARTTIME
				, CASE WHEN TO_CHAR(J.ATTDAYENDTIME, 'YYYY-MM-DD HH24:MI:SS') = '0000-00-00 00:00:00' THEN NULL ELSE J.ATTDAYENDTIME END AS ATTDAYENDTIME
				, NVL(J.ASSYN, 'N') AS ASSYN
				, J.WORKSTS
				, J.SCHSEQ
				, J.ATTDAYAC
		        , NVL(A.SortKey, b.SortKey) SortKey
		        , NVL(A.JobPositionSortKey, B.JobPositionSortKey) JobPositionSortKey
		        , NVL(A.JobLevelSortKey, B.JobLevelSortKey) JobLevelSortKey 
		        , NVL(A.JobTitleSortKey, B.JobTitleSortKey) JobTitleSortKey 
		        , NVL(A.JobTitlecode, b.JobTitlecode) JobTitlecode
			FROM (
				SELECT
					M.TARGETDATE AS DAYLIST
					, UR.USERCODE AS USERCODE
					, OG.MEMBEROF
					, BG.MULTIDEPTNAME
					, UR.MULTIDISPLAYNAME
					, BG.MULTIJOBPOSITIONNAME
					, BG.MULTIJOBTITLENAME
					, UR.ENTERDATE
					, M.COMMUSEQ
					, M.STARTSTS
					, M.ENDSTS
					, M.ATTSTARTTIME
					, M.ATTENDTIME
					, M.ATTREAL
					, M.ATTAC
					, M.ATTIDLE
					, M.EXTENREAL
					, M.EXTENAC
					, CASE WHEN M.ATTENDTIME IS NOT NULL AND M.ATTENDTIME >= M.EXTENEND THEN 'Y' ELSE 'N' END AS EXTENNOTENOUGH
					, HOLIREAL
					, M.HOLIAC
					, M.EXTENCNT
					, M.HOLICNT
					, M.ATTCONFIRMYN
					, M.ETC
					, bg.SortKey, bg.JobPositionSortKey, bg.JobLevelSortKey, bg.JobTitleSortKey, bg.JobTitlecode
				FROM SYS_OBJECT_USER UR
					JOIN SYS_OBJECT_USER_BASEGROUP BG ON UR.USERCODE = BG.USERCODE AND BG.COMPANYCODE = #{CompanyCode} AND BG.JOBTYPE = 'Origin'
					JOIN SYS_OBJECT_GROUP OG ON BG.COMPANYCODE = OG.COMPANYCODE AND OG.GROUPTYPE IN ('Dept', 'Company') AND BG.DEPTCODE = OG.GROUPCODE AND MEMBEROF != 'NOUSE'
					JOIN ATTEND_COMMUTING_MST M ON M.TARGETDATE BETWEEN #{StartDate} AND #{EndDate} AND UR.USERCODE = M.USERCODE
				WHERE
					OG.GROUPPATH LIKE #{GroupPath} || '%'
					<if test='RetireUser neq "Y"'>
						AND UR.ISUSE = 'Y' AND UR.ISDISPLAY = 'Y'
					</if>
					<!-- 직책   -->
					<if test='sJobTitleCode != null and sJobTitleCode != ""'>
						AND BG.JOBTITLECODE = #{sJobTitleCode}
					</if>
					<!-- 직급 -->
					<if test='sJobLevelCode != null and sJobLevelCode != ""'>
						AND BG.JOBLEVELCODE = #{sJobLevelCode}
					</if>
					<if test='sUserTxt != null and sUserTxt != ""'>
						AND UR.MULTIDISPLAYNAME LIKE '%'||#{sUserTxt}||'%'
					</if>
			) A
			<choose>
				<when test='(AttStatus == null or AttStatus == "") and (SchSeq == null or SchSeq == "")'>
				FULL OUTER JOIN (
					SELECT
						DL.DAYLIST
						, A.UR_CODE AS USERCODE
						, OG.MEMBEROF
						, BG.MULTIDEPTNAME
						, UR.MULTIDISPLAYNAME
						, BG.MULTIJOBPOSITIONNAME
						, BG.MULTIJOBTITLENAME
						, UR.ENTERDATE
						, A.VACFLAG
						, SUM(A.VacDay) AS VACCNT
						, bg.SortKey, bg.JobPositionSortKey, bg.JobLevelSortKey, bg.JobTitleSortKey, bg.JobTitlecode
					FROM SYS_OBJECT_USER UR
						JOIN SYS_OBJECT_USER_BASEGROUP BG ON UR.USERCODE = BG.USERCODE AND BG.COMPANYCODE = #{CompanyCode} AND BG.JOBTYPE = 'Origin'
						JOIN SYS_OBJECT_GROUP OG ON BG.COMPANYCODE = OG.COMPANYCODE AND OG.GROUPTYPE IN ('Dept', 'Company') AND BG.DEPTCODE = OG.GROUPCODE AND MEMBEROF != 'NOUSE'
						LEFT JOIN VM_VACATIONINFO_DAY A ON UR.USERCODE = A.UR_CODE
						LEFT JOIN ATTEND_DAYLIST DL ON DL.DAYLIST BETWEEN #{StartDate} AND #{EndDate} AND DL.DAYLIST = TO_DATE(A.VacDate,'YYYY-MM-DD')
					WHERE
						OG.GROUPPATH LIKE #{GroupPath} || '%'
						<if test='RetireUser neq "Y"'>
							AND UR.ISUSE = 'Y' AND UR.ISDISPLAY = 'Y'
						</if>
						<!-- 직책   -->
						<if test='sJobTitleCode != null and sJobTitleCode != ""'>
							AND BG.JOBTITLECODE = #{sJobTitleCode}
						</if>
						<!-- 직급 -->
						<if test='sJobLevelCode != null and sJobLevelCode != ""'>
							AND BG.JOBLEVELCODE = #{sJobLevelCode}
						</if>
						<if test='sUserTxt != null and sUserTxt != ""'>
							AND UR.MULTIDISPLAYNAME LIKE '%'||#{sUserTxt}||'%'
						</if>
					GROUP BY
						DL.DAYLIST
						, A.UR_CODE
						, OG.MEMBEROF
						, BG.MULTIDEPTNAME
						, UR.MULTIDISPLAYNAME
						, BG.MULTIJOBPOSITIONNAME
						, BG.MULTIJOBTITLENAME
           				, bg.SortKey
           				, bg.JobPositionSortKey
           				, bg.JobLevelSortKey
           				, bg.JobTitleSortKey
           				, bg.JobTitlecode
						, UR.ENTERDATE
						, A.VACFLAG
				) B ON B.DAYLIST = A.DAYLIST AND B.USERCODE = A.USERCODE
				LEFT JOIN ATTEND_JOB J ON NVL(A.DAYLIST, B.DAYLIST) = J.JOBDATE AND NVL(A.USERCODE, B.USERCODE) = J.USERCODE
				</when>
				<otherwise>
					LEFT JOIN ATTEND_JOB J ON A.DAYLIST = J.JOBDATE AND A.USERCODE = J.USERCODE
				</otherwise>
			</choose>
			WHERE
				1 = 1
				<if test='SchSeq != null and SchSeq != ""'>
					AND J.SCHSEQ = #{SchSeq}
				</if>
				<if test='AttStatus == "B10"'>
					<![CDATA[AND ((J.ATTDAYSTARTTIME - A.ATTSTARTTIME) * (24 * 60 * 60)) BETWEEN 1 AND 10 * 60]]>
				</if>
				<if test='AttStatus == "A1" '>
					<![CDATA[AND ((J.ATTDAYSTARTTIME - A.ATTSTARTTIME) * (24 * 60 * 60)) BETWEEN - 60 * 60 AND 0]]>
				</if>
				<if test='AttStatus == "LATE"'>
					AND A.STARTSTS='lbl_att_beingLate'
				</if>
		) L
		<trim prefix="ORDER BY"  prefixOverrides =",">
			<choose>
				<when test="orgOrders != null and orgOrders != '' ">
				  	<foreach collection="orgOrders" item="orgOrder" separator=",">
				  		<if test="orgOrder != null and orgOrder == 'JobTitle'">
				  			JobTitleSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobLevel'">
				  			JobLevelSortKey ASC
				  		</if>
				  		<if test="orgOrder != null and orgOrder == 'JobPosition'">
				  			JobPositionSortKey ASC
				  		</if>
		  				<if test="orgOrder != null and orgOrder == 'DN'">
				  			"DisplayName" ASC
				  		</if>
				  	</foreach>
				  	, dayList, SortKey, JobTitlecode, EnterDate, UserCode
			  	</when>
			  	<otherwise>
		  			<![CDATA[ SortKey ASC, JobTitleSortKey ASC, JobLevelSortKey ASC, JobPositionSortKey ASC, "DisplayName" ASC ]]>
		  		</otherwise>
			</choose>
		</trim>
	</select>
	
</mapper>