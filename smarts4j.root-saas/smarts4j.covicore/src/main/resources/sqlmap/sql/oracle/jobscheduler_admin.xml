<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="jobscheduler.admin">
   
    <select id="selectJobSchedulerList" parameterType="cmap" resultType="cmap">
    /* jobscheduler.admin.selectJobSchedulerList */
		<include refid="oracle.include.pagingHeader"/>			
        SELECT A.JobID AS "JobID"
			 , A.JobTitle AS "JobTitle"
			 , A.Seq AS "Seq"
			 , A.ClusterID AS "ClusterID"
			 , A.JobType AS "JobType"
			 , A.IsUse AS "IsUse"
			 , A.JobState AS "JobState"
			 , A.RepeatCnt AS "RepeatCnt"
			 , A.RepeatedCnt AS "RepeatedCnt"								
			 , A.AgentServer AS "AgentServer"		
			 , A.ServiceAgent AS "ServiceAgent"	
			 , A.LastRunTime AS "LastRunTime"	
			 , A.NextRunTime As "NextRunTime"
			 , TO_CHAR(A.RegistDate,'YYYY-MM-DD HH24:MI:SS')  AS "RegistDate"
		 	 , A.RegisterCode AS "RegisterCode"
			 , A.ScheduleID AS "ScheduleID"
			 , A.ScheduleType AS "ScheduleType"
			 , A.ScheduleTitle AS "ScheduleTitle"
			 , A.Path AS "Path"
			 , A.Method AS "Method"
			 , A.Params AS "Params"
			 , A.Reserved1 AS "Reserved1"
			 , A.TimeOut AS "TimeOut"
			 , A.RetryCnt AS "RetryCnt"							
        FROM
			  (SELECT nvl(J.JobID, SUBSTR(QT.Trigger_Group,5)) AS JobID
					, J.JobTitle
					, J.Seq
					, J.ClusterID
					, J.JobType
					, J.IsUse
					, QT.TRIGGER_STATE AS JobState
					, J.RepeatCnt
					, J.RepeatedCnt								
					, nvl(J.AgentServer, SUBSTR(QT.JOB_GROUP,7)) AgentServer
					, J.ServiceAgent
					, to_char(to_date('1970-01-01','YYYY.MM.DD') + numtodsinterval(QT.PREV_FIRE_TIME/1000,'SECOND'),'YYYY.MM.DD HH24:MI:SS') AS LastRunTime
					, to_char(to_date('1970-01-01','YYYY.MM.DD') + numtodsinterval(QT.Next_FIRE_TIME/1000,'SECOND'),'YYYY.MM.DD HH24:MI:SS') AS NextRunTime
					, QT.trigger_state AS "LastState"
					, J.RegDate AS RegistDate
					, J.RegID AS RegisterCode
					, S.ScheduleID
					, S.ScheduleType
					, S.ScheduleTitle
					, J.Path
					, J.Method
					, J.Params
					, S.Reserved1
					, J.TimeOut
					, J.RetryCnt
					FROM ZSCHEDULER_JOB J
					INNER JOIN ZSCHEDULER_SCHEDULE S ON J.JobID = S.JobID
			   		LEFT JOIN QRTZ_TRIGGERS QT ON J.JobID = SUBSTR(QT.Trigger_Group,5)
			   WHERE J.DomainID = #{domain}
			   <if test="domain == 0">
				UNION 
					SELECT nvl(J.JobID, SUBSTR(QT.Trigger_Group,5))
						, J.JobTitle
						, J.Seq
						, J.ClusterID
						, J.JobType
						, J.IsUse
						, QT.TRIGGER_STATE AS JobState
						, J.RepeatCnt
						, J.RepeatedCnt								
						, nvl(J.AgentServer, SUBSTR(QT.JOB_GROUP,7)) AgentServer
						, J.ServiceAgent
						, to_char(to_date('1970-01-01','YYYY.MM.DD') + numtodsinterval(QT.PREV_FIRE_TIME/1000,'SECOND'),'YYYY.MM.DD HH24:MI:SS') AS LastRunTime
						, to_char(to_date('1970-01-01','YYYY.MM.DD') + numtodsinterval(QT.Next_FIRE_TIME/1000,'SECOND'),'YYYY.MM.DD HH24:MI:SS') AS NextRunTime
						, QT.trigger_state AS "LastState"
						, J.RegDate AS RegistDate
						, J.RegID AS RegisterCode
						, S.ScheduleID
						, S.ScheduleType
						, S.ScheduleTitle
						, J.Path
						, J.Method
						, J.Params
						, S.Reserved1
						, J.TimeOut
						, J.RetryCnt
						FROM ZSCHEDULER_JOB J
						INNER JOIN ZSCHEDULER_SCHEDULE S ON J.JobID = S.JobID
						RIGHT JOIN QRTZ_TRIGGERS QT ON J.JobID = SUBSTR(QT.Trigger_Group,5)	
					WHERE J.JobID IS NULL
				</if>
				) A
				<trim prefix="ORDER BY">
					<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection != ''">
					    <choose>
							<when test='sortColumn.equalsIgnoreCase("Seq")'>Seq</when>
							<when test='sortColumn.equalsIgnoreCase("JobType")'>JobType</when>
							<when test='sortColumn.equalsIgnoreCase("JobTitle")'>JobTitle</when>
							<when test='sortColumn.equalsIgnoreCase("JobState")'>JobState</when>
							<when test='sortColumn.equalsIgnoreCase("RepeatedCnt")'>RepeatedCnt</when>
							<when test='sortColumn.equalsIgnoreCase("LastRunTime")'>LastRunTime</when>
							<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
							<when test='sortColumn.equalsIgnoreCase("RegistDate")'>RegistDate</when>
							<when test='sortColumn.equalsIgnoreCase("ScheduleType")'>ScheduleType</when>
							<otherwise>Seq</otherwise>
						</choose>
						<choose>
							<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
							<otherwise> DESC</otherwise>
						</choose>
						<include refid="oracle.include.listOrderBy"/>
					</if> 
					<if test="sortColumn == null or sortDirection == null">
				 	  	JobID ASC
				    </if>
				</trim>
				<include refid="oracle.include.pagingFooter"/>
		<!-- Order by 절 -->
	</select>
     
    <select id="selectJobSchedulerListcnt" parameterType="cmap" resultType="java.lang.Long">
    /* jobscheduler.admin.selectJobSchedulerListcnt */
		SELECT COUNT(JobID) FROM
		  ( SELECT J.JobID
				FROM ZSCHEDULER_JOB J
				INNER JOIN ZSCHEDULER_SCHEDULE S ON J.JobID = S.JobID
		   		LEFT JOIN qrtz_triggers QT ON J.JobID = SUBSTR(QT.Trigger_Group,5)
		   WHERE j.DomainID = #{domain}
		<if test="domain == 0">
			UNION 
				SELECT J.JobID
				FROM ZSCHEDULER_JOB J
				INNER JOIN ZSCHEDULER_SCHEDULE S ON J.JobID = S.JobID
				RIGHT JOIN qrtz_triggers QT ON J.JobID = SUBSTR(QT.Trigger_Group,5)
				WHERE J.JobID IS NULL
		</if>
			) A 
		
	</select>	
    
    <!-- 작업 등록 -->
    <insert id="insertJobScheduler"  parameterType="cmap" useGeneratedKeys="true">
    /* jobscheduler.admin.insertJobSchedulerJob */
BEGIN
		INSERT INTO ZSCHEDULER_JOB ( DomainID, EventID, JobTitle, AgentServer, Seq
									, ClusterID, JobType, IsUse, JobState, Path
									, Method, Params, CommandText, Description, IsDelayRun
									, TimeOut, RepeatCnt, RepeatedCnt, RetryCnt, ServiceAgent
									, LastState, LastRunTime, RegDate, RegID
									)
		VALUES (	#{DomainID}, #{EventID}, #{JobTitle}, #{AgentServer}, #{Seq}
					, #{ClusterID}, #{JobType}, #{IsUse}, 'R', #{Path}
					, #{Method}, #{Params}, #{CommandText}, #{Description}, #{IsDelayRun}
					, #{TimeOut}, #{RepeatCnt}, 0, #{RetryCnt}, NULL
					, 'R', NULL, SYSDATE, #{UR_Code}
					)	;
	
		INSERT INTO ZSCHEDULER_SCHEDULE (	JobID, DomainID, ScheduleType, ScheduleTitle, StartDate
										, EndDate, StartHour, StartMinute, EndHour, EndMinute
										, EveryHour, EveryMinute, RepeatDays,RepeatWeeks, WeekOfMonth
										, IntervalSec, RegDate, RegID, Reserved1)
		VALUES (	ZSCHEDULER_JOB_SEQ.CURRVAL , #{DomainID}, #{ScheduleType}, #{ScheduleTitle}, TO_DATE(#{StartDate}, 'YYYY-MM-DD HH24:MI:SS')
					, TO_DATE(#{EndDate}, 'YYYY-MM-DD HH24:MI:SS'), #{StartHour}, #{StartMinute}, #{EndHour}, #{EndMinute}
					, #{EveryHour}, #{EveryMinute}, #{RepeatDays}, #{RepeatWeeks}, #{WeekOfMonth}
					, #{IntervalSec}, SYSDATE, #{UR_Code}, NVL(#{Reserved1},' '));
	end ;	
		<selectKey keyProperty="JobID,ScheduleID" resultType="cmap" order="AFTER">
			SELECT ZSCHEDULER_JOB_SEQ.CURRVAL AS "JobID", ZSCHEDULER_SCHEDULE_SEQ.currval AS "ScheduleID"  FROM dual
		</selectKey>
    </insert>
    
    <!-- 작업 수정 -->
    <update id="updateJobScheduler" parameterType="cmap">
    /* jobscheduler.admin.updateJobScheduler */
	BEGIN
        	UPDATE ZSCHEDULER_JOB 
		SET		JobTitle = #{JobTitle}
				,AgentServer = #{AgentServer}
				,Seq = #{Seq}
				,ClusterID = #{ClusterID}
				,JobType = #{JobType}
				,IsUse = #{IsUse}
				,Path = #{Path}
				,Method = #{Method}
				,Params = #{Params}
				,CommandText = #{CommandText}
				,Description = #{Description}
				,IsDelayRun = #{IsDelayRun}
				,TimeOut = #{TimeOut}
				,RepeatCnt = #{RepeatCnt}
				,RetryCnt = #{RetryCnt}
				,ModDate = SYSDATE
				,ModID = #{UR_Code}
		WHERE JobID = #{JobID};
        
        	UPDATE ZSCHEDULER_SCHEDULE 
		SET		ScheduleTitle = #{ScheduleTitle}
				,ModDate = SYSDATE
				,ModID = #{UR_Code}
				,Reserved1 = NVL(#{Reserved1}, ' ')
		WHERE ScheduleID IN (SELECT ScheduleID FROM ZSCHEDULER_SCHEDULE  WHERE JobID = #{JobID});   
	END;
	        
    </update>
    
     <select id="selectJobSchedulerData" parameterType="cmap" resultType="cmap">
     /* jobscheduler.admin.selectJobSchedulerData */
		SELECT	A.JobID AS "JobID"
			  , A.JobTitle AS "JobTitle"
			  , A.Seq  AS "Seq"
			  , A.AgentServer AS "AgentServer"
			  , NVL(A.ClusterID, 0) AS "ClusterID"
			  , A.JobType AS "JobType"
			  , A.IsUse AS "IsUse"
			  , A.JobState AS "JobState"
			  , A.Path AS "Path"
			  , A.Method AS "Method"
			  , A.Params AS "Params"
			  , A.CommandText AS "CommandText"
			  , A.Description AS "Description"
			  , A.IsDelayRun AS "IsDelayRun"
			  , A.TimeOut AS "TimeOut"
			  , A.RepeatCnt AS "RepeatCnt"
			  , A.RetryCnt AS "RetryCnt"
			  , A.EventID AS "EventID"
			  , A.DomainID AS "DomainID"
			  , B.ScheduleID AS "ScheduleID"
			  , B.ScheduleType AS "ScheduleType"
			  , B.ScheduleTitle AS "ScheduleTitle"
			  ,	B.StartDate AS "StartDate"
			  ,	CASE WHEN B.EndDate IS NOT NULL THEN B.EndDate ELSE NULL END AS "EndDate"
			  ,	B.StartHour AS "StartHour"
			  , B.StartMinute AS "StartMinute"
			  , B.EndHour AS "EndHour"
			  , B.EndMinute AS "EndMinute"
			  , B.EveryHour AS "EveryHour"
			  , B.EveryMinute AS "EveryMinute"
			  , B.RepeatDays AS "RepeatDays"
			  , B.RepeatWeeks AS "RepeatWeeks"
			  , B.WeekOfMonth AS "WeekOfMonth"
			  , B.IntervalSec  AS "IntervalSec"
			  , B.Reserved1  AS "Reserved1"
		FROM ZSCHEDULER_JOB A 
		INNER JOIN ZSCHEDULER_SCHEDULE B ON A.JobID = B.JobID
		WHERE A.JobID = #{JobID}
    </select>
    
    
    <!-- 작업 삭제 -->
     <delete id="deleteJobScheduler" parameterType="cmap">
	     begin
        <foreach collection="JobID" item="item" index="index" separator="">
			DELETE FROM ZSCHEDULER_SCHEDULE WHERE ScheduleID in (SELECT ScheduleID FROM ZSCHEDULER_SCHEDULE  WHERE JobID = #{item});
			DELETE FROM ZSCHEDULER_JOB WHERE JobID = #{item};
	    </foreach> 
	     end;	
    </delete>
    
    <update id="changeIsUseJobScheduler" parameterType="cmap">
    /* jobscheduler.admin.changeIsUseJobScheduler */
        UPDATE ZSCHEDULER_JOB SET IsUse = #{IsUse} WHERE JobID = #{JobID}
    </update>
    
    <select id="selectJobSchedulerEventList" parameterType="cmap" resultType="cmap">
    /* jobscheduler.admin.selectJobSchedulerEventList */
    	<include refid="oracle.include.pagingHeader" />
    	
			SELECT EventID AS "EventID"
					, JobTitle AS "JobTitle"
					, JobType AS "JobType"
					, Path AS "Path"
					, ScheduleTitle AS "ScheduleTitle"
					, CronExpr AS "CronExpr"
					, Description AS "Description"
					, IsUse AS "IsUse"
					, AgentServer AS "AgentServer"
					, IsCopy AS "IsCopy"
					, RegID AS "RegID"
					, TO_CHAR(RegDate, 'YYYY-MM-DD HH24:MI:SS') AS "RegDate"
					, ModID AS "ModID"
					, TO_CHAR(ModDate, 'YYYY-MM-DD HH24:MI:SS') AS "ModDate"
					, (SELECT COUNT(J.JobID) FROM ZSCHEDULER_JOB J WHERE j.eventid = a.eventId) AS "JobCnt"
					, (SELECT COUNT(J.JobID) FROM ZSCHEDULER_JOB J JOIN QRTZ_TRIGGERS QT ON J.JobID = SUBSTR(QT.TRIGGER_GROUP, INSTR(QT.TRIGGER_GROUP, '_') + 1)
						WHERE j.eventid = a.eventId
						  AND trigger_state = 'WAITING') AS "QrtzCnt"
			  FROM ZSCHEDULER_Event a
		<!-- Order by 절 -->
		<trim prefix="ORDER BY">
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection != ''">
	    		<choose>
					<when test='sortColumn.equalsIgnoreCase("JobType")'>JobType</when>
					<when test='sortColumn.equalsIgnoreCase("JobTitle")'>JobTitle</when>
					<when test='sortColumn.equalsIgnoreCase("ScheduleTitle")'>ScheduleTitle</when>
					<when test='sortColumn.equalsIgnoreCase("CronExpr")'>CronExpr</when>
					<when test='sortColumn.equalsIgnoreCase("IsCopy")'>IsCopy</when>
					<when test='sortColumn.equalsIgnoreCase("JobCnt")'>JobCnt</when>
					<when test='sortColumn.equalsIgnoreCase("QrtzCnt")'>QrtzCnt</when>
					<when test='sortColumn.equalsIgnoreCase("RegistDate")'>RegDate</when>
					<otherwise>EventID</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if> 
			<if test="sortColumn == null or sortColumn == '' or sortDirection == null or sortDirection == ''">
				A.EventID ASC
		    </if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>
    
    <select id="selectJobSchedulerEventListcnt" resultType="java.lang.Long">
    /* jobscheduler.admin.selectJobSchedulerEventListcnt */
		SELECT count(EventID) 
		  FROM ZSCHEDULER_Event a
	</select>	
    
    <!-- 작업 등록 -->
    <insert id="insertJobSchedulerEvent" parameterType="cmap">
    /* jobscheduler.admin.insertJobSchedulerEvent */
		INSERT INTO ZSCHEDULER_EVENT ( JobTitle, JobType, Path, ScheduleTitle, CronExpr, Description, IsUse, IsCopy, AgentServer, TimeOut, RepeatCnt, RetryCnt
				, RegID, RegDate, ModID, ModDate)
		VALUES (	#{JobTitle},#{JobType},#{Path},#{ScheduleTitle},#{CronExpr},#{Description}, #{IsUse}, #{IsCopy}, #{AgentServer}, #{TimeOut}, #{RepeatCnt}, #{RetryCnt}
				,#{UR_Code}, SYSDATE,#{UR_Code}, SYSDATE)		
		
    </insert>
    
    <update id="updateJobSchedulerEvent" parameterType="cmap">
    /* jobscheduler.admin.updateJobSchedulerEvent */
		UPDATE ZSCHEDULER_Event 
		SET		JobTitle = #{JobTitle}
				,JobType = #{JobType}
				,Path = #{Path}
				,ScheduleTitle = #{ScheduleTitle}
				,CronExpr = #{CronExpr}
				,Description = #{Description}
				,IsUse = #{IsUse}
				,IsCopy = #{IsCopy}
				,AgentServer = #{AgentServer}
				,TimeOut = #{TimeOut} 
				,RepeatCnt = #{RepeatCnt}
				,RetryCnt = #{RetryCnt}
				,ModDate =  SYSDATE
				,ModID = #{UR_Code}
		WHERE EventID = #{EventID}
    </update>
    
    <select id="selectJobSchedulerEventData" parameterType="cmap" resultType="cmap">
    /* jobscheduler.admin.selectJobSchedulerEventData */
			SELECT EventID AS "EventID"
					, JobTitle AS "JobTitle"
					, JobType AS "JobType"
					, Path AS "Path"
					, ScheduleTitle AS "ScheduleTitle"
					, CronExpr AS "CronExpr"
					, Description AS "Description"
					, IsUse AS "IsUse"
					, IsCopy AS "IsCopy"
					, AgentServer AS "AgentServer"
					, TimeOut AS "TimeOut"
					, RepeatCnt AS "RepeatCnt"
					, RetryCnt AS "RetryCnt"
					, RegID AS "RegID"
					, TO_CHAR(RegDate, 'YYYY-MM-DD HH24:MI:SS') AS "RegDate"
					, ModID AS "ModID"
					, TO_CHAR(ModDate, 'YYYY-MM-DD HH24:MI:SS') AS "ModDate"
			  FROM ZSCHEDULER_EVENT
			WHERE EventID = #{EventID}
    </select>
    
    <delete id="deleteJobSchedulerEvent" parameterType="cmap">   
    /* jobscheduler.admin.deleteJobSchedulerEvent */
		DELETE FROM ZSCHEDULER_Event
		  WHERE EventID = #{EventID}
	</delete>    
	
    <select id="selectJobSchedulerEventJob" parameterType="cmap" resultType="cmap">
    /* jobscheduler.admin.selectJobSchedulerEventJob */
    
    <include refid="oracle.include.pagingHeader"/>
    
		SELECT d.DomainID AS "DomainID"
			    , d.DomainCode AS "DomainCode"
			    , Fn_BaseGetDictionary_S(#{lang}, MultiDisplayName) AS "DisplayName"
			    , TO_CHAR(ServiceStart,'YYYY-MM-DD') || ' ~ ' || TO_CHAR(ServiceEnd,'YYYY-MM-DD') AS "ServicePeriod"
			    , j.JobID AS "JobID"
			    , s.ScheduleTitle AS "ScheduleTitle"
			    , s.Reserved1 AS "Reserved1"
				, QT.TRIGGER_STATE AS "JobState"
				, j.IsUse AS "IsUse"
				, TO_CHAR(TO_DATE('1970-01-01','YYYY.MM.DD') + numtodsinterval(QT.PREV_FIRE_TIME/1000,'SECOND'),'YYYY.MM.DD HH24:MI:SS') AS "LastRunTime"
				, J.AgentServer AS "AgentServer"
				, J.JobType AS "JobType"
				, J.Path AS "Path"
				, j.Method AS "Method"
				, s.ScheduleID AS "ScheduleID"
				, j.Params AS "Params"
				, j.TimeOut AS "TimeOut"
				, j.RetryCnt AS "RetryCnt"
				, j.RepeatCnt AS "RepeatCnt"
		   FROM sys_object_domain d
	  LEFT JOIN ZSCHEDULER_JOB j ON d.DomainID = j.DomainID AND j.EventID  = #{EventID}
	  LEFT JOIN ZSCHEDULER_SCHEDULE S ON J.JobID = S.JobID
	  LEFT JOIN qrtz_triggers QT ON J.JobID = SUBSTR(QT.TRIGGER_GROUP, INSTR(QT.TRIGGER_GROUP, '_') + 1)
		  WHERE DeleteDate IS NULL
		   <if test='IsCopy == "Y"'>
			    AND (j.DomainID IS NOT NULL OR  (d.domainid > 0 AND SYSDATE BETWEEN servicestart AND serviceend))
			</if>	
		   <if test='IsCopy != "Y"'>
			    AND (j.DomainID IS NOT NULL OR  (d.domainid = 0))
			</if>	
		    AND d.isuse = 'Y'	 
		<!-- Order by 절 -->
		<trim prefix="ORDER BY">
			<if test="sortColumn != null and sortColumn != '' and sortDirection != null and sortDirection != ''">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("ServicePeriod")'>ServicePeriod</when>
					<when test='sortColumn.equalsIgnoreCase("JobState")'>JobState</when>
					<when test='sortColumn.equalsIgnoreCase("Reserved1")'>Reserved1</when>
					<when test='sortColumn.equalsIgnoreCase("LastRunTime")'>LastRunTime</when>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
					<otherwise>DomainID</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if> 
			<if test="sortColumn == null or sortColumn == '' or sortDirection == null or sortDirection == ''">
				d.DomainID ASC
			</if>
		</trim>
	    
		<include refid="oracle.include.pagingFooter"/>
			
	</select>
    
    <select id="selectJobSchedulerEventJobcnt" resultType="java.lang.Long">
    /* jobscheduler.admin.selectJobSchedulerEventJobcnt */
		SELECT count(d.DomainID) 
		   FROM sys_object_domain d
	  LEFT JOIN ZSCHEDULER_JOB j ON d.DomainID = j.DomainID AND j.EventID  = #{EventID}
	  LEFT JOIN ZSCHEDULER_SCHEDULE S ON J.JobID = S.JobID
	  LEFT JOIN qrtz_triggers QT ON J.JobID = SUBSTR(QT.TRIGGER_GROUP, INSTR(QT.TRIGGER_GROUP, '_') + 1)
		  WHERE DeleteDate IS NULL
		   <if test='IsCopy == "Y"'>
			    AND (j.DomainID IS NOT NULL OR  (d.domainid > 0 AND SYSDATE BETWEEN servicestart AND serviceend))
			</if>	
		   <if test='IsCopy != "Y"'>
			    AND (j.DomainID IS NOT NULL OR  (d.domainid = 0))
			</if>	
		    AND d.isuse = 'Y'	 
	</select>	
	
     <insert id="insertJobSchedulerEventJob" parameterType="cmap">
     /* jobscheduler.admin.insertJobSchedulerEventJob */   
     BEGIN     
        <foreach collection="dataList" item="item" index="index" separator=";" close=";">
        <![CDATA[
			INSERT INTO ZSCHEDULER_JOB ( DomainID, EventID, JobTitle, AgentServer, Seq
										, ClusterID, JobType, IsUse, JobState, Path
										, Params, Description, IsDelayRun, TimeOut, RepeatCnt
										, RetryCnt, LastState, RegDate, RegID)
					(SELECT #{item.DomainID}, e.EventID, e.JobTitle, e.AgentServer, 0
							, 0, e.JobType, 'Y', 'R',  e.Path
							, 'DN_ID=' || #{item.DomainID} || '&DN_Code=' || #{item.DomainCode}, e.Description, 'Y', e.TimeOut, e.RepeatCnt
							, e.RetryCnt, ' ', SYSDATE, #{UR_Code}
					   FROM zscheduler_event e
				  LEFT JOIN zscheduler_job j ON e.EventID= j.EventID and j.DomainId = #{item.DomainID}
					  WHERE e.EventID = #{EventID}
					    AND j.jobid is null	)	
		]]>
		</foreach>
		
		<foreach collection="dataList" item="item" index="index" separator=";" close=";">
		 <![CDATA[
			INSERT INTO ZSCHEDULER_SCHEDULE (	JobID, DomainID, ScheduleType,ScheduleTitle,Reserved1,RegDate,RegID)
			(SELECT  J.JobID, J.DomainID, 'Interval', e.ScheduleTitle, e.CronExpr, SYSDATE, #{UR_Code}
			   FROM  zscheduler_event e
			   JOIN  zscheduler_job 	J ON E.EventID = J.EventID and j.DomainId = #{item.DomainID}
		  LEFT JOIN  zscheduler_schedule  S ON j.JobID = s.JobID
			  WHERE  e.EventID = #{EventID}
			    AND  s.ScheduleID is null)
		]]>
		</foreach>	
	END;  
	</insert>    
	
	 <select id="getJobSchedulerEventJobList" parameterType="cmap" resultType="cmap">
	 /* jobscheduler.admin.getJobSchedulerEventJobList */
		SELECT  j.JobID AS "JobID"
				, J.AgentServer AS "AgentServer"
				, QT.TRIGGER_STATE AS "JobState"
	     FROM ZSCHEDULER_JOB j 
    LEFT JOIN qrtz_triggers QT ON J.JobID = SUBSTR(QT.TRIGGER_GROUP, INSTR(QT.TRIGGER_GROUP, '_') + 1)
	    WHERE j.EventID  = #{EventID}
	</select>
	
	<delete id="deleteJobSchedulerEventJob" parameterType="cmap">    
	/* jobscheduler.admin.deleteJobSchedulerEventJob */    
        <foreach collection="dataList" item="item" index="index" separator="">
        <![CDATA[
			DELETE FROM ZSCHEDULER_JOB
			  WHERE JobID =  #{item.JobID}

			DELETE FROM ZSCHEDULER_SCHEDULE
			  WHERE JobID =  #{item.JobID}
			    ]]>
		</foreach>	  
	</delete>    
    
    <select id="selectJobLogList" parameterType="cmap" resultType="cmap">
    /* jobscheduler.admin.selectJobLogList */
    	<include refid="oracle.include.pagingHeader"/>			
			SELECT	  HistoryID AS "HistoryID"
					, JobID AS "JobID"
					, JobTitle AS "JobTitle"
					, ScheduleType AS "ScheduleType"
					, IsSuccess AS "IsSuccess"
					, RetryCnt AS "RetryCnt"
					, AgentServer AS "AgentServer"
					, Message AS "Message"
					, ResultText AS "ResultText"
					, EventTime AS "EventTime"
					, EventTime AS "EventDate" 
			FROM (
				SELECT	  HistoryID
						, JobID
						, JobTitle
						, ScheduleType
						, IsSuccess
						, RetryCnt
						, AgentServer
						, Message
						, ResultText
						, EventTime
						, EventTime AS EventDate
				FROM ZSCHEDULER_HISTORY
				WHERE 1=1
				<if test="JobID != null and JobID != ''">
					AND JobID = #{JobID}
				</if>
			) A
			<trim prefix="ORDER BY">
				<if test="sortColumn != null and sortDirection != null">
		    		<choose>
						<when test='sortColumn.equalsIgnoreCase("EventDate")'>EventDate</when>
						<when test='sortColumn.equalsIgnoreCase("AgentServer")'>AgentServer</when>
						<when test='sortColumn.equalsIgnoreCase("IsSuccess")'>IsSuccess</when>
						<when test='sortColumn.equalsIgnoreCase("Message")'>Message</when>
						<otherwise>HistoryID</otherwise>
					</choose>
					<choose>
						<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
						<otherwise> DESC</otherwise>
					</choose>
					<include refid="oracle.include.listOrderBy"/>
				</if> 
				<if test="sortColumn == null or sortDirection == null">
					HistoryID ASC
			    </if>
			</trim>
		<!-- Order by 절 -->
		<include refid="oracle.include.pagingFooter"/>
	</select>
    
    <select id="selectJobLogListcnt" resultType="java.lang.Long">
    /* jobscheduler.admin.selectJobLogListcnt */
		SELECT COUNT(HistoryID) FROM
			  (SELECT  
					  HistoryID
				FROM ZSCHEDULER_HISTORY
				Where 1=1
				<if test="JobID != null and JobID != ''">
				AND JobID = #{JobID}
				</if>
			  ) A
	</select>	
    
    <delete id="delectJobLog" parameterType="cmap" >
    /* jobscheduler.admin.delectJobLog */
        <choose>
	    <when test="AgentServer != '' and AgentServer != null and JobID != '' and JobID != null">
	      DELETE FROM ZSCHEDULER_HISTORY WHERE AgentServer = #{AgentServer} AND JobID = #{JobID}
	    </when>
	    <when test="JobID != '' and JobID != null">
	      DELETE FROM ZSCHEDULER_HISTORY WHERE JobID = #{JobID}
	    </when>
	    <when test="AgentServer != '' and AgentServer != null">
	      DELETE FROM ZSCHEDULER_HISTORY WHERE AgentServer = #{AgentServer}
	    </when>
	    <otherwise>
	      DELETE FROM ZSCHEDULER_HISTORY
	    </otherwise>
	  </choose>  
    </delete>
    
	<!-- ZSCHEULDER_HISTORY 기록 -->
	<insert id="insertJobHistory" parameterType="cmap">
	/* jobscheduler.admin.insertJobHistory */
		INSERT INTO ZSCHEDULER_HISTORY(JobID, JobTitle, ScheduleType, IsSuccess, RetryCnt, AgentServer, Message, ResultText)
		SELECT sj.JobID, sj.JobTitle, JobType, #{isSuccess}, #{retryCount}, sj.AgentServer, #{message}, #{resultText} FROM zscheduler_job sj 
		WHERE 1=1
		AND sj.JobID = #{jobID}
		<selectKey keyProperty="historyID" resultType="cmap" order="AFTER">
				SELECT ZSCHEDULER_HISTORY_SEQ.CURRVAL FROM dual
		</selectKey>		
	</insert>
	
</mapper>
