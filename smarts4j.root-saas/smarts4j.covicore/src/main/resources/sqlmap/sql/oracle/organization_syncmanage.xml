<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="organization.syncmanage">
   
	<!-- Log 관련 -->
  	<select id="selectGroupLogListcnt" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*)
		FROM COVI_SYNCDATA.LOG_OBJECT_GROUP
		<trim prefix="WHERE" prefixOverrides="AND |OR ">			
	        AND LogMasterID = #{SyncMasterID}
	       	AND SyncManage = 'Sync'
	        <if test="SyncType != '' and SyncType != null">  
	       		AND SyncType=#{SyncType}
	       	</if>
		</trim>
	</select>
	
  	<select id="selectUserLogListcnt" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*)
		FROM COVI_SYNCDATA.LOG_OBJECT_USER
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
	        AND LogMasterID = #{SyncMasterID}
	       	AND SyncManage = 'Sync'
	        <if test="SyncType != '' and SyncType != null">  
	       		AND SyncType=#{SyncType}
	       	</if>			
		</trim>
	</select>
	
    <select id="selectAddJobLogListcnt" parameterType="cmap" resultType="java.lang.Long">
        SELECT COUNT(*)
		FROM COVI_SYNCDATA.LOG_OBJECT_ADDJOB
		<trim prefix="WHERE" prefixOverrides="AND |OR ">			
	        AND LogMasterID = #{SyncMasterID}
	       	AND SyncManage = 'Sync'
	        <if test="SyncType != '' and SyncType != null">  
	       		AND SyncType=#{SyncType}
	       	</if>			
		</trim>
	</select>
	
    <select id="selectGroupLogList" parameterType="cmap" resultType="cmap">
        <include refid="oracle.include.pagingHeader" />
		SELECT
			  Seq AS "Seq"
			, SyncManage AS "SyncManage"
			, LogMasterID AS "LogMasterID"
			, SyncType AS "SyncType"
			, GroupCode AS "GroupCode"
			, CompanyCode AS "CompanyCode"
			, MemberOf AS "MemberOf"
			, DisplayName AS "DisplayName"
			, IsUse AS "IsUse"
			, SyncStatus AS "SyncStatus"
			, InsertDate AS "InsertDate"
		FROM COVI_SYNCDATA.LOG_OBJECT_GROUP
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
	    	AND LogMasterID = #{SyncMasterID}
	    	AND SyncManage = 'Sync'
	        <if test="SyncType != '' and SyncType != null">  
	       		AND SyncType=#{SyncType}
	       	</if>
	       	<if test="IsUse != '' and IsUse != null">  
				AND IsUse=#{IsUse}
			</if>
			<if test="SyncStatus != '' and SyncStatus != null">  
	        	AND SyncStatus=#{SyncStatus}
	        </if>
	        <if test="ObjectCode != '' and ObjectCode != null">  
	        	AND GroupCode=#{ObjectCode}
	        </if>
		</trim>
		<trim prefix="ORDER BY">
			<if test="sortColumn != null and sortDirection != null and sortColumn != 'SortKey'">
	   			<choose>
					<when test='sortColumn.equalsIgnoreCase("SyncType")'>SyncType</when>
					<when test='sortColumn.equalsIgnoreCase("GroupCode")'>GroupCode</when>
					<when test='sortColumn.equalsIgnoreCase("CompanyCode")'>CompanyCode</when>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
					<when test='sortColumn.equalsIgnoreCase("SyncStatus")'>SyncStatus</when>
					<when test='sortColumn.equalsIgnoreCase("InsertDate")'>InsertDate</when>
					<otherwise>Seq</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if> 
			<if test="sortColumn == null or sortDirection == null or sortColumn == 'SortKey'">
		 		Seq DESC
		    </if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
    </select>
    
    <select id="selectSyncHitory" parameterType="cmap" resultType="cmap">
		SELECT 	
			  SyncMasterID AS "SyncMasterID"
			, GRInsertCnt AS "GRInsertCnt"
			, GRUpdateCnt AS "GRUpdateCnt"
			, GRDeleteCnt AS "GRDeleteCnt"
			, URInsertCnt AS "URInsertCnt"
			, URUpdateCnt AS "URUpdateCnt"
			, URDeleteCnt AS "URDeleteCnt"
			, AddJobInsertCnt AS "AddJobInsertCnt"
			, AddJobUpdateCnt AS "AddJobUpdateCnt"
			, AddJobDeleteCnt AS "AddJobDeleteCnt"
			, StartDate AS "StartDate"
			, EndDate AS "EndDate"
		FROM (
			SELECT * FROM COVI_SYNCDATA.LOG_OBJECT_LIST ORDER BY StartDate DESC
		) A
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="TopCnt != null and TopCnt != null">
				AND ROWNUM <![CDATA[<=]]> #{TopCnt} 	
			</if>
		</trim>
    </select>
    
    <select id="selectSyncItemLog" parameterType="cmap" resultType="cmap">
		SELECT 	
			  LogMasterID AS "LogMasterID"
			, Seq AS "Seq"
			, LogType AS "LogType"
			, TargetType AS "TargetType"
			, SyncType AS "SyncType"
			, LogMessage AS "LogMessage"
			, RegistDate AS "RegistDate"
		FROM COVI_SYNCDATA.LOG_OBJECT_LIST_LOG
		WHERE LogMasterID = #{SyncMasterID}
		ORDER BY Seq
    </select>
    
    <select id="selectUserLogList" parameterType="cmap" resultType="cmap">
        <include refid="oracle.include.pagingHeader" />
		SELECT
			  Seq AS "Seq"
			, SyncManage AS "SyncManage"
			, LogMasterID AS "LogMasterID"
			, SyncType AS "SyncType"
			, UserCode AS "UserCode"
			, CompanyCode AS "CompanyCode"
			, DeptCode AS "DeptCode"
			, DisplayName AS "DisplayName"
			, IsUse AS "IsUse"
			, SyncStatus AS "SyncStatus"
			, InsertDate AS "InsertDate"
		FROM COVI_SYNCDATA.LOG_OBJECT_USER
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
	        AND LogMasterID = #{SyncMasterID}
	        AND SyncManage = 'Sync'
	        <if test="SyncType != '' and SyncType != null">  
	       		AND SyncType=#{SyncType}
	       	</if>
	       	<if test="IsUse != '' and IsUse != null">  
				AND IsUse=#{IsUse}
			</if>
			<if test="SyncStatus != '' and SyncStatus != null">  
	        	AND SyncStatus=#{SyncStatus}
	        </if>
	        <if test="ObjectCode != '' and ObjectCode != null">  
	        	AND UserCode=#{ObjectCode}
	        </if>
		</trim>
		<trim prefix="ORDER BY">
			<if test="sortColumn != null and sortDirection != null and sortColumn != 'SortKey'">
	    		<choose>
					<when test='sortColumn.equalsIgnoreCase("SyncType")'>SyncType</when>
					<when test='sortColumn.equalsIgnoreCase("UserCode")'>UserCode</when>
					<when test='sortColumn.equalsIgnoreCase("CompanyCode")'>CompanyCode</when>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
					<when test='sortColumn.equalsIgnoreCase("SyncStatus")'>SyncStatus</when>
					<when test='sortColumn.equalsIgnoreCase("InsertDate")'>InsertDate</when>
					<otherwise>Seq</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if> 
			<if test="sortColumn == null or sortDirection == null or sortColumn == 'SortKey'">
		 		Seq DESC
		    </if>
		</trim>
		<include refid="oracle.include.pagingFooter" />	
    </select>
  
    <select id="selectAddJobLogList" parameterType="cmap" resultType="cmap">
        <include refid="oracle.include.pagingHeader" />
		SELECT
			  Seq AS "Seq"
			, SyncManage AS "SyncManage"
			, LogMasterID AS "LogMasterID"
			, SyncType AS "SyncType"
			, JobType AS "JobType"
			, UserCode AS "UserCode"
			, CompanyCode AS "CompanyCode"
			, DeptCode AS "DeptCode"
			, JobLevelCode AS "JobLevelCode"
			, JobPositionCode AS "JobPositionCode"
			, JobTitleCode AS "JobTitleCode"
			, IsUse AS "IsUse"
			, SyncStatus AS "SyncStatus"
			, InsertDate AS "InsertDate"
		FROM COVI_SYNCDATA.LOG_OBJECT_ADDJOB		
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
	    	AND LogMasterID = #{SyncMasterID}
	    	AND SyncManage = 'Sync'
	        <if test="SyncType != '' and SyncType != null">  
	       		AND SyncType=#{SyncType}
	       	</if>
	       	<if test="IsUse != '' and IsUse != null">  
				AND IsUse=#{IsUse}
			</if>
			<if test="SyncStatus != '' and SyncStatus != null">  
	        	AND SyncStatus=#{SyncStatus}
	        </if>
	        <if test="ObjectCode != '' and ObjectCode != null">  
	        	AND UserCode=#{ObjectCode}
	        </if>
		</trim>
		<trim prefix="ORDER BY">
			<if test="sortColumn != null and sortDirection != null and sortColumn != 'SortKey'">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("SyncType")'>SyncType</when>
					<when test='sortColumn.equalsIgnoreCase("UserCode")'>UserCode</when>
					<when test='sortColumn.equalsIgnoreCase("CompanyCode")'>CompanyCode</when>
					<when test='sortColumn.equalsIgnoreCase("DeptCode")'>DeptCode</when>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
					<when test='sortColumn.equalsIgnoreCase("SyncStatus")'>SyncStatus</when>
					<when test='sortColumn.equalsIgnoreCase("InsertDate")'>InsertDate</when>
					<otherwise>Seq</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if> 
			<if test="sortColumn == null or sortDirection == null or sortColumn == 'SortKey'">
				Seq DESC
		    </if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
    </select>
    
    <select id="selectLogList" parameterType="cmap" resultType="cmap">
        <include refid="oracle.include.pagingHeader" />
	    SELECT
	    	SyncMasterID AS "SyncMasterID",
	    	GRInsertCnt AS "GRInsertCnt",
			GRUpdateCnt AS "GRUpdateCnt",
			GRDeleteCnt AS "GRDeleteCnt",
			URInsertCnt AS "URInsertCnt",
			URUpdateCnt AS "URUpdateCnt",
			URDeleteCnt AS "URDeleteCnt",
			AddJobInsertCnt AS "AddJobInsertCnt",
			AddJobUpdateCnt AS "AddJobUpdateCnt",
			AddJobDeleteCnt AS "AddJobDeleteCnt",
			TO_CHAR(TO_DATE(StartDate, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY-MM-DD') AS "InsertDate"
	    FROM COVI_SYNCDATA.LOG_OBJECT_LIST
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">  
			<if test="FirstDate != '' and FirstDate != null">  
				AND StartDate <![CDATA[>=]]> #{FirstDate}
			</if>
			<if test="LastDate != '' and LastDate != null">  	       	
				AND StartDate  <![CDATA[<= (SELECT TO_CHAR(TO_DATE(#{LastDate},'yyyy-mm-dd') + interval '1' day, 'YYYY-MM-DD') FROM DUAL)]]>
			</if> 
		</trim>
		ORDER BY StartDate DESC
		<include refid="oracle.include.pagingFooter" />
	</select>
	
    <select id="selectLogListTotalCnt" resultType="java.lang.Long">
	    SELECT COUNT(*)
	    FROM COVI_SYNCDATA.LOG_OBJECT_LIST
		<trim prefix="WHERE" prefixOverrides="AND |OR ">  
			<if test="FirstDate != '' and FirstDate != null">  
				AND StartDate <![CDATA[>=]]> #{FirstDate}
			</if>
			<if test="LastDate != '' and LastDate != null">  	       	
				AND StartDate  <![CDATA[<= (SELECT TO_CHAR(TO_DATE(#{LastDate},'yyyy-mm-dd') + interval '1' day, 'YYYY-MM-DD') FROM DUAL)]]>
			</if> 
		</trim>
	</select>
	
	<select id="selectMoniterCompareCount" parameterType="cmap" resultType="cmap">
		SELECT
			 (SELECT NVL(MAX(SyncMasterID), 0) FROM COVI_SYNCDATA.LOG_OBJECT_LIST) AS "SyncMasterID"
			,(SELECT COUNT(*) FROM COVI_SYNCDATA.COMPARE_OBJECT_GROUP) AS "GR_Cnt"
			,(SELECT COUNT(*) FROM COVI_SYNCDATA.COMPARE_OBJECT_USER) AS "UR_Cnt"
			,(SELECT COUNT(*) FROM COVI_SYNCDATA.COMPARE_OBJECT_ADDJOB) AS "Add_Cnt"
		FROM DUAL
	</select>
	
	<insert id="insertLogList" parameterType="cmap">
	    BEGIN
	    	UPDATE COVI_SYNCDATA.LOG_OBJECT_LIST SET EndDate = TO_CHAR(SYSTIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') WHERE EndDate IS NULL;
	        INSERT INTO COVI_SYNCDATA.LOG_OBJECT_LIST (	
		    	 GRInsertCnt
				,GRUpdateCnt
				,GRDeleteCnt
				,URInsertCnt
				,URUpdateCnt
				,URDeleteCnt
				,AddJobInsertCnt
				,AddJobUpdateCnt
				,AddJobDeleteCnt
				,StartDate
		    )
		    VALUES (
		    	  #{GRInsertCnt}
				, #{GRUpdateCnt}
				, #{GRDeleteCnt}
				, #{URInsertCnt}
				, #{URUpdateCnt}
				, #{URDeleteCnt}
				, #{AddJobInsertCnt}
				, #{AddJobUpdateCnt}
				, #{AddJobDeleteCnt}
		    	,TO_CHAR(SYSTIMESTAMP, 'YYYY-MM-DD HH24:MI:SS')
		    );
	    END;
	    <selectKey resultType="Integer" keyProperty="SyncMasterID" order="AFTER">
	         SELECT  MAX(SyncMasterID) AS "SyncMasterID" 
	         FROM COVI_SYNCDATA.LOG_OBJECT_LIST
	         WHERE EndDate IS NULL
	    </selectKey>
	</insert>
	
    <update id="updateLogList" parameterType="cmap">
	   	UPDATE COVI_SYNCDATA.LOG_OBJECT_LIST 
	   	SET 
	   		  EndDate = TO_CHAR(SYSTIMESTAMP, 'YYYY-MM-DD HH24:MI:SS')
	   		, GRInsertCnt = (SELECT COUNT(*) FROM COVI_SYNCDATA.LOG_OBJECT_LIST_LOG WHERE LOGMASTERID = #{SyncMasterID} AND TARGETTYPE IN ('DEPT', 'JOBTITLE', 'JOBLEVEL', 'JOBPOSITION') AND SYNCTYPE = 'INSERT' AND LOGTYPE <![CDATA[<>]]> 'Error')
	   		, GRUpdateCnt = (SELECT COUNT(*) FROM COVI_SYNCDATA.LOG_OBJECT_LIST_LOG WHERE LOGMASTERID = #{SyncMasterID} AND TARGETTYPE IN ('DEPT', 'JOBTITLE', 'JOBLEVEL', 'JOBPOSITION') AND SYNCTYPE = 'UPDATE' AND LOGTYPE <![CDATA[<>]]> 'Error')
	   		, GRDeleteCnt = (SELECT COUNT(*) FROM COVI_SYNCDATA.LOG_OBJECT_LIST_LOG WHERE LOGMASTERID = #{SyncMasterID} AND TARGETTYPE IN ('DEPT', 'JOBTITLE', 'JOBLEVEL', 'JOBPOSITION') AND SYNCTYPE = 'DELETE' AND LOGTYPE <![CDATA[<>]]> 'Error')
	   		, URInsertCnt = (SELECT COUNT(*) FROM COVI_SYNCDATA.LOG_OBJECT_LIST_LOG WHERE LOGMASTERID = #{SyncMasterID} AND TARGETTYPE = 'USER' AND SYNCTYPE = 'INSERT' AND LOGTYPE <![CDATA[<>]]> 'Error')
	   		, URUpdateCnt = (SELECT COUNT(*) FROM COVI_SYNCDATA.LOG_OBJECT_LIST_LOG WHERE LOGMASTERID = #{SyncMasterID} AND TARGETTYPE = 'USER' AND SYNCTYPE = 'UPDATE' AND LOGTYPE <![CDATA[<>]]> 'Error')
	   		, URDeleteCnt = (SELECT COUNT(*) FROM COVI_SYNCDATA.LOG_OBJECT_LIST_LOG WHERE LOGMASTERID = #{SyncMasterID} AND TARGETTYPE = 'USER' AND SYNCTYPE = 'DELETE' AND LOGTYPE <![CDATA[<>]]> 'Error')
			, AddJobInsertCnt = (SELECT COUNT(*) FROM COVI_SYNCDATA.LOG_OBJECT_LIST_LOG WHERE LOGMASTERID = #{SyncMasterID} AND TARGETTYPE = 'ADDJOB' AND SYNCTYPE = 'INSERT' AND LOGTYPE <![CDATA[<>]]> 'Error')
	   		, AddJobUpdateCnt = (SELECT COUNT(*) FROM COVI_SYNCDATA.LOG_OBJECT_LIST_LOG WHERE LOGMASTERID = #{SyncMasterID} AND TARGETTYPE = 'ADDJOB' AND SYNCTYPE = 'UPDATE' AND LOGTYPE <![CDATA[<>]]> 'Error')
	   		, AddJobDeleteCnt = (SELECT COUNT(*) FROM COVI_SYNCDATA.LOG_OBJECT_LIST_LOG WHERE LOGMASTERID = #{SyncMasterID} AND TARGETTYPE = 'ADDJOB' AND SYNCTYPE = 'DELETE' AND LOGTYPE <![CDATA[<>]]> 'Error')	   			
		WHERE SyncMasterID = #{SyncMasterID}
	</update>
    
    <select id="selectSyncMasterID" parameterType="cmap" resultType="java.lang.Long">
         SELECT  MAX(SyncMasterID) AS "SyncMasterID" 
         FROM COVI_SYNCDATA.LOG_OBJECT_LIST
         WHERE EndDate IS NULL
    </select>
    
    <insert id="insertLogListLog" parameterType="cmap">
        INSERT INTO COVI_SYNCDATA.LOG_OBJECT_LIST_LOG (	
	    	  LogMasterID
	    	, LogType
	    	, TargetType
	    	, SyncType
	    	, LogMessage
	    	, SyncServer
	    	, RegistDate
	    )
	    VALUES (
	    	  #{LogMasterID}
	    	, #{LogType}
	    	, #{TargetType}
	    	, #{SyncType}
	    	, #{LogMessage}
	    	, #{SyncServer}
	    	, TO_CHAR(SYSTIMESTAMP, 'YYYY-MM-DD HH24:MI:SS')
	    )
    </insert>
    
    <insert id="insertGroupLogList" parameterType="cmap">
		INSERT INTO COVI_SYNCDATA.LOG_OBJECT_GROUP (
			  SyncManage
			, LogMasterID
			, SyncType
			, GroupCode
			, CompanyCode
			, MemberOf
			, DisplayName
			, MultiDisplayName
			, SortKey		
			, IsUse
			, IsDisplay
			, IsMail
			, PrimaryMail
			, ManagerCode
			, SyncStatus
			, InsertDate
		)
		VALUES (
			#{SyncManage}
			<choose>
				<when test='SyncManage == "Sync"'>
					,(SELECT MAX(SyncMasterID) FROM COVI_SYNCDATA.LOG_OBJECT_LIST WHERE EndDate IS NULL )
				</when>
				<otherwise>, NULL</otherwise>
			</choose>
			,#{SyncType}
			,#{GroupCode}
			,#{CompanyCode}
			,#{MemberOf}
			,#{DisplayName}
			,#{MultiDisplayName}
			,#{SortKey}
			,#{IsUse}
			,#{IsDisplay}
			,#{IsMail}
			,#{PrimaryMail}
			,#{ManagerCode}
			,#{SyncStatus}
			,SYSDATE
		)
    </insert>  
    
    <insert id="insertUserLogList" parameterType="cmap">
		INSERT INTO COVI_SYNCDATA.LOG_OBJECT_USER (
			  SyncManage
			, LogMasterID
			, SyncType
			, UserCode
			, CompanyCode
			, DeptCode
			, LogonID
			, EmpNo
			, DisplayName
			, MultiDisplayName
			, JobPositionCode
			, JobTitleCode
			, JobLevelCode
			, SortKey		
			, IsUse
			, IsDisplay
			, EnterDate
			, RetireDate
			, BirthDiv
			, BirthDate
			, PhotoPath
			, MailAddress
			, ExternalMailAddress
			, ChargeBusiness
			, PhoneNumberInter
			, SyncStatus
			, InsertDate
		)
		VALUES (
			#{SyncManage}
			<choose>
				<when test='SyncManage == "Sync"'>
					,(SELECT MAX(SyncMasterID) FROM COVI_SYNCDATA.LOG_OBJECT_LIST WHERE EndDate IS NULL )
				</when>
				<otherwise>, NULL</otherwise>
			</choose>
			,#{SyncType}
			,#{UserCode}
			,#{CompanyCode}
			,#{DeptCode}
			,#{LogonID}
			,#{EmpNo}
			,#{DisplayName}
			,#{MultiDisplayName}
			,#{JobPositionCode}
			,#{JobTitleCode}
			,#{JobLevelCode}			
			,#{SortKey}
			,#{IsUse}
			,#{IsDisplay}
			,#{EnterDate}
			,#{RetireDate}
			,#{BirthDiv}
			,#{BirthDate}
			,#{PhotoPath}
			,#{MailAddress}
			,#{ExternalMailAddress}
			,#{ChargeBusiness}
			,#{PhoneNumberInter}
			,#{SyncStatus}
			,SYSDATE
		)
    </insert>    
    
	<insert id="insertAddJobLogList" parameterType="cmap">
		INSERT INTO COVI_SYNCDATA.LOG_OBJECT_ADDJOB (
			  SyncManage
	    	, LogMasterID
			, SyncType
			, JobType
			, UserCode
			, CompanyCode
			, DeptCode
			, JobLevelCode
			, JobPositionCode
			, JobTitleCode
			, IsUse
			, SyncStatus
			, InsertDate
		)
		VALUES (
			#{SyncManage}
			<choose>
				<when test='SyncManage == "Sync"'>
					,(SELECT MAX(SyncMasterID) FROM COVI_SYNCDATA.LOG_OBJECT_LIST WHERE EndDate IS NULL )
				</when>
				<otherwise>, NULL</otherwise>
			</choose>
			,#{SyncType}
			,#{JobType}
			,#{UserCode}
			,#{CompanyCode}
			,#{DeptCode}
			,#{JobLevelCode}
			,#{JobPositionCode}
			,#{JobTitleCode}
			,#{IsUse}
			,#{SyncStatus}
			,SYSDATE
		)
    </insert>
    
    <!-- Init Org Data -->
	<delete id="deleteOrgData">
		CALL COVI_SYNCDATA.DELETEORGTABLEDATA()
	</delete>
	
	<insert id="insertOrgDept" parameterType="cmap">
		INSERT INTO COVI_SYNCDATA.ORGDEPT (
			GroupCode,
			CompanyCode,
			MemberOf, 
			DisplayName,
			MultiDisplayName,
			SortKey,
			IsUse,
			IsDisplay,
			IsMail,
			PrimaryMail,
			ManagerCode,
			InsertDate
		)
		VALUES (
			#{GroupCode},
			#{CompanyCode},
			#{MemberOf},
			#{DisplayName},
			#{MultiDisplayName},
			#{SortKey},
			NVL(#{IsUse}, 'N'),
			NVL(#{IsDisplay}, 'N'),
			NVL(#{IsMail}, 'N'),
			#{PrimaryMail},
			#{ManagerCode},
			SYSDATE
		)
	</insert>
	
	<insert id="insertOrgPerson" parameterType="cmap">
		INSERT INTO COVI_SYNCDATA.ORGPERSON (
			UserCode,
			CompanyCode,
			DeptCode, 
			LogonID,
			EmpNo,
			DisplayName,
			MultiDisplayName,
			JobPositionCode,
			JobTitleCode,
			JobLevelCode,
			SortKey,
			IsUse,
			IsDisplay,
			EnterDate,
			RetireDate,
			BirthDiv,
			BirthDate,
			PhotoPath,
			MailAddress,
			ExternalMailAddress,
			ChargeBusiness,
			PhoneNumberInter,
			PhoneNumber,
			Mobile,
			Fax,
			Address,
			MultiAddress,
			HomePage,
			IPPhone,
			InsertDate			
		)
		VALUES (
			#{UserCode},
			#{CompanyCode},
			#{DeptCode},
			#{LogonID},
			#{EmpNo},
			#{DisplayName},
			#{MultiDisplayName},
			#{JobPositionCode},
			#{JobPositionName},
			#{JobLevelCode},
			#{SortKey},
			#{IsUse},
			#{IsDisplay},
			#{EnterDate},
			#{RetireDate},
			#{BirthDiv},
			#{BirthDate},
			#{PhotoPath},
			#{MailAddress},
			#{ExternalMailAddress},
			#{ChargeBusiness},
			#{PhoneNumberInter},
			#{PhoneNumber},
			#{Mobile},
			#{Fax},
			#{Address},
			#{MultiAddress},
			#{HomePage},
			#{IPPhone},
			SYSDATE
		)
	</insert>
	
	<insert id="insertOrgJobTitle" parameterType="cmap">
		INSERT INTO COVI_SYNCDATA.ORGJOBTITLE (
			GroupCode,
			CompanyCode,
			DisplayName,
			MultiDisplayName,
			SortKey,
			IsUse,
			IsDisplay,
			IsMail,
			PrimaryMail,
			InsertDate
		)
		VALUES (
			#{GroupCode},
			#{CompanyCode},
			#{DisplayName},
			#{MultiDisplayName},
			#{SortKey},
			#{IsUse},
			#{IsDisplay},
			#{IsMail},
			#{PrimaryMail},
			SYSDATE
		)
	</insert>
	
	<insert id="insertOrgJobPosition" parameterType="cmap">
		INSERT INTO COVI_SYNCDATA.ORGJOBPOSITION (
			GroupCode,
			CompanyCode,
			DisplayName,
			MultiDisplayName,
			SortKey,
			IsUse,
			IsDisplay,
			IsMail,
			PrimaryMail,
			InsertDate
		)
		VALUES (
			#{GroupCode},
			#{CompanyCode},
			#{DisplayName},
			#{MultiDisplayName},
			#{SortKey},
			#{IsUse},
			#{IsDisplay},
			#{IsMail},
			#{PrimaryMail},
			SYSDATE
		)
	</insert>
	
	<insert id="insertOrgJobLevel" parameterType="cmap">
		INSERT INTO COVI_SYNCDATA.ORGJOBLEVEL (
			GroupCode,
			CompanyCode,
			DisplayName,
			MultiDisplayName,
			SortKey,
			IsUse,
			IsDisplay,
			IsMail,
			PrimaryMail,
			InsertDate
		)
		VALUES (
			#{GroupCode},
			#{CompanyCode},
			#{DisplayName},
			#{MultiDisplayName},
			#{SortKey},
			#{IsUse},
			#{IsDisplay},
			#{IsMail},
			#{PrimaryMail},
			SYSDATE
		)
	</insert>
	
	<insert id="insertOrgAddJob" parameterType="cmap">
		INSERT INTO COVI_SYNCDATA.ORGADDJOB (
			JobType, 
			UserCode, 
			CompanyCode, 
			DeptCode, 
			JobLevelCode, 
			JobPositionCode, 
			JobTitleCode, 
			IsUse, 
			InsertDate
		)
		VALUES (
			#{JobType}, 
			#{UserCode}, 
			#{CompanyCode}, 
			#{DeptCode}, 
			#{JobLevelCode}, 
			#{JobPositionCode}, 
			#{JobTitleCode}, 
			'Y', 
			SYSDATE
		)
	</insert>
    
	<!-- Init TempData -->
	<delete id="deleteTempObjectGroupList">	
		TRUNCATE TABLE COVI_SYNCDATA.TEMP_OBJECT_GROUP
	</delete>
	
	<delete id="deleteTempObjectUserList">	
		TRUNCATE TABLE COVI_SYNCDATA.TEMP_OBJECT_USER
	</delete>
	
	<delete id="deleteTempObjectAddJobList">	
		TRUNCATE TABLE COVI_SYNCDATA.TEMP_OBJECT_ADDJOB
	</delete>
    
	<!-- Org TempData -->
    <insert id="insertTempObjectDept" parameterType="cmap">
		INSERT INTO COVI_SYNCDATA.TEMP_OBJECT_GROUP (
			  GroupCode
			, CompanyCode
			, GroupType
			, MemberOf
			, GroupPath
			, RegionCode		
			, DisplayName
			, MultiDisplayName
			, ShortName
			, MultiShortName
			, OUName	
			, OUPath
			, SortKey
			, SortPath
			, IsUse
			, IsDisplay
			, IsMail
			, IsHR
			, PrimaryMail
			, SecondaryMail
			, ManagerCode
			, Description
			, ReceiptUnitCode
			, ApprovalUnitCode
			, Receivable
			, Approvable
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
		SELECT 
			  CASE 
				WHEN a.GroupCode = a.CompanyCode THEN a.GroupCode 
				ELSE
					<if test='isSaaS == "Y"'> a.CompanyCode || '_' || </if>
			  		a.GroupCode 
			  END AS GroupCode
			, a.CompanyCode
			, 'Dept' AS GroupType
			, CASE 
				WHEN a.MemberOf = a.CompanyCode THEN a.MemberOf 
				ELSE
					<if test='isSaaS == "Y"'> a.CompanyCode || '_' || </if>
			  		a.MemberOf 
			  END AS MemberOf
			, '' AS GroupPath 
			, a.RegionCode AS RegionCode
			, a.DisplayName AS DisplayName
			, a.MultiDisplayName AS MultiDisplayName
			, a.ShortName AS ShortName
			, a.MultiShortName AS MultiShortName
			, COVI_SYNCDATA.NVARCHAR_REMOVE_CHAR(a.DisplayName) AS OUName
			, '' AS OUPath
			, a.SortKey
			, '' AS SortPath
			, a.IsUse
			, a.IsDisplay
			, a.IsMail
			, 'Y' AS IsHR
			, a.PrimaryMail AS PrimaryMail
			, a.SecondaryMail AS SecondaryMail
			, a.ManagerCode
			, a.Description AS Description
			, a.GroupCode AS ReceiptUnitCode
			, a.GroupCode AS ApprovalUnitCode
			, 1 AS Receivable
			, 1 AS Approvable
			, SYSDATE AS RegistDate
			, SYSDATE AS ModifyDate
			, a.Reserved1 AS Reserved1
			, a.Reserved2 AS Reserved2
			, a.Reserved3 AS Reserved3
			, a.Reserved4 AS Reserved4
			, a.Reserved5 AS Reserved5
		FROM COVI_SYNCDATA.V_ORGDEPT a
		INNER JOIN SYS_OBJECT_DOMAIN b ON A.COMPANYCODE = b.DOMAINCODE
    </insert>   
  
   <insert id="insertTempObjectJobTitle" parameterType="cmap">
        INSERT INTO COVI_SYNCDATA.TEMP_OBJECT_GROUP (
			  GroupCode
			, CompanyCode
			, GroupType
			, MemberOf	
			, DisplayName
			, MultiDisplayName
			, ShortName
			, MultiShortName
			, OUName	
			, OUPath
			, SortKey
			, SortPath
			, IsUse
			, IsDisplay
			, IsMail
			, IsHR
			, PrimaryMail
			, SecondaryMail
			, Description
			, ReceiptUnitCode
			, ApprovalUnitCode
			, Receivable
			, Approvable
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
		SELECT
			  <if test='disablePrefix != "Y"'>'T' || </if>
			  a.GroupCode
			  <if test='isSaaS == "Y"'> || '_' || b.DomainId</if> AS GroupCode
			, a.CompanyCode
			, 'JobTitle' AS GroupType
			, a.MemberOf AS MemberOf
			, a.DisplayName AS DisplayName
			, a.MultiDisplayName AS MultiDisplayName
			, a.ShortName AS ShortName
			, a.MultiShortName AS MultiShortName
			, COVI_SYNCDATA.NVARCHAR_REMOVE_CHAR(a.DisplayName) AS OUName
			, '' AS OUPath
			, a.SortKey
			, '' AS SortPath
			, a.IsUse
			, a.IsDisplay
			, a.IsMail
			, 'Y' AS IsHR
			,<if test='disablePrefix != "Y"'>'T' || </if>
			  a.GroupCode
			  <if test='isSaaS == "Y"'> || '_' || b.DomainId</if> || '@' || b.DomainURL AS PrimaryMail
			, a.SecondaryMail AS SecondaryMail
			, a.Description AS Description
			, a.GroupCode AS ReceiptUnitCode
			, a.GroupCode AS ApprovalUnitCode
			, 1 AS Receivable
			, 1 AS Approvable
			, SYSDATE AS RegistDate
			, SYSDATE AS ModifyDate
			, a.Reserved1 AS Reserved1
			, a.Reserved2 AS Reserved2
			, a.Reserved3 AS Reserved3
			, a.Reserved4 AS Reserved4
			, a.Reserved5 AS Reserved5
		FROM COVI_SYNCDATA.V_ORGJOBTITLE a
		INNER JOIN SYS_OBJECT_DOMAIN b ON a.CompanyCode = b.DomainCode
    </insert>
    
      <insert id="insertTempObjectJobPosition" parameterType="cmap">        
        INSERT INTO COVI_SYNCDATA.TEMP_OBJECT_GROUP (
			  GroupCode
			, CompanyCode
			, GroupType
			, MemberOf
			, DisplayName
			, MultiDisplayName
			, ShortName
			, MultiShortName
			, OUName	
			, OUPath
			, SortKey
			, SortPath
			, IsUse
			, IsDisplay
			, IsMail
			, IsHR
			, PrimaryMail
			, SecondaryMail
			, Description
			, ReceiptUnitCode
			, ApprovalUnitCode
			, Receivable
			, Approvable
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
		SELECT
			  <if test='disablePrefix != "Y"'>'P' || </if>
			  a.GroupCode
			  <if test='isSaaS == "Y"'> || '_' || b.DomainId</if> AS GroupCode
			, a.CompanyCode
			, 'JobPosition' AS GroupType
			, a.MemberOf AS MemberOf
			, a.DisplayName AS DisplayName
			, a.MultiDisplayName AS MultiDisplayName
			, a.DisplayName AS ShortName
			, a.MultiDisplayName AS MultiShortName
			, COVI_SYNCDATA.NVARCHAR_REMOVE_CHAR(a.DisplayName) AS OUName
			, '' AS OUPath
			, a.SortKey
			, '' AS SortPath
			, a.IsUse
			, a.IsDisplay
			, a.IsMail
			, 'Y' AS IsHR
			,<if test='disablePrefix != "Y"'>'P' || </if>
			  a.GroupCode
			<if test='isSaaS == "Y"'> || '_' || b.DomainId</if> || '@' || b.DomainURL AS PrimaryMail
			, a.SecondaryMail AS SecondaryMail
			, a.Description AS Description
			, a.GroupCode AS ReceiptUnitCode
			, a.GroupCode AS ApprovalUnitCode
			, 1 AS Receivable
			, 1 AS Approvable
			, SYSDATE AS RegistDate
			, SYSDATE AS ModifyDate
			, a.Reserved1 AS Reserved1
			, a.Reserved2 AS Reserved2
			, a.Reserved3 AS Reserved3
			, a.Reserved4 AS Reserved4
			, a.Reserved5 AS Reserved5
		FROM COVI_SYNCDATA.V_ORGJOBPOSITION a
		INNER JOIN SYS_OBJECT_DOMAIN b ON a.CompanyCode = b.DomainCode
    </insert>
    
    <insert id="insertTempObjectJobLevel" parameterType="cmap">
        INSERT INTO COVI_SYNCDATA.TEMP_OBJECT_GROUP (
			  GroupCode
			, CompanyCode
			, GroupType
			, MemberOf		
			, DisplayName
			, MultiDisplayName
			, ShortName
			, MultiShortName
			, OUName	
			, OUPath
			, SortKey
			, SortPath
			, IsUse
			, IsDisplay
			, IsMail
			, IsHR
			, PrimaryMail
			, SecondaryMail
			, Description
			, ReceiptUnitCode
			, ApprovalUnitCode
			, Receivable
			, Approvable
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
		SELECT
			  <if test='disablePrefix != "Y"'>'L' || </if>
			  a.GroupCode
			  <if test='isSaaS == "Y"'> || '_' || b.DomainId</if> AS GroupCode
			, a.CompanyCode
			, 'JobLevel' AS GroupType
			, a.MemberOf AS MemberOf
			, a.DisplayName AS DisplayName
			, a.MultiDisplayName AS MultiDisplayName
			, a.DisplayName AS ShortName
			, a.MultiDisplayName AS MultiShortName
			, COVI_SYNCDATA.NVARCHAR_REMOVE_CHAR(a.DisplayName) AS OUName
			, '' AS OUPath
			, a.SortKey
			, '' AS SortPath
			, a.IsUse
			, a.IsDisplay
			, a.IsMail
			, 'Y' AS IsHR
			,<if test='disablePrefix != "Y"'>'L' || </if>
			  a.GroupCode
			<if test='isSaaS == "Y"'> || '_' || b.DomainId</if> || '@' || b.DomainURL AS PrimaryMail
			, a.SecondaryMail AS SecondaryMail
			, a.Description AS Description
			, a.GroupCode AS ReceiptUnitCode
			, a.GroupCode AS ApprovalUnitCode
			, 1 AS Receivable
			, 1 AS Approvable
			, SYSDATE AS RegistDate
			, SYSDATE AS ModifyDate
			, a.Reserved1 AS Reserved1
			, a.Reserved2 AS Reserved2
			, a.Reserved3 AS Reserved3
			, a.Reserved4 AS Reserved4
			, a.Reserved5 AS Reserved5
		FROM COVI_SYNCDATA.V_ORGJOBLEVEL a
		INNER JOIN SYS_OBJECT_DOMAIN b ON a.CompanyCode = b.DomainCode
    </insert>
    
    <insert id="insertTempObjectUser" parameterType="cmap">       	    
		INSERT INTO COVI_SYNCDATA.TEMP_OBJECT_USER (	
			  UserCode
			, LogonID
			, LogonPassword
			, EmpNo
			, DisplayName
			, NickName
			, MultiDisplayName
			, CompanyCode
			, DeptCode
			, JobTitleCode
			, JobPositionCode
			, JobLevelCode
			, RegionCode
			, Address
			, MultiAddress
			, HomePage
			, PhoneNumber
			, Mobile
			, Fax			
			, IPPhone
			, UseMessengerConnect
			, SortKey
			, SecurityLevel
			, Description
			, IsUse
			, IsHR
			, IsDisplay
			, EnterDate
			, RetireDate
			, PhotoPath
			, BirthDiv
			, BirthDate
			, UseMailConnect
			, MailAddress
			, ExternalMailAddress
			, ChargeBusiness
			, PhoneNumberInter
			, LanguageCode
			, MobileThemeCode
			, TimeZoneCode
			, InitPortal
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
			, AD_IsUse
			, AD_DisplayName
			, AD_FirstName
			, AD_LastName
			, AD_Initials
			, AD_Office
			, AD_HomePage
			, AD_Country
			, AD_CountryID
			, AD_CountryCode
			, AD_State
			, AD_City
			, AD_StreetAddress
			, AD_PostOfficeBox
			, AD_PostalCode
			, AD_UserAccountControl
			, AD_AccountExpires
			, AD_PhoneNumber
			, AD_HomePhone
			, AD_Pager
			, AD_Mobile
			, AD_Fax
			, AD_Info
			, AD_Title
			, AD_Department
			, AD_Company
			, AD_ManagerCode
			, AD_CN
			, AD_SamAccountName
			, AD_UserPrincipalName
			, EX_IsUse
			, EX_PrimaryMail
			, EX_SecondaryMail
			, EX_StorageServer
			, EX_StorageGroup
			, EX_StorageStore
			, MSN_IsUse
			, MSN_PoolServerName
			, MSN_PoolServerDN
			, MSN_SIPAddress
			, MSN_Anonmy
			, MSN_MeetingPolicyName
			, MSN_MeetingPolicyDN
			, MSN_PhoneCommunication
			, MSN_PBX
			, LicSeq
		)
		SELECT
			  a.UserCode
			, a.LogonID
			, a.LogonPassword AS LogonPassword
			, a.EmpNo
			, a.DisplayName
			, a.NickName AS NickName
			, a.MultiDisplayName AS MultiDisplayName
			, a.CompanyCode
			, CASE 
				WHEN a.DeptCode = a.CompanyCode THEN a.DeptCode 
				ELSE
					<if test='isSaaS == "Y"'> a.CompanyCode || '_' || </if>
			  		a.DeptCode 
			  END AS DeptCode
			, CASE
				WHEN NVL(a.JobTitleCode, ' ') != ' ' THEN
					<if test='disablePrefix != "Y"'>'T' || </if>
						a.JobTitleCode
					<if test='isSaaS == "Y"'> || '_' || c.DomainId</if> 
			  ELSE '' END AS JobTitleCode
			, CASE
				WHEN NVL(a.JobPositionCode, ' ') != ' ' THEN
					<if test='disablePrefix != "Y"'>'P' || </if>
						a.JobPositionCode
					<if test='isSaaS == "Y"'> || '_' || c.DomainId</if> 
			  ELSE '' END AS JobPositionCode
			, CASE
				WHEN NVL(a.JobLevelCode, ' ') != ' ' THEN
					<if test='disablePrefix != "Y"'>'L' || </if>
						a.JobLevelCode
					<if test='isSaaS == "Y"'> || '_' || c.DomainId</if> 
			  ELSE '' END AS JobLevelCode
			, a.RegionCode AS RegionCode
			, a.Address AS Address
			, a.MultiAddress AS MultiAddress
			, a.HomePage AS HomePage
			, a.PhoneNumber AS PhoneNumber
			, a.Mobile AS Mobile
			, a.FAX AS Fax
			, a.IPPhone AS IPPhone
			, a.UseMessengerConnect 
			, a.SortKey AS SortKey
			, 40 AS SecurityLevel
			, a.Description AS Description
			, a.IsUse
			, 'Y' AS IsHR
			, a.IsDisplay
			, a.EnterDate
			, a.RetireDate
			, a.PhotoPath
			, a.BirthDiv
			, a.BirthDate
			, a.UseMailConnect
			, a.MailAddress
			, a.ExternalMailAddress
			, a.ChargeBusiness
			, a.PhoneNumberInter
			, 'ko' AS LanguageCode
			, 'MobileTheme_Base' AS MobileThemeCode
			, 'TIMEZO0048' AS TimeZoneCode
			, 0 AS InitPortal
			, SYSDATE AS RegistDate
			, SYSDATE AS ModifyDate
			, a.Reserved1 AS Reserved1
			, a.Reserved2 AS Reserved2
			, a.Reserved3 AS Reserved3
			, a.Reserved4 AS Reserved4
			, a.Reserved5 AS Reserved5
            , NVL(a.AD_IsUse,'N') AS AD_IsUse
			, NVL(a.AD_DisplayName, a.DisplayName) AS AD_DisplayName
			, CASE 
				WHEN NVL(a.AD_FirstName,' ') = ' ' THEN SUBSTR(NVL(a.DisplayName,'없음'),2) 
				ELSE a.AD_FirstName 
			  END AS AD_FirstName
			, CASE 
				WHEN NVL(a.AD_LastName,' ') = ' ' THEN SUBSTR(NVL(a.DisplayName,'N'),1,1) 
				ELSE a.AD_LastName 
			  END AS AD_LastName
			, a.AD_Initials AS AD_Initials
			, a.AD_Office AS AD_Office
			, a.AD_HomePage AS AD_HomePage
			, CASE 
				WHEN NVL(a.AD_Country,' ') = ' ' THEN '대한민국' 
				ELSE a.AD_Country 
			  END AS AD_Country
			, CASE 
				WHEN NVL(a.AD_CountryID,' ') = ' ' THEN '410'
				ELSE a.AD_CountryID 
			  END AS AD_CountryID
			, CASE 
				WHEN NVL(a.AD_CountryCode,' ') = ' ' THEN 'KR'
				ELSE a.AD_CountryCode
			  END AS AD_CountryCode
			, a.AD_State AS AD_State
			, a.AD_City AS AD_City
			, a.AD_StreetAddress
			, a.AD_PostOfficeBox
			, a.AD_PostalCode
			, CASE 
				WHEN NVL(a.AD_UserAccountControl,' ') = ' ' THEN '66048'
				ELSE a.AD_UserAccountControl
			  END AS AD_UserAccountControl
			, CASE 
				WHEN NVL(a.AD_AccountExpires,' ') = ' ' THEN '0'
				ELSE a.AD_AccountExpires
			  END AS AD_AccountExpires
			, a.AD_PhoneNumber
			, a.AD_HomePhone
			, a.AD_Pager
			, a.AD_Mobile
			, a.AD_Fax
			, a.AD_Info
			, CASE 
				WHEN NVL(a.AD_Title,'') = ' ' THEN (SELECT DisplayName FROM COVI_SYNCDATA.temp_object_group WHERE GroupCode = a.JobTitleCode)
				ELSE a.AD_Title
			  END AS AD_Title
			, CASE 
				WHEN NVL(a.AD_Department,' ') = ' ' THEN b.DisplayName
				ELSE a.AD_Department
			  END AS AD_Department
			, CASE 
				WHEN NVL(a.AD_Company,' ') = ' ' THEN c.DisplayName
				ELSE a.AD_Company
			  END AS AD_Company
			, a.AD_ManagerCode
			, CASE 
				WHEN NVL(a.AD_CN,' ') = ' ' THEN
					CASE 
						WHEN (SELECT UPPER(SETTINGVALUE) FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AD_CN_MAPPING') = 'USERCODE' THEN a.UserCode
					 	WHEN (SELECT UPPER(SETTINGVALUE) FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AD_CN_MAPPING') = 'LOGONID' THEN a.LogonID
					 	WHEN (SELECT UPPER(SETTINGVALUE) FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AD_CN_MAPPING') = 'EMPNO' THEN a.EmpNo
					 	WHEN (SELECT UPPER(SETTINGVALUE) FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AD_CN_MAPPING') = 'DISPLAYNAME' THEN a.DisplayName
					END
			  END AS AD_CN
			, CASE 
				WHEN NVL(a.AD_SamAccountName,' ') = ' ' THEN
					CASE 
						WHEN (SELECT UPPER(SETTINGVALUE) FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AD_sAMAccountName_Mapping') = 'USERCODE' THEN a.UserCode
					 	WHEN (SELECT UPPER(SETTINGVALUE) FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AD_sAMAccountName_Mapping') = 'LOGONID' THEN a.LogonID
					 	WHEN (SELECT UPPER(SETTINGVALUE) FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AD_sAMAccountName_Mapping') = 'EMPNO' THEN a.EmpNo
					 	WHEN (SELECT UPPER(SETTINGVALUE) FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AD_sAMAccountName_Mapping') = 'DISPLAYNAME' THEN a.DisplayName
					END
			  END AS AD_SamAccountName
			, CASE 
				WHEN NVL(a.AD_UserPrincipalName,' ') = ' ' THEN
					CASE 
						NVL(
							(SELECT UPPER(SETTINGVALUE) FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AD_UserPrincipalName_Mapping' AND DOMAINID = c.DomainID),
							(SELECT UPPER(SETTINGVALUE) FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'AD_UserPrincipalName_Mapping' AND DOMAINID = '0')
						)
						WHEN 'USERCODE' THEN (a.UserCode||'@'||c.DomainURL)
					 	WHEN 'LOGONID' THEN (a.LogonID||'@'||c.DomainURL)
					 	WHEN 'EMPNO' THEN (a.EmpNo||'@'||c.DomainURL)
					END
			  END AS AD_UserPrincipalName
			, NVL(a.EX_IsUse,'N') AS EX_IsUse
			, a.EX_PrimaryMail
			, a.EX_SecondaryMail
			, a.EX_StorageServer
			, a.EX_StorageGroup
			, a.EX_StorageStore
			, NVL(a.MSN_IsUse,'N') AS MSN_IsUse
			, a.MSN_PoolServerName
			, a.MSN_PoolServerDN
			, a.MSN_SIPAddress
			, a.MSN_Anonmy
			, NVL(a.MSN_MeetingPolicyName,'ORGLyncUser') AS MSN_MeetingPolicyName
			, a.MSN_MeetingPolicyDN
			, NVL(a.MSN_PhoneCommunication,'257') AS MSN_PhoneCommunication
			, a.MSN_PBX
			, a.LicSeq
		FROM COVI_SYNCDATA.V_ORGPERSON a
		INNER JOIN COVI_SYNCDATA.V_ORGDEPT b ON a.DEPTCODE = b.GroupCode
		INNER JOIN SYS_OBJECT_DOMAIN c ON a.Companycode = c.DomainCode
    </insert>
    
    <insert id="insertTempObjectAddJob" parameterType="cmap">   	    
		INSERT INTO COVI_SYNCDATA.TEMP_OBJECT_ADDJOB (
			  UserCode
			, JobType 		
			, CompanyCode
			, DeptCode
			, JobTitleCode
			, JobPositionCode
			, JobLevelCode
			, RegionCode	
			, SortKey		
			, IsHR		
			, RegistDate
			, ModifyDate
			, Reserved1 	
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
      	SELECT
			  a.UserCode
			, a.JobType
			, a.CompanyCode
			, CASE 
				WHEN a.DeptCode = a.CompanyCode THEN a.DeptCode 
				ELSE
					<if test='isSaaS == "Y"'> a.CompanyCode || '_' || </if>
			  		a.DeptCode 
			  END AS DeptCode
			, CASE
				WHEN NVL(a.JobTitleCode, ' ') != ' ' THEN
					<if test='disablePrefix != "Y"'>'T' || </if>
						a.JobTitleCode
					<if test='isSaaS == "Y"'> || '_' || d.DomainId</if> 
			  ELSE '' END AS JobTitleCode
			, CASE
				WHEN NVL(a.JobPositionCode, ' ') != ' ' THEN
					<if test='disablePrefix != "Y"'>'P' || </if>
						a.JobPositionCode
					<if test='isSaaS == "Y"'> || '_' || d.DomainId</if> 
			  ELSE '' END AS JobPositionCode
			, CASE
				WHEN NVL(a.JobLevelCode, ' ') != ' ' THEN
					<if test='disablePrefix != "Y"'>'L' || </if>
						a.JobLevelCode
					<if test='isSaaS == "Y"'> || '_' || d.DomainId</if> 
			  ELSE '' END AS JobLevelCode
			, a.RegionCode AS RegionCode
			, a.SortKey
			, 'Y' AS IsHR
			, SYSDATE AS RegistDate
			, SYSDATE AS ModifyDate
			, a.Reserved1 AS Reserved1
			, a.Reserved2 AS Reserved2
			, a.Reserved3 AS Reserved3
			, a.Reserved4 AS Reserved4
			, a.Reserved5 AS Reserved5
		FROM COVI_SYNCDATA.V_ORGADDJOB a
        INNER JOIN COVI_SYNCDATA.V_ORGDEPT c on a.DeptCode = c.GroupCode
        INNER JOIN SYS_OBJECT_DOMAIN d on a.CompanyCode = d.DomainCode
    </insert>
    
    <update id="updateGroupSortkey" parameterType="cmap">
        MERGE INTO COVI_SYNCDATA.TEMP_OBJECT_GROUP aa
        USING (
		    SELECT
		        ROWNUM AS row_no,
		        a.memberof,
		        a.groupcode
		    FROM COVI_SYNCDATA.TEMP_OBJECT_GROUP a
		    WHERE a.memberof IN (
		            SELECT memberof
		            FROM (
	                    SELECT
	                        memberof,
	                        sortkey
	                    FROM COVI_SYNCDATA.TEMP_OBJECT_GROUP
	                    GROUP BY memberof, sortkey
	                    HAVING COUNT(sortkey) > 1
					)
		        )
		) b ON (aa.groupcode = b.groupcode AND aa.grouptype = 'Dept')
		WHEN MATCHED THEN UPDATE SET aa.sortkey = b.row_no
    </update>
    
    <!-- Init CompareData -->
    <delete id="deleteCompareObjectGroupList">	
		TRUNCATE TABLE COVI_SYNCDATA.COMPARE_OBJECT_GROUP	
	</delete>
	<delete id="deleteCompareObjectUserList">	
		TRUNCATE TABLE COVI_SYNCDATA.COMPARE_OBJECT_USER
	</delete>
	<delete id="deleteCompareObjectAddJobList">	
		TRUNCATE TABLE COVI_SYNCDATA.COMPARE_OBJECT_ADDJOB
	</delete>
	
	<delete id="deleteCompareObjectGroupOne">
		DELETE FROM COVI_SYNCDATA.COMPARE_OBJECT_GROUP
		WHERE SyncType = #{SyncType}
		AND GroupCode = #{GroupCode}
	</delete>
	
	<delete id="deleteCompareObjectUserOne">
		DELETE FROM COVI_SYNCDATA.COMPARE_OBJECT_USER
		WHERE SyncType = #{SyncType}
		AND UserCode = #{UserCode}
	</delete>
	
	<delete id="deleteCompareObjectAddJobOne">
		DELETE FROM COVI_SYNCDATA.COMPARE_OBJECT_ADDJOB
		WHERE SyncType = #{SyncType}
		AND UserCode = #{UserCode}
		AND CompanyCode = #{CompanyCode}
		AND DeptCode = #{DeptCode}
	</delete>
	
	<!-- CompareData -->
	<select id="selectCompareObjectGroupList" parameterType="cmap" resultType="cmap">
      	SELECT
			  SyncType as "SyncType"
			, GroupCode as "GroupCode"
			, CompanyCode as "CompanyCode"
			, GroupType as "GroupType"
			, MemberOf as "MemberOf"
			, GroupPath as "GroupPath"
			, RegionCode as "RegionCode"	
			, DisplayName as "DisplayName"
			, DBMS_LOB.SUBSTR(MultiDisplayName,4000,1) AS "MultiDisplayName"
			, ShortName as "ShortName"
			, DBMS_LOB.SUBSTR(MultiShortName,4000,1) AS "MultiShortName"
			, OUName as "OUName"
			, DBMS_LOB.SUBSTR(OUPath,4000,1) as "OUPath"
			, SortKey as "SortKey"
			, SortPath as "SortPath"
			, IsUse as "IsUse"
			, IsDisplay as "IsDisplay"
			, IsMail as "IsMail"
			, IsHR as "IsHR"
			, PrimaryMail as "PrimaryMail"
			, SecondaryMail as "SecondaryMail"
			, ManagerCode as "ManagerCode"
			, Description as "Description"
			, ReceiptUnitCode as "ReceiptUnitCode"
			, ApprovalUnitCode as "ApprovalUnitCode"
			, Receivable as "Receivable"
			, Approvable as "Approvable"
			, RegistDate as "RegistDate"
			, ModifyDate as "ModifyDate"
			, Reserved1 as "Reserved1"
			, Reserved2 as "Reserved2"
			, Reserved3 as "Reserved3"
			, Reserved4 as "Reserved4"
			, Reserved5 as "Reserved5"
		FROM COVI_SYNCDATA.COMPARE_OBJECT_GROUP
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="SyncType != null and SyncType != ''">
				AND SyncType = #{SyncType}
			</if>
			<if test="GroupType != null and GroupType != ''">
				AND UPPER(GroupType) = #{GroupType}
			</if>
		</trim>
		<if test="SyncType != null and SyncType != '' and SyncType != 'DELETE'">
			ORDER BY SyncType DESC, GroupType, SortPath ASC
		</if>
	</select>
	
	<select id="selectCompareObjectGroupListcnt" parameterType="cmap" resultType="java.lang.Long">
      	SELECT COUNT(*)
		FROM COVI_SYNCDATA.COMPARE_OBJECT_GROUP
		<if test="SyncType != null and SyncType != ''">
			WHERE SyncType = #{SyncType}
		</if>		  
	</select>
	
	<select id="selectCompareObjectUserList" resultType="cmap">
      	SELECT DISTINCT 
      		  A.SyncType as "SyncType"
			, A.UserCode as "UserCode"
			, A.LogonID as "LogonID"
			, A.LogonPassword as "LogonPassword"
			, A.EmpNo as "EmpNo"
			, A.DisplayName as "DisplayName"
			, A.NickName as "NickName"
			, SUBSTR(A.MultiDisplayName, 1, DBMS_LOB.GETLENGTH(A.MultiDisplayName)) AS "MultiDisplayName"
			, A.CompanyCode as "CompanyCode"
			, A.DeptCode as "DeptCode"
			, A.JobTitleCode as "JobTitleCode"
			, A.JobPositionCode as "JobPositionCode"
			, A.JobLevelCode as "JobLevelCode"
			, A.RegionCode as "RegionCode"
			, A.Address as "Address"
			, SUBSTR(A.MultiAddress, 1, DBMS_LOB.GETLENGTH(A.MultiAddress)) AS "MultiAddress"
			, A.HomePage as "HomePage"
			, A.PhoneNumber as "PhoneNumber"
			, A.Mobile as "Mobile"
			, A.Fax as "Fax"
			, A.IPPhone as "IPPhone"
			, A.UseMessengerConnect as "UseMessengerConnect"
			, A.SortKey as "SortKey"
			, A.SecurityLevel as "SecurityLevel"
			, SUBSTR(A.Description, 1, DBMS_LOB.GETLENGTH(A.Description)) AS "Description"
			, A.IsUse as "IsUse"
			, A.IsHR as "IsHR"
			, A.IsDisplay as "IsDisplay"
			, A.EnterDate as "EnterDate"
			, A.RetireDate as "RetireDate"
			, SUBSTR(A.PhotoPath, 1, DBMS_LOB.GETLENGTH(A.PhotoPath)) AS "PhotoPath"
			, A.BirthDiv as "BirthDiv"
			, A.BirthDate as "BirthDate"
			, A.UseMailConnect as "UseMailConnect"
			, A.MailAddress as "MailAddress"
			, A.ExternalMailAddress as "ExternalMailAddress"
			, A.ChargeBusiness  as "ChargeBusiness"
			, A.PhoneNumberInter as "PhoneNumberInter"
			, A.LanguageCode as "LanguageCode"
			, A.MobileThemeCode as "MobileThemeCode"
			, A.TimeZoneCode as "TimeZoneCode"
			, A.InitPortal as "InitPortal"
			, A.RegistDate as "RegistDate"
			, A.ModifyDate as "ModifyDate"
			, A.Reserved1 as "Reserved1"
			, A.Reserved2 as "Reserved2"
			, A.Reserved3 as "Reserved3"
			, A.Reserved4 as "Reserved4"
			, A.Reserved5 as "Reserved5"
			, NVL(B.DeptCode,'') AS "oldDeptCode"
			, NVL(B.JobPositionCode,'') AS "oldJobPositionCode"
			, NVL(B.JobTitleCode,'') AS "oldJobTitleCode"
			, NVL(B.JobLevelCode,'') AS "oldJobLevelCode"
			, A.AD_IsUse AS "AD_IsUse"
			, A.AD_DisplayName AS "AD_DisplayName"
			, A.AD_FirstName AS "AD_FirstName"
			, A.AD_LastName AS "AD_LastName"
			, A.AD_Initials AS "AD_Initials"
			, A.AD_Office AS "AD_Office"
			, A.AD_HomePage AS "AD_HomePage"
			, A.AD_Country AS "AD_Country"
			, A.AD_CountryID AS "AD_CountryID"
			, A.AD_CountryCode AS "AD_CountryCode"
			, A.AD_State AS "AD_State"
			, A.AD_City AS "AD_City"
			, A.AD_StreetAddress AS "AD_StreetAddress"
			, A.AD_PostOfficeBox AS "AD_PostOfficeBox"
			, A.AD_PostalCode AS "AD_PostalCode"
			, A.AD_UserAccountControl AS "AD_UserAccountControl"
			, A.AD_AccountExpires AS "AD_AccountExpires"
			, A.AD_PhoneNumber AS "AD_PhoneNumber"
			, A.AD_HomePhone AS "AD_HomePhone"
			, A.AD_Pager AS "AD_Pager"
			, A.AD_Mobile AS "AD_Mobile"
			, A.AD_Fax AS "AD_Fax"
			, A.AD_Info AS "AD_Info"
			, A.AD_Title AS "AD_Title"
			, A.AD_Department AS "AD_Department"
			, A.AD_Company AS "AD_Company"
			, A.AD_ManagerCode AS "AD_ManagerCode"
			, A.AD_CN AS "AD_CN"
			, A.AD_SamAccountName AS "AD_SamAccountName"
			, A.AD_UserPrincipalName AS "AD_UserPrincipalName"
			, A.EX_IsUse AS "EX_IsUse"
			, A.EX_PrimaryMail AS "EX_PrimaryMail"
			, A.EX_SecondaryMail AS "EX_SecondaryMail"
			, A.EX_StorageServer AS "EX_StorageServer"
			, A.EX_StorageGroup AS "EX_StorageGroup"
			, A.EX_StorageStore AS "EX_StorageStore"
			, A.MSN_IsUse AS "MSN_IsUse"
			, A.MSN_PoolServerName AS "MSN_PoolServerName"
			, A.MSN_PoolServerDN AS "MSN_PoolServerDN"
			, A.MSN_SIPAddress AS "MSN_SIPAddress"
			, A.MSN_Anonmy AS "MSN_Anonmy"
			, A.MSN_MeetingPolicyName AS "MSN_MeetingPolicyName"
			, A.MSN_MeetingPolicyDN AS "MSN_MeetingPolicyDN"
			, A.MSN_PhoneCommunication AS "MSN_PhoneCommunication"
			, A.MSN_PBX AS "MSN_PBX"
			, A.LicSeq AS "LicSeq"
		FROM COVI_SYNCDATA.COMPARE_OBJECT_USER A
		LEFT JOIN SYS_OBJECT_USER_BASEGROUP B on NVL(a.usercode,'') = NVL(b.usercode,'') AND B.JobType = 'Origin'
		<if test="SyncType != null and SyncType != ''">
			WHERE SyncType = #{SyncType}
		</if>
		ORDER BY SyncType DESC
	</select>
	
	<select id="selectCompareObjectUserListcnt" parameterType="cmap" resultType="java.lang.Long">
      	SELECT COUNT(*)
		FROM COVI_SYNCDATA.COMPARE_OBJECT_USER
		<if test="SyncType != null and SyncType != ''">
			WHERE SyncType = #{SyncType}
		</if>		  
	</select>
	
	<select id="selectCompareObjectAddJobList" resultType="cmap">
        SELECT
        	  SyncType as "SyncType"
        	, Seq as "Seq"
        	, UserCode as "UserCode"
        	, (SELECT LogonID from SYS_OBJECT_USER A WHERE A.usercode = B.UserCode) AS LogonID
        	, JobType as "JobType"
        	, CompanyCode as "CompanyCode"
        	, DeptCode as "DeptCode"
        	, JobTitleCode as "JobTitleCode"
        	, JobPositionCode as "JobPositionCode"
        	, JobLevelCode as "JobLevelCode"
        	, RegionCode as "RegionCode"
        	, SortKey as "SortKey"
        	, IsHR as "IsHR"
        	, RegistDate as "RegistDate"
        	, ModifyDate as "ModifyDate"
        	, Reserved1 as "Reserved1"
        	, Reserved2 as "Reserved2"
        	, Reserved3 as "Reserved3"
        	, Reserved4 as "Reserved4"
        	, Reserved5 as "Reserved5"
        	, NVL((SELECT Displayname FROM SYS_OBJECT_GROUP WHERE groupcode = JobTitleCode),'') AS JobTitleName
        	, NVL((SELECT Displayname FROM SYS_OBJECT_GROUP WHERE groupcode = JobPositionCode),'') AS JobPositionName
        	, NVL((SELECT Displayname FROM SYS_OBJECT_GROUP WHERE groupcode = JobLevelCode),'') AS JobLevelName
        	, (SELECT A.Displayname from sys_object_user A where A.usercode = B.UserCode  ) AS DisplayName
		FROM COVI_SYNCDATA.COMPARE_OBJECT_ADDJOB B
		<if test="SyncType != null and SyncType != ''">
			WHERE SyncType = #{SyncType}
		</if>
		ORDER BY SyncType DESC
    </select>
    
	<select id="selectCompareObjectAddJobListcnt" parameterType="cmap" resultType="java.lang.Long">
      	SELECT COUNT(*)
		FROM COVI_SYNCDATA.COMPARE_OBJECT_ADDJOB
		<if test="SyncType != null and SyncType != ''">
			WHERE SyncType = #{SyncType}
		</if>		  
	</select>
    
	<insert id="insertCompareObjectGroupINSERT" parameterType="cmap">
	    INSERT INTO COVI_SYNCDATA.COMPARE_OBJECT_GROUP (
			  SyncType
			, GroupCode
			, CompanyCode
			, GroupType
			, MemberOf
			, GroupPath
			, RegionCode		
			, DisplayName
			, MultiDisplayName
			, ShortName
			, MultiShortName
			, OUName	
			, OUPath
			, SortKey
			, SortPath
			, IsUse
			, IsDisplay
			, IsMail
			, IsHR
			, PrimaryMail
			, SecondaryMail
			, ManagerCode
			, Description
			, ReceiptUnitCode
			, ApprovalUnitCode
			, Receivable
			, Approvable
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
		SELECT
			  'INSERT' AS SyncType
			, a.GroupCode
			, a.CompanyCode
			, a.GroupType
			, a.MemberOf
			, COVI_SYNCDATA.FN_COMOBJECTPATHCREATE_SYNC(a.groupcode,'GR') AS GroupPath
			, a.RegionCode		
			, a.DisplayName
			, a.MultiDisplayName
			, a.ShortName
			, a.MultiShortName
			, a.OUName	
			, COVI_SYNCDATA.FN_COMOUPATHCREATE_SYNC(a.GroupCode, 'GR') AS OUPath
			, a.SortKey
			, COVI_SYNCDATA.FN_COMSORTPATHCREATE_SYNC(0, a.GroupCode,'GR') AS SortPath
			, a.IsUse
			, a.IsDisplay
			, a.IsMail
			, a.IsHR
			, a.PrimaryMail
			, a.SecondaryMail
			, a.ManagerCode
			, a.Description
			, a.ReceiptUnitCode
			, a.ApprovalUnitCode
			, a.Receivable
			, a.Approvable
			, a.RegistDate
			, a.ModifyDate
			, a.Reserved1
			, a.Reserved2
			, a.Reserved3
			, a.Reserved4
			, a.Reserved5
		FROM COVI_SYNCDATA.TEMP_OBJECT_GROUP a
		LEFT JOIN SYS_OBJECT_GROUP b ON a.GroupCode = b.GroupCode
		INNER JOIN SYS_OBJECT_DOMAIN c ON c.DomainCode = a.CompanyCode
		WHERE c.OrgSyncType = 'AUTO'
		AND b.GroupCode IS NULL
	</insert>
    
    <insert id="insertCompareObjectGroupUPDATE" parameterType="cmap">
	    INSERT INTO COVI_SYNCDATA.COMPARE_OBJECT_GROUP (
			  SyncType
			, GroupCode
			, CompanyCode
			, GroupType
			, MemberOf
			, GroupPath
			, RegionCode		
			, DisplayName
			, MultiDisplayName
			, ShortName
			, MultiShortName
			, OUName	
			, OUPath
			, SortKey
			, SortPath
			, IsUse
			, IsDisplay
			, IsMail
			, IsHR
			, PrimaryMail
			, SecondaryMail
			, ManagerCode
			, Description
			, ReceiptUnitCode
			, ApprovalUnitCode
			, Receivable
			, Approvable
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
		SELECT
			  'UPDATE' AS SyncType
			, a.GroupCode
			, a.CompanyCode
			, a.GroupType
			, a.MemberOf
			, COVI_SYNCDATA.FN_COMOBJECTPATHCREATE_SYNC(a.groupcode,'GR') AS GroupPath
			, a.RegionCode		
			, a.DisplayName
			, a.MultiDisplayName
			, a.ShortName
			, a.MultiShortName
			, a.OUName	
			, COVI_SYNCDATA.FN_COMOUPATHCREATE_SYNC(a.GroupCode, 'GR') AS OUPath
			, a.SortKey
			, COVI_SYNCDATA.FN_COMSORTPATHCREATE_SYNC(0, a.GroupCode,'GR') AS SortPath
			, a.IsUse
			, a.IsDisplay
			, a.IsMail
			, b.IsHR
			, a.PrimaryMail
			, a.SecondaryMail
			, a.ManagerCode
			, a.Description
			, a.ReceiptUnitCode
			, a.ApprovalUnitCode
			, a.Receivable
			, a.Approvable
			, b.RegistDate
			, a.ModifyDate
			, a.Reserved1
			, a.Reserved2
			, a.Reserved3
			, a.Reserved4
			, a.Reserved5
		FROM COVI_SYNCDATA.TEMP_OBJECT_GROUP a
		INNER JOIN SYS_OBJECT_GROUP b ON a.GroupCode = b.GroupCode AND a.GroupType = b.GroupType
		INNER JOIN SYS_OBJECT_DOMAIN c ON c.DomainCode = a.CompanyCode AND c.OrgSyncType = 'AUTO'
		WHERE b.IsHR = 'Y' AND a.IsUse = 'Y'
		AND (
			NVL(a.CompanyCode, '') 				<![CDATA[<>]]>		NVL(b.CompanyCode, '')
			OR NVL(a.MemberOF, '') 				<![CDATA[<>]]>		NVL(b.MemberOF, '')
			OR NVL(a.DisplayName, '') 			<![CDATA[<>]]>		NVL(b.DisplayName, '')
			OR NVL(a.MultiDisplayName, '') 		<![CDATA[<>]]>		NVL(b.MultiDisplayName, '')
			OR NVL(a.SortKey, '')				<![CDATA[<>]]>		NVL(b.SortKey, '')
			OR NVL(a.IsDisplay, '') 			<![CDATA[<>]]>		NVL(b.IsDisplay, '')
			OR NVL(a.IsMail, '') 				<![CDATA[<>]]>		NVL(b.IsMail, '')
			OR NVL(a.PrimaryMail, '') 			<![CDATA[<>]]>		NVL(b.PrimaryMail, '')
			OR NVL(a.SecondaryMail, '') 		<![CDATA[<>]]>		NVL(b.SecondaryMail, '')
			OR NVL(a.ManagerCode, '') 			<![CDATA[<>]]>		NVL(b.ManagerCode, '')	
			OR NVL(a.Reserved1, ' ') 			<![CDATA[<>]]> 		NVL(b.Reserved1, ' ')
			OR NVL(a.Reserved2, ' ') 			<![CDATA[<>]]> 		NVL(b.Reserved2, ' ')
			OR NVL(a.Reserved3, ' ') 			<![CDATA[<>]]> 		NVL(b.Reserved3, ' ')
			OR NVL(a.Reserved4, ' ') 			<![CDATA[<>]]> 		NVL(b.Reserved4, ' ')
			OR NVL(a.Reserved5, ' ') 			<![CDATA[<>]]> 		NVL(b.Reserved5, ' ')
		)
	</insert>
    
    <insert id="insertCompareObjectGroupDELETE" parameterType="cmap">
	    INSERT INTO COVI_SYNCDATA.COMPARE_OBJECT_GROUP (
			  SyncType
			, GroupCode
			, CompanyCode
			, GroupType
			, MemberOf
			, GroupPath
			, RegionCode		
			, DisplayName
			, MultiDisplayName
			, ShortName
			, MultiShortName
			, OUName	
			, OUPath
			, SortKey
			, SortPath
			, IsUse
			, IsDisplay
			, IsMail
			, IsHR
			, PrimaryMail
			, SecondaryMail
			, ManagerCode
			, Description
			, ReceiptUnitCode
			, ApprovalUnitCode
			, Receivable
			, Approvable
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
		SELECT
			  'DELETE' AS SyncType
			, b.GroupCode
			, b.CompanyCode
			, b.GroupType
			, b.MemberOf
			, b.GroupPath
			, b.RegionCode		
			, b.DisplayName
			, b.MultiDisplayName
			, b.ShortName
			, b.MultiShortName
			, b.OUName	
			, b.OUPath
			, b.SortKey
			, b.SortPath
			, b.IsUse
			, b.IsDisplay
			, b.IsMail
			, b.IsHR
			, b.PrimaryMail
			, b.SecondaryMail
			, b.ManagerCode
			, b.Description
			, b.ReceiptUnitCode
			, b.ApprovalUnitCode
			, b.Receivable
			, b.Approvable
			, b.RegistDate
			, b.ModifyDate
			, b.Reserved1
			, b.Reserved2
			, b.Reserved3
			, b.Reserved4
			, b.Reserved5
		FROM SYS_OBJECT_GROUP b
		LEFT JOIN COVI_SYNCDATA.TEMP_OBJECT_GROUP a ON a.GroupCode = b.GroupCode AND a.GroupType = b.GroupType
		INNER JOIN SYS_OBJECT_DOMAIN c ON b.CompanyCode = c.DomainCode
		WHERE a.GroupCode IS NULL 
		AND b.IsHR = 'Y' 
		AND b.GroupType IN ('Dept','JobTitle','JobPosition','JobLevel')
		AND c.OrgSyncType = 'AUTO'
	</insert>
	
	<delete id="deleteNoMemberOf">
    	DELETE FROM COVI_SYNCDATA.COMPARE_OBJECT_GROUP WHERE NVL(SortPath,' ') = ' '
    </delete>
	
	<insert id="insertCompareObjectUserINSERT">
	    INSERT INTO COVI_SYNCDATA.COMPARE_OBJECT_USER (
			  SyncType
			, UserCode
			, LogonID
			, LogonPassword
			, EmpNo
			, DisplayName
			, NickName
			, MultiDisplayName
			, CompanyCode
			, DeptCode
			, JobTitleCode
			, JobPositionCode
			, JobLevelCode
			, RegionCode
			, Address
			, MultiAddress
			, HomePage
			, PhoneNumber
			, Mobile
			, Fax
			, IPPhone
			, UseMessengerConnect
			, SortKey
			, SecurityLevel
			, Description
			, IsUse
			, IsHR
			, IsDisplay
			, EnterDate
			, RetireDate
			, PhotoPath
			, BirthDiv
			, BirthDate
			, UseMailConnect
			, MailAddress
			, ExternalMailAddress
			, ChargeBusiness
			, PhoneNumberInter
			, LanguageCode
			, MobileThemeCode
			, TimeZoneCode
			, InitPortal
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
			, AD_IsUse
			, AD_DisplayName
			, AD_FirstName
			, AD_LastName
			, AD_Initials
			, AD_Office
			, AD_HomePage
			, AD_Country
			, AD_CountryID
			, AD_CountryCode
			, AD_State
			, AD_City
			, AD_StreetAddress
			, AD_PostOfficeBox
			, AD_PostalCode
			, AD_UserAccountControl
			, AD_AccountExpires
			, AD_PhoneNumber
			, AD_HomePhone
			, AD_Pager
			, AD_Mobile
			, AD_Fax
			, AD_Info
			, AD_Title
			, AD_Department
			, AD_Company
			, AD_ManagerCode
			, AD_CN
			, AD_SamAccountName
			, AD_UserPrincipalName
			, EX_IsUse
			, EX_PrimaryMail
			, EX_SecondaryMail
			, EX_StorageServer
			, EX_StorageGroup
			, EX_StorageStore
			, MSN_IsUse
			, MSN_PoolServerName
			, MSN_PoolServerDN
			, MSN_SIPAddress
			, MSN_Anonmy
			, MSN_MeetingPolicyName
			, MSN_MeetingPolicyDN
			, MSN_PhoneCommunication
			, MSN_PBX
			, LicSeq
		)
        SELECT
			  'INSERT' AS SyncType
			, a.UserCode
			, a.LogonID
			, a.LogonPassword
			, a.EmpNo
			, a.DisplayName
			, a.NickName
			, a.MultiDisplayName
			, a.CompanyCode
			, a.DeptCode
			, a.JobTItleCode
			, a.JobPositionCode
			, a.JobLevelCode
			, a.RegionCode	
			, a.Address
			, a.MultiAddress
			, a.HomePage
			, a.PhoneNumber
			, a.Mobile
			, a.Fax
			, a.IPPhone
			, a.UseMessengerConnect
			, a.SortKey
			, a.SecurityLevel
			, a.Description
			, a.IsUse
			, a.IsHR
			, a.IsDisplay
			, REPLACE(a.EnterDate,'-','')
			, REPLACE(a.RetireDate,'-','')
			, a.PhotoPath
			, a.BirthDiv
			, a.BirthDate
			, a.UseMailConnect
			, a.MailAddress
			, a.ExternalMailAddress
			, a.ChargeBusiness
			, a.PhoneNumberInter
			, a.LanguageCode
			, a.MobileThemeCode
			, a.TimeZoneCode
			, a.InitPortal
			, a.RegistDate
			, a.ModifyDate
			, a.Reserved1
			, a.Reserved2
			, a.Reserved3
			, a.Reserved4
			, a.Reserved5
			, a.AD_IsUse
			, a.AD_DisplayName
			, a.AD_FirstName
			, a.AD_LastName
			, a.AD_Initials
			, a.AD_Office
			, a.AD_HomePage
			, a.AD_Country
			, a.AD_CountryID
			, a.AD_CountryCode
			, a.AD_State
			, a.AD_City
			, a.AD_StreetAddress
			, a.AD_PostOfficeBox
			, a.AD_PostalCode
			, a.AD_UserAccountControl
			, a.AD_AccountExpires
			, a.AD_PhoneNumber
			, a.AD_HomePhone
			, a.AD_Pager
			, a.AD_Mobile
			, a.AD_Fax
			, a.AD_Info
			, a.AD_Title
			, a.AD_Department
			, a.AD_Company
			, a.AD_ManagerCode
			, a.AD_CN
			, a.AD_SamAccountName
			, a.AD_UserPrincipalName
			, a.EX_IsUse
			, a.EX_PrimaryMail
			, a.EX_SecondaryMail
			, a.EX_StorageServer
			, a.EX_StorageGroup
			, a.EX_StorageStore
			, a.MSN_IsUse
			, a.MSN_PoolServerName
			, a.MSN_PoolServerDN
			, a.MSN_SIPAddress
			, a.MSN_Anonmy
			, a.MSN_MeetingPolicyName
			, a.MSN_MeetingPolicyDN
			, a.MSN_PhoneCommunication
			, a.MSN_PBX
			, a.LicSeq
		FROM COVI_SYNCDATA.TEMP_OBJECT_USER a
		INNER JOIN SYS_OBJECT_DOMAIN c ON c.DomainCode = a.CompanyCode AND c.OrgSyncType = 'AUTO'
		LEFT JOIN SYS_OBJECT_USER b ON a.UserCode = b.UserCode
		WHERE b.UserCode IS NULL
	</insert>
	
	<insert id="insertCompareObjectUserUPDATE">
	    INSERT INTO COVI_SYNCDATA.COMPARE_OBJECT_USER (
        	  SyncType
			, UserCode
			, LogonID
			, LogonPassword
			, EmpNo
			, DisplayName
			, NickName
			, MultiDisplayName
			, CompanyCode
			, DeptCode
			, JobTitleCode
			, JobPositionCode
			, JobLevelCode
			, RegionCode
			, Address
			, MultiAddress
			, HomePage
			, PhoneNumber
			, Mobile
			, Fax
			, IPPhone
			, UseMessengerConnect
			, SortKey
			, SecurityLevel
			, Description
			, IsUse
			, IsHR
			, IsDisplay	
			, EnterDate
			, RetireDate
			, PhotoPath
			, BirthDiv
			, BirthDate
			, UseMailConnect
			, MailAddress
			, ExternalMailAddress
			, ChargeBusiness
			, PhoneNumberInter
			, LanguageCode
			, MobileThemeCode
			, TimeZoneCode
			, InitPortal
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
			, AD_IsUse
			, AD_DisplayName
			, AD_FirstName
			, AD_LastName
			, AD_Initials
			, AD_Office
			, AD_HomePage
			, AD_Country
			, AD_CountryID
			, AD_CountryCode
			, AD_State
			, AD_City
			, AD_StreetAddress
			, AD_PostOfficeBox
			, AD_PostalCode
			, AD_UserAccountControl
			, AD_AccountExpires
			, AD_PhoneNumber
			, AD_HomePhone
			, AD_Pager
			, AD_Mobile
			, AD_Fax
			, AD_Info
			, AD_Title
			, AD_Department
			, AD_Company
			, AD_ManagerCode
			, AD_CN
			, AD_SamAccountName
			, AD_UserPrincipalName
			, EX_IsUse
			, EX_PrimaryMail
			, EX_SecondaryMail
			, EX_StorageServer
			, EX_StorageGroup
			, EX_StorageStore
			, MSN_IsUse
			, MSN_PoolServerName
			, MSN_PoolServerDN
			, MSN_SIPAddress
			, MSN_Anonmy
			, MSN_MeetingPolicyName
			, MSN_MeetingPolicyDN
			, MSN_PhoneCommunication
			, MSN_PBX
			, LicSeq
		)
		SELECT
			  'UPDATE' AS SyncType
			, b.UserCode
			, b.LogonID
			, b.LogonPassword
			, a.EmpNo
			, a.DisplayName
			, b.NickName
			, a.MultiDisplayName
			, a.CompanyCode
			, a.DeptCode
			, a.JobTItleCode
			, a.JobPositionCode
			, a.JobLevelCode
			, a.RegionCode	
			, b.Address
			, b.MultiAddress
			, b.HomePage
			, a.PhoneNumber
			, a.Mobile
			, a.Fax
			, a.IPPhone
			, b.UseMessengerConnect
			, a.SortKey
			, b.SecurityLevel
			, b.Description
			, a.IsUse
			, b.IsHR
			, a.IsDisplay
			, REPLACE(a.EnterDate,'-','')
			, REPLACE(a.RetireDate,'-','')
			, a.PhotoPath
			, a.BirthDiv
			, a.BirthDate
			, a.UseMailConnect
			, a.MailAddress
			, a.ExternalMailAddress
			, a.ChargeBusiness
			, a.PhoneNumberInter
			, b.LanguageCode
			, b.MobileThemeCode
			, b.TimeZoneCode
			, b.InitPortal
			, b.RegistDate
			, a.ModifyDate
			, a.Reserved1
			, a.Reserved2
			, a.Reserved3
			, a.Reserved4
			, a.Reserved5
			, a.AD_IsUse
			, a.AD_DisplayName
			, a.AD_FirstName
			, a.AD_LastName
			, a.AD_Initials
			, a.AD_Office
			, a.AD_HomePage
			, a.AD_Country
			, a.AD_CountryID
			, a.AD_CountryCode
			, a.AD_State
			, a.AD_City
			, a.AD_StreetAddress
			, a.AD_PostOfficeBox
			, a.AD_PostalCode
			, a.AD_UserAccountControl
			, a.AD_AccountExpires
			, a.AD_PhoneNumber
			, a.AD_HomePhone
			, a.AD_Pager
			, a.AD_Mobile
			, a.AD_Fax
			, a.AD_Info
			, a.AD_Title
			, a.AD_Department
			, a.AD_Company
			, a.AD_ManagerCode
			, a.AD_CN
			, a.AD_SamAccountName
			, a.AD_UserPrincipalName
			, a.EX_IsUse
			, a.EX_PrimaryMail
			, a.EX_SecondaryMail
			, e.EX_StorageServer
			, e.EX_StorageGroup
			, a.EX_StorageStore
			, a.MSN_IsUse
			, a.MSN_PoolServerName
			, a.MSN_PoolServerDN
			, a.MSN_SIPAddress
			, a.MSN_Anonmy
			, a.MSN_MeetingPolicyName
			, a.MSN_MeetingPolicyDN
			, a.MSN_PhoneCommunication
			, a.MSN_PBX
			, a.LicSeq
		FROM COVI_SYNCDATA.TEMP_OBJECT_USER a
		INNER JOIN SYS_OBJECT_USER b ON a.UserCode = b.UserCode
		INNER JOIN SYS_OBJECT_USER_BASEGROUP c ON a.UserCode = c.UserCode
		INNER JOIN SYS_OBJECT_DOMAIN d ON d.DomainCode = a.CompanyCode and d.OrgSyncType = 'AUTO'
		LEFT JOIN SYS_OBJECT_USER_EXCHANGE e ON NVL(a.usercode,' ') = NVL(e.USERID,' ')
		WHERE (
			<!-- 재입사 처리 -->
			    NVL(a.IsUse, ' ') = 'Y'
			AND NVL(a.RetireDate, ' ') = ' '
			AND NVL(b.IsHR, ' ') = 'N'
			AND NVL(b.RetireDate, ' ') != ' '
			AND NVL(c.DeptCode, ' ') LIKE '%RetireDept'				
			AND NVL(c.JobType, ' ') = 'Origin'
		)
		OR (
			    b.IsHR = 'Y'
			AND c.JobType='Origin'
			AND (
				   NVL(a.LogonID, ' ') <![CDATA[<>]]> NVL(b.LogonID, ' ')
				OR NVL(a.EmpNo, ' ') <![CDATA[<>]]> NVL(b.EmpNo, ' ')
				OR NVL(a.DisplayName, ' ') <![CDATA[<>]]> NVL(b.DisplayName, ' ')
				OR NVL(a.CompanyCode,' ') <![CDATA[<>]]> NVL(c.CompanyCode, ' ')			
				OR NVL(a.DeptCode, ' ') <![CDATA[<>]]> NVL(c.DeptCode, ' ')
				OR NVL(a.JobTitleCode, ' ') <![CDATA[<>]]> NVL(c.JobTitleCode, ' ')
				OR NVL(a.JobPositionCode, ' ') <![CDATA[<>]]> NVL(c.JobPositionCode, ' ')
				OR NVL(a.JobLevelCode, ' ') <![CDATA[<>]]> NVL(c.JobLevelCode, ' ')
				OR NVL(a.RegionCode, ' ') <![CDATA[<>]]> NVL(c.RegionCode, ' ')			
				OR NVL(a.SortKey, ' ') <![CDATA[<>]]> NVL(b.SortKey, ' ')					
				OR NVL(a.IsDisplay, ' ') <![CDATA[<>]]> NVL(b.IsDisplay, ' ')
				OR NVL(REPLACE(a.EnterDate,'-',''), ' ') <![CDATA[<>]]> NVL(REPLACE(b.EnterDate,'-',''), ' ')
				OR NVL(REPLACE(a.RetireDate,'-',''), ' ') <![CDATA[<>]]> NVL(REPLACE(b.RetireDate,'-',''), ' ')
				OR NVL(a.PhotoPath, ' ') <![CDATA[<>]]> NVL(b.PhotoPath, ' ')
				OR NVL(a.BirthDiv, ' ') <![CDATA[<>]]> NVL(b.BirthDiv, ' ')
				OR NVL(a.BirthDate, ' ') <![CDATA[<>]]> NVL(b.BirthDate, ' ')
				OR NVL(a.MailAddress, ' ') <![CDATA[<>]]> NVL(b.MailAddress, ' ')
				OR NVL(a.ExternalMailAddress, ' ') <![CDATA[<>]]> NVL(b.ExternalMailAddress, ' ')
				OR NVL(TRIM(a.ChargeBusiness), ' ') <![CDATA[<>]]> NVL(TRIM(b.ChargeBusiness), ' ')
				OR NVL(a.PhoneNumberInter, ' ') <![CDATA[<>]]> NVL(b.PhoneNumberInter, ' ')
				OR NVL(a.PhoneNumber, ' ') <![CDATA[<>]]> NVL(b.PhoneNumber, ' ')
				OR NVL(a.Mobile, ' ') <![CDATA[<>]]> NVL(b.Mobile, ' ')
				OR NVL(a.Fax, ' ') <![CDATA[<>]]> NVL(b.Fax, ' ')
				OR NVL(a.Reserved1, ' ') <![CDATA[<>]]> NVL(b.Reserved1, ' ')
				OR NVL(a.Reserved2, ' ') <![CDATA[<>]]> NVL(b.Reserved2, ' ')
				OR NVL(a.Reserved3, ' ') <![CDATA[<>]]> NVL(b.Reserved3, ' ')
				OR NVL(a.Reserved4, ' ') <![CDATA[<>]]> NVL(b.Reserved4, ' ')
				OR NVL(a.Reserved5, ' ') <![CDATA[<>]]> NVL(b.Reserved5, ' ')
				OR NVL(a.LicSeq, ' ') <![CDATA[<>]]> NVL(b.LicSeq, ' ')
			)
		)
	</insert>
	
	<insert id="insertCompareObjectUserDELETE">
	    INSERT INTO COVI_SYNCDATA.COMPARE_OBJECT_USER (
			  SyncType
			, UserCode
			, LogonID
			, LogonPassword
			, EmpNo
			, DisplayName
			, NickName
			, MultiDisplayName
			, CompanyCode
			, DeptCode
			, JobTitleCode
			, JobPositionCode
			, JobLevelCode
			, RegionCode
			, Address
			, MultiAddress
			, HomePage
			, PhoneNumber
			, Mobile
			, Fax
			, IPPhone
			, UseMessengerConnect
			, SortKey
			, SecurityLevel
			, Description
			, IsUse
			, IsHR
			, IsDisplay
			, EnterDate
			, RetireDate
			, PhotoPath
			, BirthDiv
			, BirthDate
			, UseMailConnect
			, MailAddress
			, ExternalMailAddress
			, ChargeBusiness
			, PhoneNumberInter
			, LanguageCode
			, MobileThemeCode
			, TimeZoneCode
			, InitPortal
			, RegistDate
			, ModifyDate
			, Reserved1
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
			, AD_IsUse
			, AD_DisplayName
			, AD_FirstName
			, AD_LastName
			, AD_Initials
			, AD_Office
			, AD_HomePage
			, AD_Country
			, AD_CountryID
			, AD_CountryCode
			, AD_State
			, AD_City
			, AD_StreetAddress
			, AD_PostOfficeBox
			, AD_PostalCode
			, AD_UserAccountControl
			, AD_AccountExpires
			, AD_PhoneNumber
			, AD_HomePhone
			, AD_Pager
			, AD_Mobile
			, AD_Fax
			, AD_Info
			, AD_Title
			, AD_Department
			, AD_Company
			, AD_ManagerCode
			, AD_CN
			, AD_SamAccountName
			, AD_UserPrincipalName
			, EX_IsUse
			, EX_PrimaryMail
			, EX_SecondaryMail
			, EX_StorageServer
			, EX_StorageGroup
			, EX_StorageStore
			, MSN_IsUse
			, MSN_PoolServerName
			, MSN_PoolServerDN
			, MSN_SIPAddress
			, MSN_Anonmy
			, MSN_MeetingPolicyName
			, MSN_MeetingPolicyDN
			, MSN_PhoneCommunication
			, MSN_PBX
			, LicSeq
		)	
		SELECT
			  'DELETE' AS SyncType
			, b.UserCode
			, b.LogonID
			, b.LogonPassword
			, b.EmpNo
			, b.DisplayName
			, b.NickName
			, b.MultiDisplayName	
			, c.CompanyCode AS CompanyCode
			, (SELECT DomainID FROM SYS_OBJECT_DOMAIN WHERE DomainCode = c.CompanyCode)||'_RetireDept' AS DeptCode
			, '' AS JobTItleCode
			, '' AS JobPositionCode
			, '' AS JobLevelCode
			, '' AS RegionCode		
			, b.Address
			, b.MultiAddress
			, b.HomePage
			, b.PhoneNumber
			, b.Mobile
			, b.Fax
			, b.IPPhone
			, b.UseMessengerConnect
			, b.SortKey
			, b.SecurityLevel
			, b.Description
			, b.IsUse
			, b.IsHR
			, b.IsDisplay
			, REPLACE(b.EnterDate,'-','')
			, REPLACE(b.RetireDate,'-','')
			, b.PhotoPath
			, b.BirthDiv
			, b.BirthDate
			, b.UseMailConnect
			, b.MailAddress
			, b.ExternalMailAddress
			, b.ChargeBusiness
			, b.PhoneNumberInter
			, b.LanguageCode
			, b.MobileThemeCode
			, b.TimeZoneCode
			, b.InitPortal
			, b.RegistDate
			, b.ModifyDate
			, b.Reserved1
			, b.Reserved2
			, b.Reserved3
			, b.Reserved4
			, b.Reserved5
			, NVL(b.AD_IsUse, 'N') AS AD_IsUse
			, e.AD_DisplayName
			, e.AD_FirstName
			, e.AD_LastName
			, e.AD_Initials
			, e.AD_Office
			, e.AD_HomePage
			, e.AD_Country
			, e.AD_CountryID
			, e.AD_CountryCode
			, e.AD_State
			, e.AD_City
			, e.AD_StreetAddress
			, e.AD_PostOfficeBox
			, e.AD_PostalCode
			, e.AD_UserAccountControl
			, e.AD_AccountExpires
			, e.AD_PhoneNumber
			, e.AD_HomePhone
			, e.AD_Pager
			, e.AD_Mobile
			, e.AD_Fax
			, e.AD_Info
			, e.AD_Title
			, e.AD_Department
			, e.AD_Company
			, e.AD_ManagerCode
			, e.AD_CN
			, e.AD_SamAccountName
			, e.AD_UserPrincipalName
			, NVL(b.EX_IsUse, 'N') AS EX_IsUse
			, f.EX_PrimaryMail
			, f.EX_SecondaryMail
			, f.EX_StorageServer
			, f.EX_StorageGroup
			, f.EX_StorageStore
			, NVL(b.MSN_IsUse, 'N') AS MSN_IsUse
			, g.MSN_PoolServerName
			, g.MSN_PoolServerDN
			, g.MSN_SIPAddress
			, g.MSN_Anonmy
			, g.MSN_MeetingPolicyName
			, g.MSN_MeetingPolicyDN
			, g.MSN_PhoneCommunication
			, g.MSN_PBX
			, b.LicSeq
		FROM SYS_OBJECT_USER b 
		LEFT JOIN COVI_SYNCDATA.TEMP_OBJECT_USER a ON a.UserCode = b.UserCode
		INNER JOIN SYS_OBJECT_USER_BASEGROUP c ON b.UserCode = c.UserCode	
		INNER JOIN SYS_OBJECT_DOMAIN d ON c.CompanyCode = d.DomainCode
		LEFT JOIN SYS_OBJECT_USER_AD e ON NVL(a.UserCode,' ') = NVL(e.UserID,' ')
		LEFT JOIN SYS_OBJECT_USER_EXCHANGE f ON NVL(a.UserCode,' ') = NVL(f.UserID,' ')
		LEFT JOIN SYS_OBJECT_USER_MESSENGER g ON NVL(a.UserCode,' ') = NVL(g.UserID,' ')
		WHERE a.UserCode IS NULL 
		AND b.IsHR = 'Y'
		AND c.JobType = 'Origin'
		AND d.OrgSyncType = 'AUTO'
	</insert>
    
	<insert id="insertCompareObjectAddJobINSERT">
	    INSERT INTO COVI_SYNCDATA.COMPARE_OBJECT_ADDJOB (
			  SyncType
			, Seq
			, UserCode
			, JobType
			, CompanyCode
			, DeptCode
			, JobTitleCode
			, JobPositionCode
			, JobLevelCode
			, RegionCode	
			, SortKey		
			, IsHR
			, RegistDate
			, ModifyDate
			, Reserved1 	
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
		SELECT
			  'INSERT' AS SyncType
			, a.Seq
			, a.UserCode
			, a.JobType
			, a.CompanyCode
			, a.DeptCode
			, a.JobTitleCode
			, a.JobPositionCode
			, a.JobLevelCode
			, a.RegionCode
			, a.SortKey
			, a.IsHR
			, a.RegistDate
			, a.ModifyDate
			, a.Reserved1
			, a.Reserved2
			, a.Reserved3
			, a.Reserved4
			, a.Reserved5
		FROM COVI_SYNCDATA.TEMP_OBJECT_ADDJOB a
		INNER JOIN SYS_OBJECT_DOMAIN c ON c.DomainCode = a.CompanyCode
		LEFT JOIN SYS_OBJECT_USER_BASEGROUP b ON NVL(a.UserCode, ' ') = NVL(b.UserCode, ' ')
			AND NVL(a.CompanyCode, ' ') = NVL(b.CompanyCode, ' ')
			AND NVL(a.DeptCode, ' ') = NVL(b.DeptCode, ' ')
			AND NVL(a.JobTitleCode, ' ') = NVL(b.JobTitleCode, ' ')
			AND NVL(a.JobPositionCode, ' ') = NVL(b.JobPositionCode, ' ')
			AND NVL(a.JobLevelCode, ' ') = NVL(b.JobLevelCode, ' ')
			AND b.JobType = 'AddJob'
		WHERE b.UserCode IS NULL
		AND c.ORGSYNCTYPE = 'AUTO'
	</insert>
	
	<insert id="insertCompareObjectAddJobUPDATE">
	    INSERT INTO COVI_SYNCDATA.COMPARE_OBJECT_ADDJOB (
			  SyncType
			, Seq
			, UserCode
			, JobType
			, CompanyCode
			, DeptCode
			, JobTitleCode
			, JobPositionCode
			, JobLevelCode
			, RegionCode	
			, SortKey		
			, IsHR
			, RegistDate
			, ModifyDate
			, Reserved1 	
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
		SELECT
			  'UPDATE' AS SyncType
			, a.Seq
			, a.UserCode
			, a.JobType
			, a.CompanyCode
			, a.DeptCode
			, a.JobTitleCode
			, a.JobPositionCode
			, a.JobLevelCode
			, a.RegionCode
			, a.SortKey
			, a.IsHR
			, a.RegistDate
			, a.ModifyDate
			, a.Reserved1
			, a.Reserved2
			, a.Reserved3
			, a.Reserved4
			, a.Reserved5
		FROM COVI_SYNCDATA.TEMP_OBJECT_ADDJOB a
		INNER JOIN SYS_OBJECT_USER_BASEGROUP b ON a.UserCode = b.UserCode
		INNER JOIN SYS_OBJECT_DOMAIN c ON c.DomainCode = a.CompanyCode
		WHERE b.JobType ='AddJob'
		AND b.IsHR = 'Y'
		AND c.OrgSyncType = 'AUTO'
		AND (
			NVL(a.JobTitleCode, ' ') <![CDATA[<>]]> NVL(b.JobTitleCode, ' ')
			OR NVL(a.JobPositionCode, ' ') <![CDATA[<>]]> NVL(b.JobPositionCode, ' ')
			OR NVL(a.JobLevelCode, ' ') <![CDATA[<>]]> NVL(b.JobLevelCode, ' ')
			OR NVL(a.RegionCode, ' ') <![CDATA[<>]]> NVL(b.RegionCode, ' ')			
			OR NVL(a.SortKey, ' ') <![CDATA[<>]]> NVL(b.SortKey, ' ')
			OR NVL(a.Reserved1, ' ') <![CDATA[<>]]> NVL(b.Reserved1, ' ')
			OR NVL(a.Reserved2, ' ') <![CDATA[<>]]> NVL(b.Reserved2, ' ')
			OR NVL(a.Reserved3, ' ') <![CDATA[<>]]> NVL(b.Reserved3, ' ')
			OR NVL(a.Reserved4, ' ') <![CDATA[<>]]> NVL(b.Reserved4, ' ')
			OR NVL(a.Reserved5, ' ') <![CDATA[<>]]> NVL(b.Reserved5, ' ')
		)
	</insert>
	
	<insert id="insertCompareObjectAddJobDELETE">
	    INSERT INTO COVI_SYNCDATA.COMPARE_OBJECT_ADDJOB (
			  SyncType
			, Seq
			, UserCode
			, JobType 		
			, CompanyCode
			, DeptCode
			, JobTitleCode
			, JobPositionCode
			, JobLevelCode
			, RegionCode	
			, SortKey		
			, IsHR		
			, RegistDate
			, ModifyDate
			, Reserved1 	
			, Reserved2
			, Reserved3
			, Reserved4
			, Reserved5
		)
		SELECT
			  'DELETE' AS SyncType
			, b.Seq
			, b.UserCode
			, b.JobType
			, b.CompanyCode
			, b.DeptCode
			, b.JobTitleCode
			, b.JobPositionCode
			, b.JobLevelCode
			, b.RegionCode
			, b.SortKey
			, b.IsHR
			, b.RegistDate
			, b.ModifyDate
			, b.Reserved1
			, b.Reserved2
			, b.Reserved3
			, b.Reserved4
			, b.Reserved5
		FROM COVI_SYNCDATA.TEMP_OBJECT_ADDJOB a
		RIGHT JOIN SYS_OBJECT_USER_BASEGROUP b ON NVL(a.UserCode, ' ') = NVL(b.UserCode, ' ')
			AND NVL(a.CompanyCode, ' ') = NVL(b.CompanyCode, ' ')
			AND NVL(a.DeptCode, ' ') = NVL(b.DeptCode, ' ')
			AND NVL(a.JobTitleCode, ' ') = NVL(b.JobTitleCode, ' ')
			AND NVL(a.JobPositionCode, ' ') = NVL(b.JobPositionCode, ' ')
			AND NVL(a.JobLevelCode, ' ') = NVL(b.JobLevelCode, ' ')
		INNER JOIN SYS_OBJECT_DOMAIN c ON c.DomainCode = b.CompanyCode
		WHERE a.UserCode IS NULL
		AND b.JobType ='AddJob'
		AND b.IsHR = 'Y'
		AND c.OrgSyncType = 'AUTO'
	</insert>
	
	<!-- select pathData by groupCode -->
	<select id="selectGroupPath" parameterType="cmap" resultType="cmap">
 	    SELECT 
 	    	  GroupPath AS "GroupPath"
 	    	, SortPath AS "SortPath"
 	    	, OUPath AS "OUPath"
 	    	, (SELECT GroupID FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode}) AS "CompanyID"
 	    FROM SYS_OBJECT_GROUP
 	    WHERE GroupCode = #{MemberOf}
 	</select>
    
	<select id="selectDupLogonIDCnt" parameterType="cmap" resultType="java.lang.Long">
 	    SELECT	COUNT(*) 
 	    FROM 	sys_object_user
 	    WHERE 	usercode !=#{UserCode}
 	    AND 	logonid = #{LogonID}
 	</select>
    <!-- insert to sys_object  -->
	<insert id="insertObject" parameterType="cmap">
    	INSERT INTO SYS_OBJECT (
			  ObjectCode
			, ObjectType
			, IsUse
			, IsSync
			, Description
			, RegistDate
		) 
		VALUES (
			  #{ObjectCode}
			, #{ObjectType}
			, #{IsUse}
			, #{IsSync}
			, #{Description}
			, SYSDATE
		)
	</insert>
	
	<!-- update to sys_object  -->
	<update id="updateObject" parameterType="cmap">
    	UPDATE SYS_OBJECT 
    	SET
			  IsUse = #{IsUse}
			, Description = #{Description}
			<if test="ObjectType != null and ObjectType != ''">
	    		, ObjectType = #{ObjectType}
	    	</if>
	    	<choose>
			<when test='IsUse != null and IsUse == "Y"'>
				, DeleteDate = null
			</when>
			<when test='IsUse != null and IsUse == "N"'>
				, DeleteDate = SYSDATE
			</when>
			</choose>
    	WHERE ObjectCode = #{ObjectCode}
	</update>
	
	<!-- delete to sys_object -->
	<update id="deleteObject" parameterType="cmap">
    	UPDATE SYS_OBJECT
    	SET 
    		  IsUse = 'N'
    		, IsSync = 'N'
   			, DeleteDate = SYSDATE
    	WHERE ObjectCode = #{ObjectCode}
	</update>
	
	<!-- DOMAIN -->
	<!-- 회사목록 조회 : 요청받은 DomainID를 최상위로 위치하도록 조회 -->
    <select id="selectDomainList" parameterType="cmap" resultType="cmap">
		SELECT 
		 	  A.optionValue AS "optionValue"
			, A.optionText AS "optionText"
		FROM (  
			SELECT
				  dn.GroupCode AS optionValue
				, FN_BASEGETDICTIONARY_S('', dn.MultiDisplayName) AS optionText
				, '1' AS DNSORT
				, gr.SortKey
			FROM SYS_OBJECT_GROUP gr
			INNER JOIN SYS_OBJECT_GROUP dn ON gr.CompanyCode = dn.GroupCode
			WHERE gr.GroupType = 'Company'
			<if test="domainCode != null and domainCode != ''">
				AND dn.GroupCode = #{domainCode}
			</if>
			<if test="domainCode == null and domainCode == ''">
				AND dn.GroupCode =  '' 
			</if>
			<if test="assignedDomain.size() > 0" >
				AND dn.GroupCode IN 
				<foreach item="item" index="index" collection="assignedDomain" open="(" close=")" separator=",">
					#{item}
				</foreach>
			</if>
			UNION ALL 
	        SELECT
				  dn.GroupCode AS optionValue
				, FN_BASEGETDICTIONARY_S('', dn.MultiDisplayName) AS optionText
				, '2' AS DNSORT
				, gr.SortKey
			FROM SYS_OBJECT_GROUP gr
			INNER JOIN SYS_OBJECT_GROUP dn ON gr.CompanyCode = dn.GroupCode
			WHERE gr.GroupType = 'Company'
			<if test="domainCode != null and domainCode != ''">
				AND dn.GroupCode != #{domainCode}
			</if>
			<if test="domainCode == null and domainCode == ''">
				AND dn.GroupCode !=  '' 
			</if>
			<if test="assignedDomain.size() > 0" >
				AND dn.GroupCode IN 
				<foreach item="item" index="index" collection="assignedDomain" open="(" close=")" separator=",">
					#{item}
				</foreach>
			</if>
		)A 
		ORDER BY (A.DNSORT+0) ASC, 
		<if test="domainCode != null and domainCode != ''">
			A.optionValue DESC,
		</if>
		(A.SortKey+0) ASC 
    </select>
    
    <!-- 회사 드롭다운 목록 가져오기 -->
    <select id="selectAvailableCompanyList" parameterType="cmap" resultType="cmap">
		SELECT
			  DomainCode AS CompanyCode
			, MultiDisplayName AS CompanyName
			, domainID AS CompanyID
	    FROM SYS_OBJECT_DOMAIN
	    WHERE IsUse = 'Y'
	    <if test="assignedDomain.size() > 0 and assignedDomain.indexOf('ORGROOT') &lt; 0">
	    	AND DomainCode IN 
				<foreach item="item" index="index" collection="assignedDomain" open="(" close=")" separator=",">
		           	#{item}
		   		</foreach>
	    </if>
	    ORDER BY (sortKey+0) ASC
	</select>
	
	<!-- USER -->
	<select id="selectUserInfo" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT 
			  ur.LicSeq AS "LicSeq"
		    , ur.UserID AS "UserID"
			, ur.UserCode AS "UserCode"
			, ur.LogonID AS "LogonID"
			, ur.EmpNo AS "EmpNo"
			, ur.DisplayName AS "DisplayName"
			, ur.MultiDisplayName AS "MultiDisplayName"
			, ur.NickName AS "NickName"
			, ur.MultiAddress AS "MultiAddress"
			, ur.HomePage AS "HomePage"
			, ur.PhoneNumber AS "PhoneNumber"
			, ur.Mobile AS "Mobile"
			, ur.FAX AS "FAX" 
			, ur.IPPhone AS "IPPhone" 
			, ur.UseMessengerConnect AS "UseMessengerConnect" 
			, ur.SortKey AS "SortKey" 
			, ur.SecurityLevel AS "SecurityLevel" 
			, ur.Description AS "Description" 
			, ur.IsUse AS "IsUse" 
			, ur.IsHR AS "IsHR" 
			, ur.IsDisplay AS "IsDisplay" 
			, ur.EnterDate AS "EnterDate" 
			, ur.RetireDate AS "RetireDate" 
			, ur.PhotoPath AS "PhotoPath" 
			, ur.BirthDiv  AS "BirthDiv" 
			, ur.BirthDate AS "BirthDate" 
			, ur.UseMailConnect AS "UseMailConnect" 
			, ur.MailAddress AS "MailAddress" 
			, ur.ExternalMailAddress AS "ExternalMailAddress" 
			, ur.ChargeBusiness AS "ChargeBusiness"
			, ur.PhoneNumberInter AS "PhoneNumberInter" 
			, ur.LanguageCode AS "LanguageCode" 
			, ur.Reserved1 AS "Reserved1"
			, ur.Reserved2 AS "Reserved2" 
			, ur.Reserved3 AS "Reserved3" 
			, ur.Reserved4 AS "Reserved4"
			, ur.Reserved5 AS "Reserved5" 
			, bg.CompanyCode AS "CompanyCode" 
			, bg.MultiCompanyName AS "MultiCompanyName" 
			, bg.DeptCode AS "DeptCode" 
			, bg.DeptName AS "DeptName"
			, bg.MultiDeptName AS "MultiDeptName" 
			, bg.RegionCode AS "RegionCode" 
			, bg.MultiRegionName AS "MultiRegionName" 
			, bg.JobPositionCode AS "JobPositionCode" 
			, bg.JobPositionName AS "JobPositionName" 
			, bg.JobTitleCode AS "JobTitleCode" 
			, bg.JobTitleName AS "JobTitleName" 
			, bg.JobLevelCode AS "JobLevelCode" 
			, bg.JobLevelName AS "JobLevelName" 
			, apv.UseDeputy AS "UseDeputy"
			, apv.DeputyOption AS "DeputyOption"
			, apv.DeputyCode AS "DeputyCode" 
			, apv.DeputyName AS "DeputyName" 
			, apv.DeputyFromDate AS "DeputyFromDate" 
			, apv.DeputyToDate AS "DeputyToDate" 
			, apv.AlertConfig AS "AlertConfig" 
			, apv.ApprovalUnitCode AS "ApprovalUnitCode" 
			, (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = apv.ApprovalUnitCode) AS ApprovalUnitName
			, apv.ReceiptUnitCode AS "ReceiptUnitCode" 
			, (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = apv.ReceiptUnitCode) AS ReceiptUnitName
			, apv.UseApprovalMessageBoxView AS "UseApprovalMessageBoxView"
			, apv.UseMobile AS "UseMobile"
			, apv.DeputyOption AS "DeputyOption"
			, dn.DomainID AS "DomainID"
			, ur.AD_ISUSE
			, ur.EX_ISUSE
			, ur.MSN_ISUSE
			, ur.CountryID AS "CountryID"
			, ur.CountryCode AS "CountryCode"
			, ur.CityState AS "CityState"
			, ur.City AS "City"
			, ur.PostOfficeBox AS "PostOfficeBox"
			, ur.OfficeAddress AS "OfficeAddress"
			, (SELECT MultiDisplayName FROM SYS_OBJECT_USER WHERE UserCode = AD.AD_MANAGERCODE) AS ManagerName
			, NVL(urif.CheckUserIP, 'N') AS CheckUserIP
   			, urif.StartIP AS "StartIP"
          	, urif.EndIP AS "EndIP"
			, AD.AD_DISPLAYNAME
			, AD.AD_FIRSTNAME
			, AD.AD_LASTNAME
			, AD.AD_INITIALS
			, AD.AD_OFFICE
			, AD.AD_HOMEPAGE
			, AD.AD_COUNTRY
			, AD.AD_COUNTRYID
			, AD.AD_COUNTRYCODE
			, AD.AD_STATE
			, AD.AD_CITY
			, AD.AD_STREETADDRESS
			, AD.AD_POSTOFFICEBOX
			, AD.AD_POSTALCODE
			, AD.AD_USERACCOUNTCONTROL
			, AD.AD_ACCOUNTEXPIRES
			, AD.AD_PHONENUMBER 
			, AD.AD_HOMEPHONE 
			, AD.AD_PAGER 
			, AD.AD_MOBILE
			, AD.AD_FAX 
			, AD.AD_IPPHONE
			, AD.AD_INFO
			, AD.AD_TITLE
			, AD.AD_DEPARTMENT
			, AD.AD_COMPANY
			, AD.AD_MANAGERCODE 
			, AD.AD_CN
			, AD.AD_SamAccountName AS "AD_SamAccountName"
			, AD.AD_UserPrincipalName AS AD_UserPrincipalName
			, EXCH.*
			, MSN.*
		FROM SYS_OBJECT_USER ur
		LEFT JOIN SYS_OBJECT_USER_BASEGROUP bg ON ur.UserCode = bg.UserCode AND bg.JobType = 'Origin'
		LEFT JOIN SYS_OBJECT_USER_INFO urif ON ur.UserCode = urif.UserCode	
		LEFT JOIN SYS_OBJECT_DOMAIN dn ON bg.CompanyCode = dn.DomainCode
		LEFT JOIN SYS_OBJECT_USER_APPROVAL apv ON ur.UserCode = apv.UserCode
		LEFT JOIN SYS_OBJECT_USER_AD AD ON ur.UserCode = AD.USERID
		LEFT JOIN SYS_OBJECT_USER_EXCHANGE EXCH ON ur.UserCode = EXCH.USERID
		LEFT JOIN SYS_OBJECT_USER_MESSENGER MSN ON ur.UserCode = MSN.USERID
		WHERE ur.UserCode = #{UserCode}
		]]>
	</select>  
	
	<select id="selectUserInfoList" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT 
		      ur.UserID AS "UserID"
			, ur.UserCode AS "UserCode"
			, ur.LogonID AS "LogonID"
			, ur.EmpNo AS "EmpNo"
			, ur.MultiDisplayName AS "MultiDisplayName"
			, ur.NickName AS "NickName"
			, ur.MultiAddress AS "MultiAddress"
			, ur.HomePage AS "HomePage"
			, ur.PhoneNumber AS "PhoneNumber"
			, ur.Mobile AS "Mobile"
			, ur.FAX AS "FAX" 
			, ur.IPPhone AS "IPPhone" 
			, ur.UseMessengerConnect AS "UseMessengerConnect" 
			, ur.SortKey AS "SortKey" 
			, ur.SecurityLevel AS "SecurityLevel" 
			, ur.Description AS "Description" 
			, ur.IsUse AS "IsUse" 
			, ur.IsHR AS "IsHR" 
			, ur.IsDisplay AS "IsDisplay" 
			, ur.EnterDate AS "EnterDate" 
			, ur.RetireDate AS "RetireDate" 
			, ur.PhotoPath AS "PhotoPath" 
			, ur.BirthDiv  AS "BirthDiv" 
			, ur.BirthDate AS "BirthDate" 
			, ur.UseMailConnect AS "UseMailConnect" 
			, ur.MailAddress AS "MailAddress" 
			, ur.ExternalMailAddress AS "ExternalMailAddress" 
			, ur.PhoneNumberInter AS "PhoneNumberInter" 
			, ur.Reserved1 AS "Reserved1"
			, ur.Reserved2 AS "Reserved2" 
			, ur.Reserved3 AS "Reserved3" 
			, ur.Reserved4 AS "Reserved4"
			, ur.Reserved5 AS "Reserved5" 
			, bg.CompanyCode AS "CompanyCode" 
			, bg.MultiCompanyName AS "MultiCompanyName" 
			, bg.DeptCode AS "DeptCode" 
			, bg.MultiDeptName AS "MultiDeptName" 
			, bg.RegionCode AS "RegionCode" 
			, bg.MultiRegionName AS "MultiRegionName" 
			, bg.JobPositionCode AS "JobPositionCode" 
			, bg.JobPositionName AS "JobPositionName" 
			, bg.JobTitleCode AS "JobTitleCode" 
			, bg.JobTitleName AS "JobTitleName" 
			, bg.JobLevelCode AS "JobLevelCode" 
			, bg.JobLevelName AS "JobLevelName" 
			, apv.UseDeputy AS "UseDeputy" 
			, apv.DeputyCode AS "DeputyCode" 
			, apv.DeputyName AS "DeputyName" 
			, apv.DeputyFromDate AS "DeputyFromDate" 
			, apv.DeputyToDate AS "DeputyToDate" 
			, apv.AlertConfig AS "AlertConfig" 
			, apv.ApprovalUnitCode AS "ApprovalUnitCode" 
			, (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = apv.ApprovalUnitCode) AS ApprovalUnitName
			, apv.ReceiptUnitCode AS "ReceiptUnitCode" 
			, (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = apv.ReceiptUnitCode) AS ReceiptUnitName
			, apv.UseApprovalMessageBoxView AS "UseApprovalMessageBoxView"
			, apv.UseMobile AS "UseMobile"
			, ur.AD_ISUSE
			, ur.EX_ISUSE
			, ur.MSN_ISUSE
			, AD.AD_DISPLAYNAME
			, AD.AD_FIRSTNAME
			, AD.AD_LASTNAME
			, AD.AD_INITIALS
			, AD.AD_OFFICE
			, AD.AD_HOMEPAGE
			, AD.AD_COUNTRY
			, AD.AD_COUNTRYID
			, AD.AD_COUNTRYCODE
			, AD.AD_STATE
			, AD.AD_CITY
			, AD.AD_STREETADDRESS
			, AD.AD_POSTOFFICEBOX
			, AD.AD_POSTALCODE
			, AD.AD_USERACCOUNTCONTROL
			, AD.AD_ACCOUNTEXPIRES
			, AD.AD_PHONENUMBER 
			, AD.AD_HOMEPHONE 
			, AD.AD_PAGER 
			, AD.AD_MOBILE
			, AD.AD_FAX 
			, AD.AD_IPPHONE
			, AD.AD_INFO
			, AD.AD_TITLE
			, AD.AD_DEPARTMENT
			, AD.AD_COMPANY
			, AD.AD_MANAGERCODE 
			, AD.AD_CN
			, AD.AD_SamAccountName AS "AD_SamAccountName"
			, AD.AD_UserPrincipalName AS AD_UserPrincipalName
			, EXCH.*
			, MSN.*
			, gr.OUPath AS "OUPath"
        	, gr.OUName AS "OUName"
        	, dn.DomainID As "DomainID"
		FROM SYS_OBJECT_USER ur
		INNER JOIN SYS_OBJECT_USER_BASEGROUP bg ON ur.UserCode = bg.UserCode AND bg.JobType = 'Origin'
		INNER JOIN SYS_OBJECT_GROUP gr ON bg.DeptCode = gr.GroupCode
		INNER JOIN SYS_OBJECT_DOMAIN dn ON bg.CompanyCode = dn.DomainCode
		LEFT JOIN SYS_OBJECT_USER_APPROVAL apv ON ur.UserCode = apv.UserCode
		LEFT JOIN SYS_OBJECT_USER_AD AD ON ur.UserCode = AD.USERID
		LEFT JOIN SYS_OBJECT_USER_EXCHANGE EXCH ON ur.UserCode = EXCH.USERID
		LEFT JOIN SYS_OBJECT_USER_MESSENGER MSN ON ur.UserCode = MSN.USERID
		WHERE ur.UserCode IN
		]]>
		<foreach collection="TargetID" item="item"  separator="," open="(" close=")">
		    #{item}
		</foreach>
	</select>
	
	<select id="selectUserInfoByAdmin" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT 
			  ur.UserID AS "UserID"
			, ur.UserCode AS "UserCode"
			, ur.LogonID AS "LogonID"
			, ur.EmpNo AS "EmpNo"
			, ur.MultiDisplayName AS "MultiDisplayName"
			, ur.NickName AS "NickName"
			, ur.MultiAddress AS "MultiAddress"
			, ur.HomePage AS "HomePage"
			, ur.PhoneNumber AS "PhoneNumber"
			, ur.Mobile AS "Mobile"
			, ur.FAX AS "FAX" 
			, ur.IPPhone AS "IPPhone" 
			, ur.UseMessengerConnect AS "UseMessengerConnect" 
			, ur.SortKey AS "SortKey" 
			, ur.SecurityLevel AS "SecurityLevel" 
			, ur.Description AS "Description" 
			, ur.IsUse AS "IsUse" 
			, ur.IsHR AS "IsHR" 
			, ur.IsDisplay AS "IsDisplay" 
			, ur.EnterDate AS "EnterDate" 
			, ur.RetireDate AS "RetireDate" 
			, ur.PhotoPath AS "PhotoPath" 
			, ur.BirthDiv  AS "BirthDiv" 
			, ur.BirthDate AS "BirthDate" 
			, ur.UseMailConnect AS "UseMailConnect" 
			, ur.MailAddress AS "MailAddress" 
			, ur.ExternalMailAddress AS "ExternalMailAddress" 
			, ur.PhoneNumberInter AS "PhoneNumberInter" 
			, ur.Reserved1 AS "Reserved1"
			, ur.Reserved2 AS "Reserved2" 
			, ur.Reserved3 AS "Reserved3" 
			, ur.Reserved4 AS "Reserved4"
			, ur.Reserved5 AS "Reserved5" 
			, bg.CompanyCode AS "CompanyCode" 
			, bg.MultiCompanyName AS "MultiCompanyName" 
			, bg.DeptCode AS "DeptCode" 
			, bg.MultiDeptName AS "MultiDeptName" 
			, bg.RegionCode AS "RegionCode" 
			, bg.MultiRegionName AS "MultiRegionName" 
			, bg.JobPositionCode AS "JobPositionCode" 
			, bg.JobPositionName AS "JobPositionName" 
			, bg.JobTitleCode AS "JobTitleCode" 
			, bg.JobTitleName AS "JobTitleName" 
			, bg.JobLevelCode AS "JobLevelCode" 
			, bg.JobLevelName AS "JobLevelName" 
			, apv.UseDeputy AS "UseDeputy" 
			, apv.DeputyCode AS "DeputyCode" 
			, apv.DeputyName AS "DeputyName" 
			, apv.DeputyFromDate AS "DeputyFromDate" 
			, apv.DeputyToDate AS "DeputyToDate" 
			, apv.AlertConfig AS "AlertConfig" 
			, apv.ApprovalUnitCode AS "ApprovalUnitCode" 
			, (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = apv.ApprovalUnitCode) AS ApprovalUnitName
			, apv.ReceiptUnitCode AS "ReceiptUnitCode" 
			, (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = apv.ReceiptUnitCode) AS ReceiptUnitName
			, apv.UseApprovalMessageBoxView AS "UseApprovalMessageBoxView"
			, apv.UseMobile AS "UseMobile"
			, ur.AD_ISUSE
			, ur.EX_ISUSE
			, ur.MSN_ISUSE
			, AD.AD_DISPLAYNAME
			, AD.AD_FIRSTNAME
			, AD.AD_LASTNAME
			, AD.AD_INITIALS
			, AD.AD_OFFICE
			, AD.AD_HOMEPAGE
			, AD.AD_COUNTRY
			, AD.AD_COUNTRYID
			, AD.AD_COUNTRYCODE
			, AD.AD_STATE
			, AD.AD_CITY
			, AD.AD_STREETADDRESS
			, AD.AD_POSTOFFICEBOX
			, AD.AD_POSTALCODE
			, AD.AD_USERACCOUNTCONTROL
			, AD.AD_ACCOUNTEXPIRES
			, AD.AD_PHONENUMBER 
			, AD.AD_HOMEPHONE 
			, AD.AD_PAGER 
			, AD.AD_MOBILE
			, AD.AD_FAX 
			, AD.AD_IPPHONE
			, AD.AD_INFO
			, AD.AD_TITLE
			, AD.AD_DEPARTMENT
			, AD.AD_COMPANY
			, AD.AD_MANAGERCODE 
			, AD.AD_CN
			, AD.AD_SamAccountName AS "AD_SamAccountName"
			, AD.AD_UserPrincipalName AS AD_UserPrincipalName
            , EXCH.*
            , MSN.*
            , AD.USERID As "AD_USERID"
            , EXCH.USERID As "EX_USERID"
            , MSN.USERID As "MSN_USERID"
            , ur.LOGONPASSWORD  As "LOGONPASSWORD"
		FROM SYS_OBJECT_USER ur
		LEFT JOIN SYS_OBJECT_USER_BASEGROUP bg ON ur.UserCode = bg.UserCode AND bg.JobType = 'Origin'
		LEFT JOIN SYS_OBJECT_USER_APPROVAL apv ON ur.UserCode = apv.UserCode
		LEFT JOIN SYS_OBJECT_USER_AD AD ON ur.UserCode = AD.USERID
		LEFT JOIN SYS_OBJECT_USER_EXCHANGE EXCH ON ur.UserCode = EXCH.USERID
		LEFT JOIN SYS_OBJECT_USER_MESSENGER MSN ON ur.UserCode = MSN.USERID
		WHERE ur.UserCode = #{UserCode}
		]]>
	</select>
    
    <select id="selectUserListCnt" parameterType="cmap" resultType="java.lang.Long">
		<![CDATA[
		SELECT COUNT(ur.UserCode)
		FROM SYS_OBJECT_USER  ur
		LEFT JOIN SYS_OBJECT_USER_BASEGROUP bg ON ur.UserCode = bg.UserCode
		]]>
		<if test="hasChildGroup !=null and hasChildGroup.equalsIgnoreCase('Y') and deptCode != null  and deptCode != ''">
			LEFT JOIN SYS_OBJECT_GROUP gr ON bg.DeptCode = gr.GroupCode 
		</if>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			NVL(bg.JobType,'Origin') = 'Origin'
			<if test="companyCode != null and companyCode != 'ORGROOT'">
				AND bg.CompanyCode = #{companyCode}    
			</if>
			<choose>
				<when test="hasChildGroup !=null and hasChildGroup.equalsIgnoreCase('Y') and deptCode != null  and deptCode != ''">
					AND ';'||gr.GroupPath LIKE '%;'||#{deptCode}||';%'
				</when>
				<when test="deptCode != null">
					AND bg.DeptCode = #{deptCode}
				</when>
			</choose>
			<if test="IsUse != null">
				AND ur.IsUse = #{IsUse}
			</if>
			<if test="searchType == 'UserName' and searchText != null">
				AND ur.MultiDisplayName LIKE '%'||#{searchText}||'%'
			</if>
			<if test="searchType == 'UserCode' and searchText != null">
				AND ur.UserCode = #{searchText} 
			</if>
			<if test="searchType == 'DeptName' and searchText != null">
				AND bg.MultiDeptName LIKE '%'||#{searchText}||'%'
			</if>
			<if test="searchType == 'JobPositionName' and searchText != null">
				AND bg.MultiJobPositionName LIKE '%'||#{searchText}||'%'
			</if>
			<if test="searchType == 'JobTitleName' and searchText != null">
				AND bg.MultiJobTitleName LIKE '%'||#{searchText}||'%'
			</if>
			<if test="searchType == 'JobLevelName' and searchText != null">
				AND bg.MultiJobLevelName LIKE '%'||#{searchText}||'%'
			</if>
		</trim> 
	</select>
	
	<select id="selectUserList" parameterType="cmap" resultType="cmap">
        <include refid="oracle.include.pagingHeader" />
		SELECT     
			  B.itemType AS "itemType"
			, B.UserID AS "UserID"
			, B.UserCode AS "UserCode"
			, B.DisplayName AS "DisplayName"
			, B.MultiDisplayName AS "MultiDisplayName" 
			, B.JobLevel AS "JobLevel"
			, B.JobTitle AS "JobTitle"
			, B.JobPosition AS "JobPosition"
			, B.JobLevelCode AS "JobLevelCode"
			, B.JobTitleCode AS "JobTitleCode"
			, B.JobPositionCode AS "JobPositionCode"
			, B.JobLevelName AS "JobLevelName"
			, B.JobTitleName AS "JobTitleName"
			, B.JobPositionName AS "JobPositionName"
			, B.Mobile AS "Mobile"
			, B.MailAddress AS "MailAddress"
			, B.PhoneNumber AS "PhoneNumber"
			, B.EmpNo AS "EmpNo"
			, B.DeptCode AS "DeptCode"
			, B.DeptName AS "DeptName"
			, B.MultiDeptName AS "MultiDeptName"
			, B.CompanyCode AS "CompanyCode"
			, B.CompanyName AS "CompanyName"
			, B.MultiCompanyName AS "MultiCompanyName"
			, B.JobType AS "JobType"
			, B.PhoneNumberInter AS "PhoneNumberInter"
			, B.IsUse AS "IsUse"
			, B.IsDisplay AS "IsDisplay"
			, B.IsHR AS "IsHR"
			, B.SortKey AS "SortKey"
		FROM (
			<![CDATA[
			SELECT
				  'user' AS itemType
				, ur.UserID 
				, ur.UserCode 
				, ur.DisplayName 
				, ur.MultiDisplayName
				, NVL(bg.JobLevelCode||'&'||bg.MultiJobLevelName, ' ') AS JobLevel
				, NVL(bg.JobTitleCode||'&'||bg.MultiJobTitleName, ' ')  AS JobTitle
				, NVL(bg.JobPositionCode||'&'||bg.MultiJobPositionName, ' ') AS JobPosition
				, bg.JobLevelCode
				, bg.JobTitleCode
				, bg.JobPositionCode
				, bg.JobLevelName
				, bg.JobTitleName
				, bg.JobPositionName
				, NVL(ur.Mobile, ' ') AS Mobile
				, NVL(ur.MailAddress, ' ') AS MailAddress
				, NVL(ur.PhoneNumber, ' ') AS PhoneNumber
				, ur.EmpNo 
				, bg.DeptCode
				, bg.DeptName
				, bg.MultiDeptName
				, bg.CompanyCode
				, bg.CompanyName
				, bg.MultiCompanyName
				, NVL(bg.JobType,'Original') AS JobType
				, ur.PhoneNumberInter
				, ur.IsUse
				, ur.IsDisplay
				, ur.IsHR
				, ur.SortKey
				, ur.EnterDate 
				, bg.JobLevelSortKey
				, bg.JobTitleSortKey 
			FROM SYS_OBJECT_USER ur
			LEFT JOIN SYS_OBJECT_USER_BASEGROUP bg ON ur.UserCode = bg.UserCode
			]]>
			<if test="hasChildGroup !=null and hasChildGroup.equalsIgnoreCase('Y') and deptCode != null  and deptCode != ''">
				LEFT JOIN SYS_OBJECT_GROUP gr ON bg.DeptCode = gr.GroupCode 
			</if>
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				NVL(bg.JobType,'Origin') = 'Origin'
				<if test="companyCode != null and companyCode != 'ORGROOT'">
					AND bg.CompanyCode = #{companyCode}    
				</if>
				<choose>
					<when test="hasChildGroup !=null and hasChildGroup.equalsIgnoreCase('Y') and deptCode != null  and deptCode != ''">
						AND ';'||gr.GroupPath LIKE '%;'||#{deptCode}||';%'
					</when>
					<when test="deptCode != null">
						AND bg.DeptCode = #{deptCode}
					</when>
				</choose>
				<if test="IsUse != null">
					AND ur.IsUse = #{IsUse}
				</if>
				<if test="searchType == 'UserName' and searchText != null">
					AND ur.MultiDisplayName LIKE '%'||#{searchText}||'%'
				</if>
				<if test="searchType == 'UserCode' and searchText != null">
					AND ur.UserCode = #{searchText} 
				</if>
				<if test="searchType == 'DeptName' and searchText != null">
					AND bg.MultiDeptName LIKE '%'||#{searchText}||'%'
				</if>
				<if test="searchType == 'JobPositionName' and searchText != null">
					AND bg.MultiJobPositionName LIKE '%'||#{searchText}||'%'
				</if>
				<if test="searchType == 'JobTitleName' and searchText != null">
					AND bg.MultiJobTitleName LIKE '%'||#{searchText}||'%'
				</if>
				<if test="searchType == 'JobLevelName' and searchText != null">
					AND bg.MultiJobLevelName LIKE '%'||#{searchText}||'%'
				</if>
			</trim> 
		)B 
		<trim prefix="ORDER BY">
			<if test="sortColumn != null and sortDirection != null and sortColumn != 'SortKey'">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("SortKey")'>SortKey</when>
					<when test='sortColumn.equalsIgnoreCase("MultiDisplayName")'>MultiDisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("JobTitle")'>JobTitle</when>
					<when test='sortColumn.equalsIgnoreCase("JobPosition")'>JobPosition</when>
					<when test='sortColumn.equalsIgnoreCase("JobLevel")'>JobLevel</when>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
					<when test='sortColumn.equalsIgnoreCase("IsHR")'>IsHR</when>
					<when test='sortColumn.equalsIgnoreCase("MailAddress")'>MailAddress</when>
					<otherwise>UserCode</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
				<include refid="oracle.include.listOrderBy"/>
			</if> 
			<if test="sortColumn == null or sortDirection == null or sortColumn == 'SortKey'">
				TO_NUMBER(B.SortKey) ASC
			</if>
			, TO_NUMBER(JobTitleSortKey) ASC, TO_NUMBER(JobLevelSortKey) ASC, EnterDate ASC, MultiDisplayName ASC
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>
    
	<update id="updateIsUseUser" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_USER
		SET
			IsUse = #{IsUse},
			ModifyDate = TO_DATE(#{ModifyDate},'yyyy/mm/dd hh24:mi:ss')
		WHERE UserCode = #{UserCode}
		]]>
	</update> 
     
    <update id="updateIsHRUser" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_USER
		SET
			IsHR = #{IsHR},
			ModifyDate = TO_DATE(#{ModifyDate},'yyyy/mm/dd hh24:mi:ss')
		WHERE UserCode = #{UserCode}
		]]>
	</update>
	
    <update id="updateIsADUser" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_USER
		SET
			IsAD = #{IsAD},
			ModifyDate = TO_DATE(#{ModifyDate},'yyyy/mm/dd hh24:mi:ss')
		WHERE UserCode = #{UserCode}
		]]>
	</update>
	
    <select id="selectIsDuplicateUserCode" parameterType="cmap" resultType="cmap">
		SELECT COUNT(0) AS isDuplicate
		FROM SYS_OBJECT_USER
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
	    	<if test="Type == 'UserCode'">
		  		AND LOWER(UserCode) = LOWER(#{Code})    
		  	</if>
		  	<if test="Type == 'UserEmpNo'">
		  		AND LOWER(EmpNo) = LOWER(#{Code})
		  	</if>
		  	<if test="Type == 'LogonID'">
		  		AND LOWER(LogonID) = LOWER(#{Code})
		  	</if>
		</trim> 
    </select>

	<select id="selectIsDuplicateEmpno" parameterType="cmap" resultType="cmap">
		SELECT COUNT(0) AS "isDuplicate"
		FROM SYS_OBJECT_USER a
		INNER JOIN SYS_OBJECT_USER_BASEGROUP b ON a.usercode = b.usercode
		WHERE a.EmpNo = #{Code}
		AND b.JobType = 'Origin'
		AND b.CompanyCode = #{CompanyCode}
	</select>

	<!-- 그룹 선택시 해당 그룹의 사용자 가져옴 -->
    <!-- 기존 .NET 에서는 사용자 정보를 가져올 때 메인이 되는 테이블이 BASE_GROUP_MEMBER 였지만 
    JAVA 에서는 BASE_OBJECT_UR이 주가 되기 떄문에 겸직등의 정보를 표시 하기 위해 UNION을 사용한다.  -->
    <select id="selectGroupUserList" parameterType="cmap" resultType="cmap">
		<![CDATA[
       	SELECT    
 			  'user' AS "itemType"
			, UR.UserID AS "UserID"
			, UR.UserCode AS "UserCode"
			, UR.MultiDisplayName AS "MultiDisplayName"
			, NVL(BG.JobLevelCode||'&'||BG.MultiJobLevelName, ' ') AS "JobLevel"
			, NVL(BG.JobTitleCode||'&'||BG.MultiJobTitleName, ' ')  AS "JobTitle"
			, NVL(BG.JobPositionCode||'&'||BG.MultiJobPositionName, ' ') AS "JobPosition"
			, NVL(UR.Mobile, '') AS "Mobile"
			, NVL(UR.MailAddress, '') AS "MailAddress"
			, NVL(UR.PhoneNumber, '') AS "PhoneNumber"
			, UR.EmpNo AS "EmpNo"
			, BG.DeptCode AS "DeptCode"
			, BG.MultiDeptName AS "MultiDeptName"
			, BG.CompanyCode AS "CompanyCode"
			, BG.MultiCompanyName AS "MultiCompanyName"
			, BG.JobType AS "JobType"
			, NVL(UR.PhoneNumberInter, '') AS "PhoneNumberInter"
			, UR.IsUse AS "IsUse"
			, UR.IsDisplay AS "IsDisplay"
			, UR.IsHR AS "IsHR"
			, UR.SortKey AS "SortKey"
		]]>					
		FROM SYS_OBJECT_USER UR
		INNER JOIN SYS_OBJECT_USER_BASEGROUP BG ON UR.UserCode = BG.UserCode
		INNER JOIN (
			SELECT DISTINCT UserCode, (CASE JobType WHEN 'addJob' THEN 'AddJob' ELSE 'Origin' END) AS JobType
			FROM SYS_OBJECT_GROUP_MEMBER 
			<if test="groupCode != null">
				WHERE GroupCode = #{groupCode}
			</if>
		) GM ON BG.JobType = GM.JobType AND UR.UserCode = GM.UserCode
		WHERE 1=1 
		<if test="companyCode != null and companyCode != 'ORGROOT'">
			AND BG.CompanyCode = #{companyCode} 
		</if>
		<if test="pageSize != null and pageOffset != null">
			AND ROWNUM BETWEEN #{pageSize} AND #{pageOffset}
		</if>
		<![CDATA[ 	
		ORDER BY (bg.JobTitleSortKey+0) ASC, (bg.JobLevelSortKey+0) ASC, (ur.SortKey+0) ASC, ur.EnterDate ASC, ur.MultiDisplayName ASC 
		]]>
	</select>
	
	<!-- 그룹 선택시 해당 그룹의 사용자 갯수를 가져옴 -->
    <select id="selectGroupUserListCnt" parameterType="cmap" resultType="java.lang.Long">
		<![CDATA[
		SELECT  COUNT(*)
		FROM SYS_OBJECT_USER UR
		]]>
		INNER JOIN SYS_OBJECT_USER_BASEGROUP BG ON UR.UserCode = BG.UserCode
		INNER JOIN (
			SELECT DISTINCT UserCode, (CASE JobType WHEN 'addJob' THEN 'AddJob' ELSE 'Origin' END) AS JobType
			FROM SYS_OBJECT_GROUP_MEMBER 
			<if test="groupCode != null">
				WHERE GroupCode = #{groupCode}
			</if>
		) GM ON BG.JobType = GM.JobType AND UR.UserCode = GM.UserCode
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="companyCode != null and companyCode != 'ORGROOT'">
				AND BG.CompanyCode = #{companyCode} 
			</if>
		</trim> 
	</select>
	
	<!-- 그룹 멤버 목록 select -->
    <select id="selectGroupMemberList" parameterType="cmap" resultType="cmap">
        <include refid="oracle.include.pagingHeader" />
		SELECT 
			  ROWNUM
			, A.Type AS "Type"
			, A.Code AS "Code"
			, A.CodeName AS "CodeName"
			, A.MailAddress AS "MailAddress"
			, A.MemberID AS "MemberID"
		FROM (
			SELECT
				  'User' AS Type
				, GM.UserCode AS Code
				, NVL(UR.DisplayName, '') AS CodeName
				, NVL(UR.MailAddress, '') AS MailAddress
				, GM.GroupMemberID AS MemberID
			FROM SYS_OBJECT_GROUP_MEMBER GM
			LEFT JOIN SYS_OBJECT_USER UR ON GM.UserCode = UR.UserCode
			WHERE GM.GroupCode = #{groupCode} 
			
			UNION
			
			SELECT 
				  'Dept' AS Type
				, GM.MemberGroupCode AS Code
				, NVL(GR.DisplayName, '') AS CodeName
				, NVL(GR.PrimaryMail, '') AS MailAddress
				, GM.MemberGroupID AS MemberID
			FROM SYS_OBJECT_GROUP_MEMBERGROUP GM
			LEFT JOIN SYS_OBJECT_GROUP GR ON GM.MemberGroupCode = GR.GroupCode
			WHERE GM.GroupCode = #{groupCode} 
		) A
		WHERE 1=1
		<include refid="oracle.include.pagingFooter" />
	</select>
    
	<!-- 그룹 선택시 해당 그룹의 멤버 수를 가져옴 -->
    <select id="selectGroupMemberListCnt" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*) 
		FROM (
			SELECT
				  'User' AS Type
				, GM.UserCode AS Code
				, UR.DisplayName AS CodeName
				, UR.MailAddress
				, GM.GroupMemberID AS MemberID
			FROM SYS_OBJECT_GROUP_MEMBER GM
			LEFT JOIN SYS_OBJECT_USER UR ON GM.UserCode = UR.UserCode
			WHERE GM.GroupCode = #{groupCode} 
			
			UNION 
			SELECT
				  'Dept' AS Type
				, GM.MemberGroupCode AS Code
				, GR.DisplayName AS CodeName
				, GR.PrimaryMail
				, GM.MemberGroupID AS MemberID
			FROM SYS_OBJECT_GROUP_MEMBERGROUP GM
			LEFT JOIN SYS_OBJECT_GROUP GR ON GM.MemberGroupCode = GR.GroupCode
			WHERE GM.GroupCode = #{groupCode} 
		) A
	</select>
    
    <!-- 그룹 소속원 중 부서 데이터 중복 여부 조회 -->
    <select id="selectIsDuplicateGroupMember" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*) AS isDuplicate
		FROM SYS_OBJECT_GROUP_MEMBERGROUP
		WHERE LOWER(GroupCode) = LOWER(#{GroupCode})
		AND LOWER(MemberGroupCode) = LOWER(#{MemberGroupCode})
    </select>
    
    <!-- 그룹 소속원 중 사용자 데이터 중복 여부 조회 -->
    <select id="selectIsDuplicateGroupMemberUser" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*) AS isDuplicate
		FROM SYS_OBJECT_GROUP_MEMBER
		WHERE LOWER(GroupCode) = LOWER(#{GroupCode})
		AND LOWER(UserCode) = LOWER(#{UserCode})
    </select>
    
   	<!-- 사용자 메일사용여부 변경 -->
    <update id="updateIsMailUser" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_USER
		SET
			IsMail = #{IsMail},
			ModifyDate = TO_DATE(#{ModifyDate},'YYYY-MM-DD HH24:MI:SS')
		WHERE UserCode = #{UserCode}
		]]>
	</update>
	
	<insert id="insertUserDefaultInfo" parameterType="cmap">
        INSERT INTO SYS_OBJECT_USER (
			UserCode,
			LogonID,
			LogonPassword,
			EmpNo,
			NickName,
			DisplayName,
			MultiDisplayName,
			Address,
			MultiAddress,
			HomePage,
			PhoneNumber,
			Mobile,
			Fax,
			IPPhone,
			UseMessengerConnect,
			SortKey,
			SecurityLevel,
			Description,
			IsUse,
			IsHR,
			IsDisplay,
			EnterDate,
			RetireDate,
			PhotoPath,
			BirthDiv,
			BirthDate,
			UseMailConnect,
			MailAddress,
			ExternalMailAddress,
			ChargeBusiness,
			PhoneNumberInter,
			LanguageCode,
			InitPortal,
			MobileThemeCode,
			TimeZoneCode,
			RegistDate,
			ModifyDate,
			Reserved1,
			Reserved2,
			Reserved3,
			Reserved4,
			Reserved5,
			AD_ISUSE,
			EX_ISUSE,
			MSN_ISUSE,
			CountryID,
			CountryCode,
			CityState,
			City,
			PostOfficeBox,
			OfficeAddress
		  	<if test='isSaaS != null and isSaaS=="Y"'>
		  	,	TEMPORARY_PASSWORD_ISUSE
		  	</if>
		  	<if test='LicSeq != null'>
		  	,	LicSeq
		  	</if>
        ) 
        VALUES (
        	#{UserCode},
			#{LogonID},
			CRYPTO.ENC_AES128(#{LogonPassword},#{aeskey}),
			#{EmpNo},
			#{NickName},
			#{DisplayName},
			#{MultiDisplayName},
			#{Address},
			#{MultiAddress},
			#{HomePage},
			#{PhoneNumber},
			#{Mobile},
			#{Fax},
			#{IPPhone},
			#{UseMessengerConnect},
			#{SortKey},
			#{SecurityLevel},
			#{Description},
			#{IsUse},
			#{IsHR},
			#{IsDisplay},
			#{EnterDate},
			#{RetireDate},
			#{PhotoPath},
			#{BirthDiv},
			#{BirthDate},
			#{UseMailConnect},
			#{MailAddress},
			#{ExternalMailAddress},
			#{ChargeBusiness},
			#{PhoneNumberInter},
			#{LanguageCode},
			#{InitPortal},
			#{MobileThemeCode},
			#{TimeZoneCode},
			SYSDATE,
			SYSDATE,
			#{Reserved1},
			#{Reserved2},
			#{Reserved3},
			#{Reserved4},
			#{Reserved5},
			#{AD_IsUse},
			#{EX_IsUse},
			#{MSN_IsUse},			
			#{CountryID},
			#{CountryCode},
			#{CityState_01},
			#{CityState_02},
			#{PostOfficeBox},
			#{OfficeAddress}  	
		  	<if test='isSaaS != null and isSaaS=="Y"'>
		  	,	'Y'
		  	</if>	
		  	<if test='LicSeq != null'>
		  	,	#{LicSeq}
		  	</if>	
        )
	</insert>
	
 	<insert id="insertUserDefaultInfo2" parameterType="cmap">
 	    INSERT INTO SYS_OBJECT_USER_INFO (
        	  UserCode
        	, CheckUserIP
        	, StartIP
        	, EndIP 
        )
        VALUES (
        	  #{UserCode}
        	, #{CheckUserIP}
        	, #{StartIP}
        	, #{EndIP}
        )
 	</insert>
 	
 	<insert id="insertUserBasegroupInfo" parameterType="cmap">
		INSERT INTO SYS_OBJECT_USER_BASEGROUP (
			UserCode,
			JobType,
			SortKey,
			CompanyCode,
			CompanyName,
			MultiCompanyName,
			CompanySortKey,
			DeptCode,
			DeptName,
			MultiDeptName,
			DeptSortKey,
			RegionCode,
			RegionName,
			MultiRegionName,
			RegionSortKey,
			JobPositionCode,
			JobPositionName,
			MultiJobPositionName,
			JobPositionSortKey,
			JobTitleCode,
			JobTitleName,
			MultiJobTitleName,
			JobTitleSortKey,
			JobLevelCode,
			JobLevelName,
			MultiJobLevelName,
			JobLevelSortKey,
			RegistDate,
			ModifyDate,
			Reserved1,
			Reserved2,
			Reserved3,
			Reserved4,
			Reserved5,
			ISHR
        ) 
        VALUES (
        	#{UserCode},
			#{JobType},
			#{SortKey},
			#{CompanyCode},
			(SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode} AND GroupType = 'Company'),
			(SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode} AND GroupType = 'Company'),
			(SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode} AND GroupType = 'Company'),
			#{DeptCode},
			(SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{DeptCode} AND GroupType IN ('Dept','Company')),
			(SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{DeptCode} AND GroupType IN ('Dept','Company')),
			(SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{DeptCode} AND GroupType IN ('Dept','Company')),
			#{RegionCode},
			(SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{RegionCode} AND GroupType = 'Region'),
			(SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{RegionCode} AND GroupType = 'Region'),
			(SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{RegionCode} AND GroupType = 'Region'),
			#{JobPositionCode},
			(SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobPositionCode} AND GroupType = 'JobPosition'),
			(SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobPositionCode} AND GroupType = 'JobPosition'),
			(SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobPositionCode} AND GroupType = 'JobPosition'),
			#{JobTitleCode},
			(SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobTitleCode} AND GroupType = 'JobTitle'),
			(SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobTitleCode} AND GroupType = 'JobTitle'),
			(SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobTitleCode} AND GroupType = 'JobTitle'),
			#{JobLevelCode},
			(SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobLevelCode} AND GroupType = 'JobLevel'),
			(SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobLevelCode} AND GroupType = 'JobLevel'),
			(SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobLevelCode} AND GroupType = 'JobLevel'),
			SYSDATE,
			SYSDATE,
			#{Reserved1},
			#{Reserved2},
			#{Reserved3},
			#{Reserved4},
			#{Reserved5},
			#{IsHR}
        )
	</insert>
 	
 	<insert id="insertUserApprovalInfo" parameterType="cmap">
        INSERT INTO SYS_OBJECT_USER_APPROVAL (	
        	UserCode,
			UseDeputy,
			DeputyOption,
			DeputyCode,
			DeputyName,
			DeputyFromDate,
			DeputyToDate,
			AlertConfig,
			ApprovalUnitCode,
			ReceiptUnitCode,
			ApprovalCode,
			ApprovalFullCode,
			ApprovalFullName,
			UseApprovalMessageBoxView,
			UseMobile,
			UseApprovalPassword,
			RegistDate,
			ModifyDate
        )
        VALUES (
        	#{UserCode},
			#{UseDeputy},
			#{DeputyOption},
			#{DeputyCode},
			#{DeputyName},
			#{DeputyFromDate},
			#{DeputyToDate},
			#{AlertConfig},
			#{ApprovalUnitCode},
			#{ReceiptUnitCode},
			#{ApprovalCode},
			#{ApprovalFullCode},
			#{ApprovalFullName},
			#{UseApprovalMessageBoxView},
			#{UseMobile},
			#{UseApprovalPassword},
			SYSDATE,
			SYSDATE
        )
    </insert>
 	
 	<insert id="insertUserGroupMember" parameterType="cmap">
		INSERT INTO SYS_OBJECT_GROUP_MEMBER (
        	GroupCode,
        	UserCode,
        	SortKey,
        	Role,
        	IsUse,
        	IsHR,
        	MemberStatus,
        	JoinDate
		) 
		<trim prefix="">
			<if test="CompanyCode != null and CompanyCode != '' ">
				SELECT #{CompanyCode}, #{UserCode}, 999, 'regular', 'Y', 'Y', 'A', SYSDATE FROM DUAL
			</if>
			<if test="DeptCode != null and DeptCode != '' ">
				UNION ALL SELECT #{DeptCode}, #{UserCode}, 999, 'regular', 'Y', 'Y', 'A', SYSDATE FROM DUAL
			</if>
			<if test="RegionCode != null and RegionCode != '' ">
				UNION ALL SELECT #{RegionCode}, #{UserCode}, 999, 'regular', 'Y', 'Y', 'A', SYSDATE FROM DUAL
			</if>
			<if test="JobPositionCode != null and JobPositionCode != '' ">
				UNION ALL SELECT #{JobPositionCode}, #{UserCode}, 999, 'regular', 'Y', 'Y', 'A', SYSDATE FROM DUAL
			</if>
			<if test="JobTitleCode != null and JobTitleCode != '' ">
				UNION ALL SELECT #{JobTitleCode}, #{UserCode}, 999, 'regular', 'Y', 'Y', 'A', SYSDATE FROM DUAL
			</if>
			<if test="JobLevelCode != null and JobLevelCode != '' ">
				UNION ALL SELECT #{JobLevelCode}, #{UserCode}, 999, 'regular', 'Y', 'Y', 'A', SYSDATE FROM DUAL
			</if>
        </trim>
    </insert>
    
	<insert id="insertAddGroupMemberUser" parameterType="cmap">
		INSERT INTO SYS_OBJECT_GROUP_MEMBER (
        	GroupCode,
        	UserCode,
        	SortKey,
        	Role,
        	IsUse,
        	IsHR,
        	MemberStatus,
        	JoinDate
        ) 
        VALUES (
            #{GroupCode},
        	#{URList},
        	999,
        	'regular', 
        	'Y',
        	'Y',
        	'A',
        	SYSDATE
        )
    </insert>
    
   	<update id="updateOrgUserPhotoPath" parameterType="cmap" >
        UPDATE SYS_OBJECT_USER
 		SET PhotoPath = #{PhotoPath}
 		WHERE UserCode = #{UserCode}
 	</update>
    
    <update id="updateUserDefaultInfo" parameterType="cmap">
        UPDATE SYS_OBJECT_USER
        SET
        	LogonID = #{LogonID},
			EmpNo = #{EmpNo},
			NickName = #{NickName},
			DisplayName = #{DisplayName},
			MultiDisplayName = #{MultiDisplayName},
			Address = #{Address},
			MultiAddress = #{MultiAddress},
			HomePage = #{HomePage},
			PhoneNumber = #{PhoneNumber},
			Mobile = #{Mobile},
			Fax = #{Fax},
			IPPhone = #{IPPhone},
			UseMessengerConnect = #{UseMessengerConnect},
			SortKey = #{SortKey},
			SecurityLevel = #{SecurityLevel},
			Description = #{Description},
			IsUse = #{IsUse},
			IsHR = #{IsHR},
			IsDisplay = #{IsDisplay},
			EnterDate = #{EnterDate},
			RetireDate = #{RetireDate},
			BirthDiv = #{BirthDiv},
			BirthDate = #{BirthDate},
			UseMailConnect = #{UseMailConnect},
			MailAddress = #{MailAddress},
			ExternalMailAddress = #{ExternalMailAddress},
			ChargeBusiness = #{ChargeBusiness},
			PhoneNumberInter = #{PhoneNumberInter},
			LanguageCode = #{LanguageCode},
			MobileThemeCode = #{MobileThemeCode},
			TimeZoneCode = #{TimeZoneCode},
			ModifyDate = SYSDATE,
			Reserved1 = #{Reserved1},
			Reserved2 = #{Reserved2},
			Reserved3 = #{Reserved3},
			Reserved4 = #{Reserved4},
			Reserved5 = #{Reserved5},			
			CountryID = #{CountryID},
			CountryCode = #{CountryCode},
			CityState = #{CityState_01},
			City = #{CityState_02},
			PostOfficeBox = #{PostOfficeBox},
			OfficeAddress = #{OfficeAddress}
			<if test="InitPortal != null">
				, InitPortal=#{InitPortal}
		    </if>
			<if test="AD_IsUse != null">
				, AD_ISUSE = #{AD_IsUse}
			</if>
			<if test="EX_IsUse != null">
				, EX_ISUSE = #{EX_IsUse}
			</if>
			<if test="MSN_IsUse != null">
				, MSN_ISUSE = #{MSN_IsUse}
			</if>
			<if test='InitPW == "Y"'>
				, TEMPORARY_PASSWORD_ISUSE  = 'Y'
			</if>
			<if test='LicSeq != null'>
				, LicSeq  = #{LicSeq}
			</if>
		WHERE UserCode = #{UserCode}
	</update>
	
	<update id="updateUserDefaultInfo2" parameterType="cmap">
		UPDATE SYS_OBJECT_USER_INFO 
		SET
			  CheckUserIP = #{CheckUserIP}
			, StartIP =  #{StartIP}
			, EndIP = #{EndIP}
		WHERE UserCode= #{UserCode}
	</update>	
	
    <select id="selectUserBaseGroupInfoCnt" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*)
  		FROM SYS_OBJECT_USER_BASEGROUP
  		WHERE UserCode = #{UserCode}
		AND JobType = #{JobType}
	</select>
	
    <update id="updateUserBaseGroupInfo" parameterType="cmap">
       UPDATE SYS_OBJECT_USER_BASEGROUP 
       SET
			  UserCode = #{UserCode}
			, JobType = #{JobType}
			, SortKey = #{SortKey}
			, CompanyCode = #{CompanyCode}
			, CompanyName = (SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode} AND GroupType = 'Company')
			, MultiCompanyName = (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode} AND GroupType = 'Company')
			, CompanySortKey = (SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode} AND GroupType = 'Company')
			, DeptCode = #{DeptCode}
			, DeptName = (SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{DeptCode} AND GroupType = 'Dept')
			, MultiDeptName = (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{DeptCode} AND GroupType = 'Dept')
			, DeptSortKey = (SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{DeptCode} AND GroupType = 'Dept')
			, RegionCode = #{RegionCode}
			, RegionName = (SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{RegionCode} AND GroupType = 'Region')
			, MultiRegionName = (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{RegionCode} AND GroupType = 'Region')
			, RegionSortKey = (SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{RegionCode} AND GroupType = 'Region')
			, JobPositionCode = #{JobPositionCode}
			, JobPositionName = (SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobPositionCode} AND GroupType = 'JobPosition')
			, MultiJobPositionName = (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobPositionCode} AND GroupType = 'JobPosition')
			, JobPositionSortKey = (SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobPositionCode} AND GroupType = 'JobPosition')
			, JobTitleCode = #{JobTitleCode}
			, JobTitleName = (SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobTitleCode} AND GroupType = 'JobTitle')
			, MultiJobTitleName = (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobTitleCode} AND GroupType = 'JobTitle')
			, JobTitleSortKey = (SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobTitleCode} AND GroupType = 'JobTitle')
			, JobLevelCode = #{JobLevelCode}
			, JobLevelName = (SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobLevelCode} AND GroupType = 'JobLevel')
			, MultiJobLevelName = (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobLevelCode} AND GroupType = 'JobLevel')
			, JobLevelSortKey = (SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobLevelCode} AND GroupType = 'JobLevel')
			, ModifyDate = SYSDATE
			, Reserved1 = #{Reserved1}
			, Reserved2 = #{Reserved2}
			, Reserved3 = #{Reserved3}
			, Reserved4 = #{Reserved4}
			, Reserved5 = #{Reserved5}
			, IsHR = #{IsHR}
		WHERE UserCode = #{UserCode}
		AND JobType = #{JobType}
	</update>
	
	<update id="updateUserBaseGroupInfoAddJob" parameterType="cmap">
        UPDATE SYS_OBJECT_USER_BASEGROUP
        SET
			  SortKey = #{SortKey}
			, CompanyName = (SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode} AND GroupType = 'Company')
			, MultiCompanyName = (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode} AND GroupType = 'Company')
			, CompanySortKey = (SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode} AND GroupType = 'Company')
			, DeptName = (SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{DeptCode} AND GroupType in ('Company','Dept'))
			, MultiDeptName = (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{DeptCode} AND GroupType in ('Company','Dept'))
			, DeptSortKey = (SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{DeptCode} AND GroupType in ('Company','Dept'))
			, RegionCode = #{RegionCode}
			, RegionName = (SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{RegionCode} AND GroupType = 'Region')
			, MultiRegionName = (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{RegionCode} AND GroupType = 'Region')
			, RegionSortKey = (SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{RegionCode} AND GroupType = 'Region')
			, JobPositionCode = #{JobPositionCode}
			, JobPositionName = NVL((SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobPositionCode} AND GroupType = 'JobPosition'),'')
			, MultiJobPositionName = NVL((SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobPositionCode} AND GroupType = 'JobPosition'),'')
			, JobPositionSortKey = NVL((SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobPositionCode} AND GroupType = 'JobPosition'),99999)
			, JobTitleCode = #{JobTitleCode}
			, JobTitleName = NVL((SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobTitleCode} AND GroupType = 'JobTitle'),'')
			, MultiJobTitleName = NVL((SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobTitleCode} AND GroupType = 'JobTitle'),'')
			, JobTitleSortKey = NVL((SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobTitleCode} AND GroupType = 'JobTitle'),99999)
			, JobLevelCode = #{JobLevelCode}
			, JobLevelName = NVL((SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobLevelCode} AND GroupType = 'JobLevel'),'')
			, MultiJobLevelName = NVL((SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobLevelCode} AND GroupType = 'JobLevel'),'')
			, JobLevelSortKey = NVL((SELECT SortKey FROM SYS_OBJECT_GROUP WHERE GroupCode = #{JobLevelCode} AND GroupType = 'JobLevel'),99999)
			, ModifyDate = NOW()
			, Reserved1 = #{Reserved1}
			, Reserved2 = #{Reserved2}
			, Reserved3 = #{Reserved3}
			, Reserved4 = #{Reserved4}
			, Reserved5 = #{Reserved5}
			, IsHR = #{IsHR}
		WHERE UserCode = #{UserCode}
		AND JobType = #{JobType}	
		AND CompanyCode = #{CompanyCode}
		AND DeptCode = #{DeptCode}
    </update>
    
 	<update id="updateUserApprovalInfo" parameterType="cmap">
        UPDATE SYS_OBJECT_USER_APPROVAL
		SET
			<if test="UseDeputy != null">
				UseDeputy = #{UseDeputy},
			</if>
			<if test="DeputyOption != null">
				DeputyOption = #{DeputyOption},
			</if>
			<if test="DeputyCode != null">
				DeputyCode = #{DeputyCode},
			</if>
			<if test="DeputyName != null">
				DeputyName = #{DeputyName},
			</if>
			<if test="DeputyFromDate != null">
				DeputyFromDate = #{DeputyFromDate},
			</if>
			<if test="DeputyToDate != null">
				DeputyToDate = #{DeputyToDate},
			</if>
			ApprovalUnitCode = #{ApprovalUnitCode},
			ReceiptUnitCode = #{ReceiptUnitCode},
			ApprovalCode = #{ApprovalCode},
			ApprovalFullCode = #{ApprovalFullCode},
			ApprovalFullName = #{ApprovalFullName},
			<if test="UseApprovalMessageBoxView != null">
				UseApprovalMessageBoxView = #{UseApprovalMessageBoxView},
			</if>
			<if test="UseMobile != null">
				UseMobile = #{UseMobile},
			</if>
			ModifyDate = SYSDATE
        WHERE UserCode = #{UserCode}
    </update>
    
    <delete id="deleteUserGroupDefaultMember" parameterType="cmap">
		DELETE FROM SYS_OBJECT_GROUP_MEMBER
		WHERE UserCode = #{UserCode}
		AND GroupCode IN (
			SELECT GroupCode 
			FROM SYS_OBJECT_GROUP 
			WHERE GroupType IN ('JobTitle', 'JobPosition', 'JobLevel', 'Dept', 'Company')
		)
    </delete>
    
   	<delete id="deleteUserMemberGroupOne" parameterType="cmap">
         DELETE FROM SYS_OBJECT_GROUP_MEMBER
		 WHERE UserCode = #{UserCode}
		 AND GroupCode = #{GroupCode}
    </delete>
    
    <update id="deleteUser" parameterType="cmap">
        UPDATE SYS_OBJECT_USER
		SET
			  IsUse = 'N'
			, IsDisplay = 'N'
			, IsHR = 'N'
	        , UseMailConnect = 'N'
			, ModifyDate = SYSDATE
			, RetireDate = TO_CHAR(SYSTIMESTAMP, 'YYYY-MM-DD')
		WHERE UserCode = #{UserCode} 
	</update>
	
    <update id="deleteUserBaseGroup" parameterType="cmap">
		UPDATE SYS_OBJECT_USER_BASEGROUP A
		SET (  
			  A.DeptCode
			, A.DeptName
			, A.MultiDeptName
			, A.DeptSortKey
		) = (
			SELECT
				  B.GroupCode
				, B.DisplayName
				, B.MultiDisplayName
				, B.SortKey  
			FROM SYS_OBJECT_GROUP B 
			WHERE B.GroupCode = (
				SELECT C.DomainID||'_RetireDept' 
				FROM SYS_OBJECT_DOMAIN C
				WHERE C.DomainCode = A.CompanyCode 
			)
		)
		WHERE A.UserCode = #{UserCode}
		AND A.JobType = 'Origin'
	</update> 
	
	<delete id="deleteAddJobBaseGroup" parameterType="cmap">
		DELETE FROM SYS_OBJECT_USER_BASEGROUP
		WHERE UserCode = #{UserCode}
		AND JobType = 'AddJob'
	</delete>
       
	<delete id="deleteUserGroupMember" parameterType="cmap">	    
		DELETE FROM SYS_OBJECT_GROUP_MEMBER
		WHERE UserCode=#{UserCode} 
	</delete>
	
	<insert id="insertRetiredGroupMember" parameterType="cmap">
		INSERT INTO SYS_OBJECT_GROUP_MEMBER (
        	GroupCode,
        	UserCode,
        	SortKey,
        	Role,
        	IsUse,
        	IsHR,
        	MemberStatus,
        	JoinDate
        ) 
  		VALUES (
  			(	
  				SELECT b.DomainID||'_RetireDept'
	  			FROM SYS_OBJECT_USER_BASEGROUP a
				LEFT JOIN SYS_OBJECT_DOMAIN b ON a.CompanyCode = b.DomainCode
				WHERE a.UserCode = #{UserCode}
				AND a.JobType = 'Origin'
			),
	       	#{UserCode},
	       	999,
	       	'regular', 
	       	'Y',
	       	'Y',
	       	'A',
	       	SYSDATE
         )
	</insert>
	
	<!-- GROUP -->
	<!-- 도메인 선택시 해당 도메인의 부서를 가져옴 -->
    <select id="selectDeptList" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT
			  'group' AS "itemType"
			, gr.CompanyCode AS "CompanyCode"
			, gr.GroupCode AS "GroupCode"
			, gr.GroupType AS "GroupType"
			, gr.DisplayName AS "GroupDisplayName"
			, gr.MultiDisplayName AS "GroupName"
			, cn.DisplayName AS "CompanyDisplayName"
			, cn.MultiDisplayName AS "CompanyName"
			, gr.MemberOf AS "MemberOf"
			, gr.SortKey AS "SortKey"
			, gr.SortPath AS "SortPath"
			, gr.GroupID AS "GroupID"
			, gr.IsUse AS "IsUse"
			,(SELECT COUNT(0) FROM SYS_OBJECT_GROUP sog WHERE sog.MemberOf = gr.GroupCode AND sog.IsUse = 'Y') AS "hasChild"
			, REPLACE(SYS_GETFULLPATH(gr.GroupCode),'@','>') AS "GroupFullPath"
		FROM SYS_OBJECT_GROUP gr
		JOIN SYS_OBJECT so ON (so.ObjectCode = gr.GroupCode)
		LEFT JOIN SYS_OBJECT_GROUP cn ON gr.CompanyCode = cn.GroupCode AND cn.GroupType = 'Company'
	    ]]>
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
			AND (gr.MemberOf != 'NOUSE' OR gr.MemberOf IS NULL)
			AND (gr.MemberOf != 'NOUNIT' OR gr.MemberOf IS NULL)
			<choose>
				<when test='isSaaS == "Y"'>
					<if test='companyCode != null'>
						AND gr.CompanyCode = #{companyCode}
					</if>
				</when>
				<otherwise>
					<if test='companyCode != null and companyCode != "ORGROOT"'>
						AND gr.CompanyCode = #{companyCode}
					</if>
				</otherwise>
			</choose>
			<if test="groupType != null and groupType =='dept'">
				AND gr.GroupType in ('Dept','Company')  	
			</if>
			<if test="groupType != null and groupType =='group'">
				AND gr.GroupType != 'Dept'	
			</if>
		</trim>
		ORDER BY gr.IsUse desc, gr.SortPath asc
	</select>
	<select id="selectInitOrgTreeList" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT 
			  'group' AS "itemType"
			, gr.CompanyCode	AS "CompanyCode"
			, gr.GroupCode      AS "GroupCode"
			, gr.GroupType      AS "GroupType"
			, gr.DisplayName AS "GroupDisplayName"
			, gr.MultiDisplayName AS "GroupName"
			, cn.DisplayName AS "CompanyDisplayName"
			, cn.MultiDisplayName AS "CompanyName"
			, gr.MemberOf	AS "MemberOf"
			, gr.SortKey    AS "SortKey"
			, gr.SortPath   AS "SortPath"
			, gr.GroupID    AS "GroupID"
			, gr.IsUse      AS "IsUse"
			, CASE WHEN (SELECT COUNT(0) FROM sys_object_group  self WHERE self.MemberOf =gr.GroupCode AND self.IsUse = 'Y')>0 THEN 'Y' ELSE 'N' END AS "haveChild"
			, REPLACE(sys_getFullPath(gr.GroupCode),'@','>') AS "GroupFullPath"
			, 'N' as "isLoad"
		
		FROM sys_object_group  gr
		LEFT JOIN sys_object_group  cn ON gr.CompanyCode = cn.GroupCode AND cn.GroupType = 'Company'
	    ]]>
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
			AND (gr.MemberOf != 'NOUSE' OR gr.MemberOf is null)
			AND (gr.MemberOf != 'NOUNIT' OR gr.MemberOf is null)
			<choose>
				<when test='isSaaS == "Y"'>
					<if test='companyCode != null'>
						AND gr.CompanyCode = #{companyCode}
					</if>
				</when>
				<otherwise>
					<if test='companyCode != null and companyCode != "ORGROOT"'>
						AND gr.CompanyCode = #{companyCode}
					</if>
				</otherwise>
			</choose>
			AND gr.GroupType in ('Dept','Company')  	
			AND (gr.MemberOf = #{companyCode} OR gr.GroupCode = #{companyCode})
		</trim>
		ORDER BY gr.IsUse desc, gr.SortPath asc
	</select>
	<select id="selectChildrenData" parameterType="cmap" resultType="cmap">
		<![CDATA[
			SELECT 'group' AS "itemType"
			, gr.CompanyCode	AS "CompanyCode"
			, gr.GroupCode      AS "GroupCode"
			, gr.GroupType      AS "GroupType"
			, gr.DisplayName AS "GroupDisplayName"
			, gr.MultiDisplayName AS "GroupName"
			, cn.DisplayName AS "CompanyDisplayName"
			, cn.MultiDisplayName AS "CompanyName"
			, gr.MemberOf	 AS "MemberOf"
			, gr.SortKey     AS "SortKey"
			, gr.SortPath    AS "SortPath"
			, gr.GroupID     AS "GroupID"
			, gr.IsUse       AS "IsUse"
			, CASE WHEN (SELECT COUNT(0) FROM sys_object_group  self WHERE self.MemberOf =gr.GroupCode AND self.IsUse = 'Y')>0 THEN 'Y' ELSE 'N' END AS "haveChild"
			, REPLACE(sys_getFullPath(gr.GroupCode),'@','>') AS "GroupFullPath"
			, 'N' as "isLoad"
			FROM sys_object_group  gr
			LEFT JOIN sys_object_group  cn ON gr.CompanyCode = cn.GroupCode AND cn.GroupType = 'Company'
	    ]]>
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
	        AND (gr.MemberOf != 'NOUSE' OR gr.MemberOf is null) 
	        AND (gr.MemberOf != 'NOUNIT' OR gr.MemberOf is null)
			AND gr.GroupType IN ('Dept','Company')
			AND gr.memberOf = #{memberOf}
			<if test="companyCode != null and companyCode != 'ORGROOT'">
				AND gr.CompanyCode =#{companyCode}
			</if>  	
		</trim>
		
	    <!-- Order by 절 -->
		ORDER BY gr.IsUse desc, gr.SortPath asc
    
   </select>
    <select id="selectDeptPathInfo" parameterType="cmap" resultType="cmap">
       SELECT  
       		  GroupCode AS "GroupCode"
       		, FN_COMOUPATHCREATE_S(GroupCode) AS "OUPath"
       		, FN_COMOBJECTPATHCREATE_S(0, GroupCode, 'GR') AS "GroupPath"
       		, FN_COMSORTPATHCREATE_S(0, GroupCode, 'GR') AS "SortPath"
       	FROM SYS_OBJECT_GROUP
        WHERE GROUPPATH LIKE '%'||#{GroupCode}||'%' 
        AND GROUPCODE <![CDATA[<>]]> #{GroupCode}
    </select>
    
    <select id="selectSubDeptListCnt" parameterType="cmap" resultType="java.lang.Long">
    	SELECT COUNT(A.GroupCode)
  		FROM SYS_OBJECT_GROUP A 
  		INNER JOIN SYS_OBJECT_GROUP B ON A.CompanyCode = B.GroupCode AND A.GroupType = 'Dept' AND B.GroupType = 'Company'
  		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<choose>
			  	<when test="hasChildGroup !=null and hasChildGroup.equalsIgnoreCase('Y') and gr_code != null  and gr_code != ''">
			  		AND ';'||A.GroupPath LIKE '%;'||#{gr_code}||';%'
			  	</when>
			  	<when test="gr_code != null">
			  		AND A.MemberOf = #{gr_code}
			  	</when>
		  	</choose>
			<if test="IsUse != null">
				AND A.IsUse = #{IsUse}
			</if>
			<if test="searchType == 'DeptName' and searchText != null">
				AND A.MultiDisplayName like '%'||#{searchText}||'%'
			</if>
			<if test="searchType == 'DeptCode' and searchText != null">
				AND A.GroupCode = #{searchText} 
			</if>
			<if test="companyCode != null and companyCode != 'ORGROOT'">
				AND A.CompanyCode = #{companyCode}    
			</if>
		</trim> 
    </select>
	
	<select id="selectSubDeptList" parameterType="cmap" resultType="cmap">
		<include refid="oracle.include.pagingHeader" />
		SELECT 
			  B.GroupID AS "GroupID"
			, B.GroupCode AS "GroupCode"
			, B.CompanyCode AS "CompanyCode"
			, B.GroupType AS "GroupType"
			, B.MemberOf AS "MemberOf"
			, B.GroupPath AS "GroupPath"
			, B.RegionCode AS "RegionCode"
			, B.DisplayName AS "DisplayName"
			, B.MultiDisplayName AS "MultiDisplayName"
			, B.ShortName AS "ShortName"
			, B.MultiShortName AS "MultiShortName"
			, B.OUName AS "OUName"
			, B.OUPath AS "OUPath"
			, B.SortKey AS "SortKey"
			, B.SortPath AS "SortPath"
			, B.IsUse AS "IsUse"
			, B.IsDisplay AS "IsDisplay"
			, B.IsMail AS "IsMail"
			, B.IsHR AS "IsHR"
			, B.PrimaryMail AS "PrimaryMail"
			, B.SecondaryMail AS "SecondaryMail"
			, B.ManagerCode AS "ManagerCode"
			, B.Description AS "Description"
			, B.ReceiptUnitCode AS "ReceiptUnitCode"
			, B.ApprovalUnitCode AS "ApprovalUnitCode"
			, B.Receivable AS "Receivable"
			, B.Approvable AS "Approvable"
			, B.RegistDate AS "RegistDate"
			, B.ModifyDate AS "ModifyDate"
			, B.Reserved1 AS "Reserved1"
			, B.Reserved2 AS "Reserved2"
			, B.Reserved3 AS "Reserved3" 
			, B.Reserved4 AS "Reserved4" 
			, B.Reserved5 AS "Reserved5" 
			, B.DomainName AS "DomainName" 
			, B.MultiDomainName AS "MultiDomainName" 
			, B.HasChild AS "HasChild" 
			, B.Depth AS "Depth" 
			, FN_BASEGETDICTIONARY_S(#{lang},NVL(B.ManagerName,'')) AS "ManagerName"
		FROM (   
			SELECT     
				A.*,
				B.DisplayName AS DomainName,
				B.MultiDisplayName AS MultiDomainName, 
				(SELECT COUNT(0) FROM SYS_OBJECT_GROUP sog WHERE sog.MemberOf = A.GroupCode AND sog.IsUse = 'Y') AS HasChild,     
				0 AS Depth,
				NVL(C.MultiDisplayName,'') AS ManagerName
			FROM SYS_OBJECT_GROUP A 
			INNER JOIN SYS_OBJECT_GROUP B ON A.CompanyCode = B.GroupCode AND A.GroupType = 'Dept' AND B.GroupType = 'Company'
			LEFT JOIN SYS_OBJECT_USER C ON A.ManagerCode = C.UserCode
	  		<trim prefix="WHERE" prefixOverrides="AND |OR ">
				<choose>
				  	<when test="hasChildGroup !=null and hasChildGroup.equalsIgnoreCase('Y') and gr_code != null  and gr_code != ''">
				  		AND ';'||A.GroupPath LIKE '%;'||#{gr_code}||';%'
				  	</when>
				  	<when test="gr_code != null">
				  		AND A.MemberOf = #{gr_code}
				  	</when>
				</choose>
				<if test="IsUse != null">
					AND A.IsUse = #{IsUse}
				</if>
				<if test="searchType == 'DeptName' and searchText != null">
					AND A.MultiDisplayName LIKE '%'||#{searchText}||'%'
				</if>
				<if test="searchType == 'DeptCode' and searchText != null">
					AND A.GroupCode = #{searchText} 
				</if>
				<if test="companyCode != null and companyCode != 'ORGROOT'">
					AND A.CompanyCode = #{companyCode}    
				</if>
			</trim>
		) B
		<trim prefix="ORDER BY">
			<if test="sortColumn != '' and sortDirection != ''">
			   <choose>
					<when test='sortColumn.equalsIgnoreCase("GroupCode")'>GroupCode</when>
					<when test='sortColumn.equalsIgnoreCase("SortKey")'>SortKey</when>
					<when test='sortColumn.equalsIgnoreCase("DisplayName")'>DisplayName</when>
					<when test='sortColumn.equalsIgnoreCase("ShortName")'>ShortName</when>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
					<when test='sortColumn.equalsIgnoreCase("IsHR")'>IsHR</when>
					<when test='sortColumn.equalsIgnoreCase("IsDisplay")'>IsDisplay</when>
					<when test='sortColumn.equalsIgnoreCase("IsMail")'>IsMail</when>
					<when test='sortColumn.equalsIgnoreCase("PrimaryMail")'>PrimaryMail</when>
					<when test='sortColumn.equalsIgnoreCase("ManagerCode")'>ManagerCode</when>
					<when test='sortColumn.equalsIgnoreCase("CompanyName")'>CompanyName</when>
					<when test='sortColumn.equalsIgnoreCase("MultiDisplayName")'>MultiDisplayName</when>
					<otherwise>SortPath</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
				<include refid="oracle.include.listOrderBy"/>
			</if> 
			<if test="sortColumn == '' or sortDirection == ''">
		 	  	IsUse DESC, SortPath ASC
		    </if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
    </select>
    
    <select id="selectParentName" parameterType="cmap" resultType="cmap">
    	SELECT     
   			  DisplayName AS "DisplayName"
   			, MultiDisplayName AS "MultiDisplayName"
   			, GroupPath AS "GroupPath"
  		FROM SYS_OBJECT_GROUP
   		WHERE GroupCode = #{gr_code}
    </select>
    
    <!-- 그룹유형 조회 -->
    <select id="selectGroupType" resultType="cmap">
        SELECT
			  GroupType AS "GroupType"
			, SortKey AS "SortKey"
			, Priority AS "Priority"
			, DisplayName AS "DisplayName"
			, MultiDisplayName AS "MultiDisplayName" 
        FROM SYS_OBJECT_GROUP_TYPE 
        WHERE GroupType <![CDATA[<>]]> 'UR' 
		AND IsUse = 'Y'
    </select>
    
    <select id="selectDeptInfo" parameterType="cmap" resultType="cmap">
        <![CDATA[
		SELECT
			  A.GroupID AS "GroupID"
			, A.GroupCode  AS "GroupCode"
			, A.GroupType AS "GroupType"
			, A.MemberOf AS "MemberOf"
			, A.DisplayName AS "DisplayName"
			, A.ShortName  AS "ShortName"
			, (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode=A.MemberOf) AS "ParentName"
			, A.GroupPath AS "GroupPath"
			, A.MultiDisplayName AS "MultiDisplayName"
			, A.MultiShortName AS "MultiShortName"
			, A.SortKey AS "SortKey"
			, A.SortPath AS "SortPath"
			, A.OUName  AS "OUName"
			, A.OUPath AS "OUPath"
			, A.IsUse AS "IsUse"
			, A.IsDisplay AS "IsDisplay"
			, A.IsMail AS "IsMail"
			, A.IsHR AS "IsHR"
			, A.PrimaryMail AS "PrimaryMail"
			, A.SecondaryMail AS "SecondaryMail"
			, A.Description AS "Description"
			, A.ReceiptUnitCode AS "ReceiptUnitCode"
			, A.ApprovalUnitCode AS "ApprovalUnitCode"
			, A.Receivable AS "Receivable"
			, A.Approvable AS "Approvable"
			, A.RegistDate AS "RegistDate"
			, A.ModifyDate AS "ModifyDate"
			, A.ManagerCode AS "ManagerCode"
			, NVL(A.ManagerCode|| '|' || (SELECT DisplayName FROM SYS_OBJECT_USER WHERE UserCode = A.ManagerCode), '') AS Manager
			, B.MultiDisplayName AS "CompanyName"
	        , B.GroupCode AS "CompanyCode"
		FROM SYS_OBJECT_GROUP A
		INNER JOIN SYS_OBJECT_GROUP B ON A.CompanyCode = B.GroupCode
		WHERE A.GroupCode = #{gr_code}
		]]>
    </select> 
    
    <select id="selectDeptInfoList" parameterType="cmap" resultType="cmap">
        <![CDATA[
		SELECT
        	  A.GroupID AS "GroupID"
			, A.GroupCode  AS "GroupCode"
			, A.GroupType AS "GroupType"
			, A.MemberOf AS "MemberOf"
			, A.DisplayName AS "DisplayName"
			, A.ShortName  AS "ShortName"
			, (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode=A.MemberOf) AS "ParentName"
			, A.GroupPath AS "GroupPath"
			, A.MultiDisplayName AS "MultiDisplayName"
			, A.MultiShortName AS "MultiShortName"
			, A.SortKey AS "SortKey"
			, A.SortPath AS "SortPath"
			, A.OUName  AS "OUName"
			, A.OUPath AS "OUPath"
			, A.IsUse AS "IsUse"
			, A.IsDisplay AS "IsDisplay"
			, A.IsMail AS "IsMail"
			, A.IsHR AS "IsHR"
			, A.PrimaryMail AS "PrimaryMail"
			, A.SecondaryMail AS "SecondaryMail"
			, A.Description AS "Description"
			, A.ReceiptUnitCode AS "ReceiptUnitCode"
			, A.ApprovalUnitCode AS "ApprovalUnitCode"
			, A.Receivable AS "Receivable"
			, A.Approvable AS "Approvable"
			, A.RegistDate AS "RegistDate"
			, A.ModifyDate AS "ModifyDate"
			, A.ManagerCode AS "ManagerCode"
        	, NVL(A.ManagerCode|| '|' || (SELECT DisplayName FROM SYS_OBJECT_USER WHERE UserCode = A.ManagerCode), '') AS Manager
        	, B.MultiDisplayName AS "CompanyName"
	        , B.GroupCode AS "CompanyCode"
		FROM SYS_OBJECT_GROUP A
		INNER JOIN SYS_OBJECT_GROUP B ON A.CompanyCode = B.GroupCode
		WHERE A.GroupCode IN
		]]>
		<foreach collection="TargetID" item="item"  separator="," open="(" close=")">
		    #{item}
		</foreach>
    </select> 
    
	<select id="selectDefaultSetInfo" parameterType="cmap" resultType="cmap">
        SELECT
			  A.DisplayName AS DeptName
        	, B.DisplayName AS CompanyName
        	, C.DomainID AS CompanyID
			, C.MailDomain AS CompanyURL
		FROM SYS_OBJECT_GROUP A
		INNER JOIN SYS_OBJECT_GROUP B ON A.CompanyCode = B.GroupCode AND B.GroupType = 'Company'
		INNER JOIN sys_object_domain C ON B.GroupCode = C.DomainCode
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="domainCode != null">
				AND B.GroupCode = #{domainCode} 
			</if>
	        <if test="gr_code != null">
		    	AND A.GroupCode = #{gr_code} 
		  	</if>
		</trim> 
    </select>
    
    <select id="selectGroupMail" parameterType="cmap" resultType="java.lang.String">
    	<![CDATA[
	    SELECT CASE WHEN NVL(PrimaryMail,' ') <> ' ' AND IsMail = 'Y' THEN PrimaryMail ELSE '' END AS PrimaryMail  
	    FROM SYS_OBJECT_GROUP WHERE GroupCode = #{GroupCode} 
	    ]]>
	</select>
    
    <update id="updateIsUseDept" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_GROUP
		SET
			IsUse = #{IsUse},
			ModifyDate = TO_DATE(#{ModifyDate},'yyyy/mm/dd hh24:mi:ss')
		WHERE GroupCode = #{GroupCode}
		]]>
	</update>  
     
    <update id="updateIsHRDept" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_GROUP
		SET
			IsHR = #{IsHR},
			ModifyDate = TO_DATE(#{ModifyDate},'yyyy/mm/dd hh24:mi:ss')
		WHERE GroupCode = #{GroupCode}
		]]>
	</update>  
     
    <update id="updateIsDisplayDept" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_GROUP
		SET
			IsDisplay = #{IsDisplay},
			ModifyDate = TO_DATE(#{ModifyDate},'yyyy/mm/dd hh24:mi:ss')
		WHERE GroupCode = #{GroupCode}
		]]>
	</update>
    	
    <update id="updateIsMailDept" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_GROUP
		SET
			IsMail = #{IsMail},
			ModifyDate = TO_DATE(#{ModifyDate},'yyyy/mm/dd hh24:mi:ss')
		WHERE GroupCode = #{GroupCode}
		]]>
	</update>
	
    <select id="selectHasChildDept" parameterType="cmap" resultType="cmap">
		SELECT 
			(SELECT COUNT(0) FROM SYS_OBJECT_GROUP B WHERE B.MemberOf = A.GroupCode AND B.IsUse = 'Y') AS HasChild
		FROM SYS_OBJECT_GROUP A
		WHERE A.GroupCode = #{GroupCode} 
    </select> 
    
     <select id="selectHasUserDept" parameterType="cmap" resultType="cmap">
		SELECT COUNT(UserCode) AS HasUser
		FROM  SYS_OBJECT_USER_BASEGROUP
		WHERE DeptCode = #{GroupCode} 
    </select>
	
	<select id="selectIsDuplicateDeptCode" parameterType="cmap" resultType="cmap">
		SELECT MAX(isDuplicate) AS "isDuplicate"
		FROM (
			SELECT COUNT(0) AS isDuplicate
			FROM SYS_OBJECT
			WHERE LOWER(ObjectCode) = LOWER(#{GroupCode}) 
			UNION ALL
			SELECT COUNT(0) AS isDuplicate
			FROM SYS_OBJECT_GROUP
			WHERE LOWER(GroupCode) = LOWER(#{GroupCode}) 
		) a
    </select> 
    
	<select id="selectIsDuplicateSortKey" parameterType="cmap" resultType="cmap">
		SELECT 
		      (SELECT COUNT(0) FROM SYS_OBJECT_GROUP WHERE MemberOf = #{MemberOf} AND SortKey = #{SortKey}) AS isDuplicate
		    , NVL((SELECT MAX(SortKey) FROM SYS_OBJECT_GROUP WHERE MemberOf = #{MemberOf}),'0') AS MaxSortKey
		FROM DUAL
    </select>
    
    <!-- 도메인 선택시 해당 도메인의 그룹을 가져옴 -->
    <select id="selectGroupList" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT
			  'group' AS "itemType"
			, dn.GroupCode AS "DomainCode"
			, gr.GroupCode AS "GroupCode"
			, gr.GroupType AS "GroupType"
			, gr.DisplayName AS "GroupName"
			, dn.DisplayName AS "DomainName"
			, gr.PrimaryMail AS "PrimaryMail"
			, gr.MemberOf AS "MemberOf"
			, gr.SortKey AS "SortKey"
			, NVL(gr.SortPath, '') AS "SortPath"
			, gr.GroupID AS "GroupID"
			, gr.IsUse AS "IsUse"
			,(SELECT COUNT(0) FROM SYS_OBJECT_GROUP sog WHERE sog.MemberOf = gr.GroupCode AND sog.IsUse = 'Y') AS "hasChild"
		FROM SYS_OBJECT_GROUP gr
		INNER JOIN SYS_OBJECT_DOMAIN dm ON gr.CompanyCode = dm.DomainCode
		LEFT JOIN SYS_OBJECT_GROUP dn ON gr.CompanyCode = dn.GroupCode
		]]>
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
			AND (gr.MemberOf != 'NOUSE' OR gr.MemberOf IS NULL)
			AND (gr.MemberOf != 'NOUNIT' OR gr.MemberOf IS NULL)
			<if test="domaincode != null and domaincode != ''">
				AND gr.CompanyCode = #{domaincode}
			</if>
			<if test="grouptype != null and grouptype=='group'">
				AND gr.GroupType NOT IN ('Dept')
			</if>
		</trim>
		ORDER BY gr.SortPath ASC
	</select>
	
 	<!-- 지역 개별 정보 가져오기 -->
    <select id="selectRegionInfo" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT   
			  'group' AS "itemType"
			, dn.GroupCode AS "DomainCode"
			, gr.GroupCode AS "GroupCode"
			, gr.GroupType AS "GroupType"
			, gr.DisplayName AS "GroupName"
			, gr.MultiDisplayName AS "MultiGroupName"
			, dn.DisplayName AS "CompanyName"
			, gr.PrimaryMail AS "PrimaryMail"	
			, gr.MemberOf AS "MemberOf"
			, NVL(SUBSTR(gr.MemberOf,1, INSTR(gr.MemberOf,'_') -1), gr.MemberOf) AS "CompanyID"
			, gr.SortKey AS "SortKey"
			, NVL(gr.SortPath, '') AS "SortPath"
			, gr.GroupID AS "GroupID"
			, gr.IsUse AS "IsUse"
			, gr.IsHR AS "IsHR"
			, gr.IsMail AS "IsMail"
			, gr.Description AS "Description"
			, (SELECT COUNT(0) FROM SYS_OBJECT_GROUP sog WHERE sog.MemberOf = gr.GroupCode AND sog.IsUse = 'Y') AS hasChild
		FROM SYS_OBJECT_GROUP gr
		LEFT JOIN SYS_OBJECT_GROUP dn on gr.CompanyCode = dn.GroupCode
	    ]]>
	    WHERE gr.GroupType = 'Region' 
        <if test="gr_code != null ">
	  		AND gr.GroupCode = #{gr_code}
	   </if>
	</select>
	
	<!-- 임의그룹 드롭다운 리스트 가져오기 -->
    <select id="selectArbitraryGroupDropDownList" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT
			  gr.GroupType AS "GroupType"
			, gr.GroupCode AS "GroupCode"
			, gr.DisplayName AS "GroupName"
	    FROM SYS_OBJECT_GROUP gr
	    ]]>
	    WHERE gr.IsUse = 'Y' 
        AND gr.GroupType in ('JobTitle', 'JobPosition', 'JobLevel') 
        <if test="domaincode != null">
			AND gr.CompanyCode = #{domaincode}
	  	</if>
	    ORDER BY gr.GroupType, (gr.SortKey+0) ASC
	</select>
    
    <!-- 임의그룹 개별 정보 가져오기 -->
    <select id="selectArbitraryGroupInfo" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT
			  'group' AS "itemType"
			, dn.GroupCode AS "DomainCode"
			, gr.GroupCode AS "GroupCode"
			, gr.GroupType AS "GroupType"
			, gr.DisplayName AS "GroupName"
			, gr.MultiDisplayName AS "MultiGroupName"
			, dn.DisplayName AS "CompanyName"
			, dn.MultiDisplayName AS "MultiCompanyName"
			, gr.PrimaryMail AS "PrimaryMail"				
			, gr.MemberOf AS "MemberOf"
			, NVL(SUBSTR(gr.MemberOf,1, INSTR(gr.MemberOf,'_') -1),gr.MemberOf)	AS "CompanyID"
			, gr.SortKey AS "SortKey"
			, NVL(gr.SortPath, '') AS "SortPath"
			, gr.GroupID AS "GroupID"
			, gr.IsUse AS "IsUse"
			, gr.IsHR AS "IsHR"
			, gr.IsMail AS "IsMail"
			, gr.Description AS "Description"
			, (SELECT COUNT(0) FROM SYS_OBJECT_GROUP sog WHERE sog.MemberOf =gr.GroupCode AND sog.IsUse = 'Y') AS hasChild
		FROM SYS_OBJECT_GROUP gr
		LEFT JOIN SYS_OBJECT_GROUP dn on gr.CompanyCode = dn.GroupCode
	    ]]>
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="gr_code != null ">
		  		gr.GroupCode = #{gr_code}
			</if>
		</trim>
	</select>
	
	<!-- 임의그룹 리스트 가져오기(cnt) -->
    <select id="selectArbitraryGroupListCnt" parameterType="cmap" resultType="java.lang.Long">
	    <![CDATA[
		SELECT COUNT(*) 
		FROM SYS_OBJECT_GROUP gr
		LEFT JOIN SYS_OBJECT_GROUP dn on gr.CompanyCode = dn.GroupCode
	    ]]>
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
	        AND (gr.MemberOf != 'NOUSE' OR gr.MemberOf IS NULL)
	        AND (gr.MemberOf != 'NOUNIT' OR gr.MemberOf IS NULL)
	        <if test="domaincode != null">
				AND gr.CompanyCode = #{domaincode}
			</if>
			<if test="grouptype != null and grouptype=='title'">
				AND gr.GroupType = 'JobTitle'
			</if>
			<if test="grouptype != null and grouptype=='position'">
				AND gr.GroupType = 'JobPosition'
			</if>
			<if test="grouptype != null and grouptype=='level'">
				AND gr.GroupType = 'JobLevel'
			</if>
			<if test="IsUse != null  and IsUse != 'All'.toString()">
				AND gr.IsUse = #{IsUse}
			</if>
			<if test="IsHR != null  and IsHR != 'All'.toString()">
				AND gr.IsHR = #{IsHR}
			</if>
			<if test="IsMail != null  and IsMail != 'All'.toString()">
				AND gr.IsMail = #{IsMail}
			</if>
			<if test="searchType != null and searchText != null">
				<choose>
					<when test="searchType == 'DisplayName'.toString()">
						AND gr.DisplayName LIKE '%'||#{searchText}||'%'
					</when>
					<when test="searchType == 'JobTitleCode'.toString()">
						AND gr.GroupCode  LIKE '%'||#{searchText}||'%'
					</when>
					<when test="searchType == 'JobLevelCode'.toString()">
						AND gr.GroupCode  LIKE '%'||#{searchText}||'%'
					</when>
					<when test="searchType == 'JobPositionCode'.toString()">
						AND gr.GroupCode  LIKE '%'||#{searchText}||'%'
					</when>
				</choose>
			</if>
		</trim>
    </select>
    
	<!-- 임의그룹 리스트 가져오기(list) -->
	<select id="selectArbitraryGroupList" parameterType="cmap" resultType="cmap">
        <include refid="oracle.include.pagingHeader" />
        SELECT
			  itemType AS "itemType"
			, DomainCode AS "DomainCode"
			, MultiDomainCode AS "MultiDomainCode"
			, GroupCode AS "GroupCode"
			, GroupType AS "GroupType"
			, GroupName AS "GroupName"
			, MultiGroupName AS "MultiGroupName"
			, DomainName AS "DomainName"
			, PrimaryMail AS "PrimaryMail"
			, MemberOf AS "MemberOf"
			, SortKey AS "SortKey"
			, SortPath AS "SortPath"
			, GroupID AS "GroupID"
			, IsUse AS "IsUse"
			, IsHR AS "IsHR"
			, IsMail AS "IsMail"
			, hasChild AS "hasChild"
			, Description AS "Description"
		FROM (
			SELECT
				  'group' AS itemType
				, dn.GroupCode AS DomainCode
				, dn.MultiDisplayName AS MultiDomainCode
				, gr.GroupCode AS GroupCode
				, gr.GroupType AS GroupType
				, gr.DisplayName AS GroupName
				, gr.MultiDisplayName AS MultiGroupName
				, dn.DisplayName AS DomainName
				, gr.PrimaryMail AS PrimaryMail
				, gr.MemberOf AS MemberOf
				, gr.SortKey AS SortKey
				, NVL(gr.SortPath, '') AS SortPath
				, gr.GroupID AS GroupID
				, gr.IsUse AS IsUse
				, gr.IsHR AS IsHR
				, gr.IsMail AS IsMail
				, (SELECT COUNT(0) FROM SYS_OBJECT_GROUP sog WHERE sog.MemberOf = gr.GroupCode AND sog.IsUse = 'Y') AS hasChild
				, gr.Description AS Description
			FROM SYS_OBJECT_GROUP gr
			LEFT JOIN SYS_OBJECT_GROUP dn ON gr.CompanyCode = dn.GroupCode
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				AND (gr.MemberOf != 'NOUSE' OR gr.MemberOf IS NULL)
				AND (gr.MemberOf != 'NOUNIT' OR gr.MemberOf IS NULL)
				<if test="domaincode != null">
					AND gr.CompanyCode = #{domaincode}
				</if>
				<if test="grouptype != null and grouptype=='title'">
					AND gr.GroupType = 'JobTitle'
				</if>
				<if test="grouptype != null and grouptype=='position'">
					AND gr.GroupType = 'JobPosition'
				</if>
				<if test="grouptype != null and grouptype=='level'">
					AND gr.GroupType = 'JobLevel'
				</if>
				<if test="IsUse != null  and IsUse != 'All'.toString()">
					AND gr.IsUse = #{IsUse}
				</if>
				<if test="IsHR != null  and IsHR != 'All'.toString()">
					AND gr.IsHR = #{IsHR}
				</if>
				<if test="IsMail != null  and IsMail != 'All'.toString()">
					AND gr.IsMail = #{IsMail}
				</if>
				<if test="searchType != null and searchText != null">
					<choose>
						<when test="searchType == 'DisplayName'.toString()">
							AND gr.DisplayName LIKE '%'||#{searchText}||'%'
						</when>
						<when test="searchType == 'JobTitleCode'.toString()">
							AND gr.GroupCode LIKE '%'||#{searchText}||'%'
						</when>
						<when test="searchType == 'JobLevelCode'.toString()">
							AND gr.GroupCode  LIKE '%'||#{searchText}||'%'
						</when>
						<when test="searchType == 'JobPositionCode'.toString()">
							AND gr.GroupCode  LIKE '%'||#{searchText}||'%'
						</when>
					</choose>
				</if>
			</trim>
        ) A
		<trim prefix="ORDER BY">
			<if test="sortColumn != null and sortDirection != null">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("GroupName")'>GroupName</when>
					<when test='sortColumn.equalsIgnoreCase("SortKey")'>TO_NUMBER(SortKey)</when>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
					<when test='sortColumn.equalsIgnoreCase("IsHR")'>IsHR</when>
					<when test='sortColumn.equalsIgnoreCase("IsMail")'>IsMail</when>
					<when test='sortColumn.equalsIgnoreCase("PrimaryMail")'>PrimaryMail</when>
					<when test='sortColumn.equalsIgnoreCase("Description")'>Description</when>
					<otherwise>GroupCode</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
				<include refid="oracle.include.listOrderBy"/>
			</if> 
			<if test="sortColumn == null or sortDirection == null">
				TO_NUMBER(SortKey) ASC
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>
	
	<select id="selectDeptEtcInfo" parameterType="cmap" resultType="cmap">
 	    SELECT 
 	    	  GroupPath AS "GroupPath"
 	    	, SortPath AS "SortPath"
 	    	, OUPath AS "OUPath"
 	    	, (SELECT GroupID FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode}) AS CompanyID
 	    FROM SYS_OBJECT_GROUP
 	    WHERE GroupCode = #{MemberOf}
 	</select>
 	
    <!-- 임의 그룹 중복 여부 조회 -->
    <select id="selectIsDuplicateGroupCode" parameterType="cmap" resultType="cmap">
		SELECT COUNT(0) AS isDuplicate
		FROM SYS_OBJECT_GROUP
		WHERE LOWER(GroupCode) = LOWER(#{GroupCode}) 
    </select> 
    
   	<!-- 임의 그룹 삽입 정보 select(path 등) -->
    <select id="selectGroupInsertData" parameterType="cmap" resultType="cmap">
		SELECT GroupPath AS "GroupPath", OUPath AS "OUPath", SortPath AS "SortPath"
		FROM SYS_OBJECT_GROUP
		WHERE GroupCode = #{GroupCode} 
    </select> 
	
	<select id="selectRegionListCnt" parameterType="cmap" resultType="java.lang.Long">
	    <![CDATA[
		SELECT COUNT(*) 
		FROM SYS_OBJECT_GROUP gr
		LEFT JOIN SYS_OBJECT_GROUP dn ON gr.CompanyCode = dn.GroupCode
	    ]]>
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
			AND (gr.MemberOf != 'NOUSE' OR gr.MemberOf IS NULL)
			AND (gr.MemberOf != 'NOUNIT' OR gr.MemberOf IS NULL)
			AND gr.GroupType = 'Region'
			AND gr.CompanyCode = #{domain}
			<if test="IsUse != null  and IsUse != 'All'.toString()">
				AND gr.IsUse = #{IsUse}
			</if>
			<if test="IsHR != null  and IsHR != 'All'.toString()">
				AND gr.IsHR = #{IsHR}
			</if>
			<if test="IsMail != null  and IsMail != 'All'.toString()">
				AND gr.IsMail = #{IsMail}
			</if>
			<if test="searchType != null and searchText != null">
				<choose>
					 <when test="searchType == 'DisplayName'.toString()">
						 AND gr.DisplayName LIKE '%'||#{searchText}||'%'
					 </when>
					 <when test="searchType == 'RegionCode'.toString()">
					     AND gr.GroupCode LIKE '%'||#{searchText}||'%'
					 </when>
				</choose>
			</if>
		</trim>
    </select>
	
    <select id="selectRegionList" parameterType="cmap" resultType="cmap">
        <include refid="oracle.include.pagingHeader" />
		SELECT
			  gr.itemType AS "itemType"
			, gr.DomainCode AS "DomainCode"
			, gr.MultiDomainCode AS "MultiDomainCode"
			, gr.GroupCode AS "GroupCode"
			, gr.GroupType AS "GroupType"
			, gr.GroupName AS "GroupName"
			, gr.MultiGroupName AS "MultiGroupName"
			, gr.DomainName AS "DomainName"
			, gr.PrimaryMail AS "PrimaryMail"
			, gr.MemberOf AS "MemberOf"
			, gr.SortKey AS "SortKey"
			, gr.SortPath AS "SortPath"
			, gr.GroupID AS "GroupID"
			, gr.IsUse AS "IsUse"
			, gr.IsHR AS "IsHR"
			, gr.IsMail AS "IsMail"
			, gr.hasChild AS "hasChild"
			, gr.Description AS "Description"
		FROM (
			<![CDATA[
			SELECT
				  'group' AS itemType
				, dn.GroupCode AS DomainCode
				, dn.MultiDisplayName AS MultiDomainCode
				, gr.GroupCode
				, gr.GroupType
				, gr.DisplayName AS GroupName
				, gr.MultiDisplayName AS MultiGroupName
				, dn.DisplayName AS DomainName
				, gr.PrimaryMail			
				, gr.MemberOf
				, gr.SortKey
				, NVL(gr.SortPath, '') AS SortPath
				, gr.GroupID
				, gr.IsUse
				, gr.IsHR
				, gr.IsMail
				, (SELECT COUNT(0) FROM SYS_OBJECT_GROUP sog WHERE sog.MemberOf = gr.GroupCode AND sog.IsUse = 'Y') AS hasChild 
				, gr.Description
			FROM SYS_OBJECT_GROUP gr
			LEFT JOIN SYS_OBJECT_GROUP dn ON gr.CompanyCode = dn.GroupCode
			]]>
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				AND (gr.MemberOf != 'NOUSE' OR gr.MemberOf IS NULL)
				AND (gr.MemberOf != 'NOUNIT' OR gr.MemberOf IS NULL)
				AND gr.GroupType = 'Region'
				AND gr.CompanyCode = #{domain}
				<if test="IsUse != null  and IsUse != 'All'.toString()">
					AND gr.IsUse = #{IsUse}
				</if>
				<if test="IsHR != null  and IsHR != 'All'.toString()">
					AND gr.IsHR = #{IsHR}
				</if>
				<if test="IsMail != null  and IsMail != 'All'.toString()">
					AND gr.IsMail = #{IsMail}
				</if>
				<if test="searchType != null and searchText != null">
					<choose>
					 	<when test="searchType == 'DisplayName'.toString()">
							AND gr.DisplayName  like '%#{searchText}%'
						</when>
						<when test="searchType == 'RegionCode'.toString()">
							AND gr.GroupCode  like '%#{searchText}%'
					 	</when>
					</choose>
				</if>
			</trim>
		) gr 
		WHERE 1=1
		<trim prefix="ORDER BY">  
			<if test="sortColumn != null and sortDirection != null">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("DomainName")'>DomainName</when>
					<when test='sortColumn.equalsIgnoreCase("GroupCode")'>GroupCode</when>
					<when test='sortColumn.equalsIgnoreCase("GroupName")'>GroupName</when>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
					<when test='sortColumn.equalsIgnoreCase("IsHR")'>IsHR</when>
					<when test='sortColumn.equalsIgnoreCase("IsMail")'>IsMail</when>
					<when test='sortColumn.equalsIgnoreCase("PrimaryMail")'>PrimaryMail</when>
					<when test='sortColumn.equalsIgnoreCase("Description")'>Description</when>
					<when test='sortColumn.equalsIgnoreCase("MultiGroupName")'>MultiGroupName</when>
					<otherwise>TO_NUMBER(SortKey)</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if> 
			<if test="sortColumn == null or sortDirection == null">
				TO_NUMBER(SortKey) ASC
			</if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>
	
	<!-- 겸직 -->
	<!-- 겸직 리스트 가져오기(cnt) -->
    <select id="selectAddJobListCnt" parameterType="cmap" resultType="java.lang.Long">
		<![CDATA[
		SELECT COUNT(*)
		FROM SYS_OBJECT_USER_BASEGROUP BG
		INNER JOIN SYS_OBJECT_USER A ON BG.UserCode = A.UserCode
	    ]]>
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
			BG.JobType = 'AddJob' 
			<if test="IsHR != null  and IsHR != 'All'.toString()">
				AND BG.IsHR = #{IsHR}
			</if>
			<if test="searchType != null and searchText != null">
				<choose>
					<when test="searchType == 'Users'.toString()">
						AND A.MultiDisplayName LIKE '%'||#{searchText}||'%'
					</when>
					<when test="searchType == 'Company'.toString()">
						AND BG.MultiCompanyName LIKE '%'||#{searchText}||'%'
					</when>
					<when test="searchType == 'Dept'.toString()">
						AND BG.MultiDeptName LIKE '%'||#{searchText}||'%'
					</when>
					<when test="searchType == 'JobTitle'.toString()">
						AND BG.MultiJobTitleName LIKE '%'||#{searchText}||'%'
					</when>
					<when test="searchType == 'JobPosition'.toString()">
						AND BG.MultiJobPositionName LIKE '%'||#{searchText}||'%'
					</when>
					<when test="searchType == 'JobLevel'.toString()">
						AND BG.MultiJobLevelName LIKE '%'||#{searchText}||'%'
					</when>
				</choose>
			</if>
			<if test="CompanyCode != null">
				AND BG.CompanyCode = #{CompanyCode}
			</if>
		</trim>
    </select>
	
	<!-- 겸직 리스트 가져오기(list) -->
    <select id="selectAddJobList" parameterType="cmap" resultType="cmap">
        <include refid="oracle.include.pagingHeader" />
		SELECT
			  BG.Seq AS NO
			, BG.UserCode AS "UserCode"
			, BG.UserName AS "UserName"
			, BG.MultiUserName AS "MultiUserName"
			, BG.CompanyCode AS "CompanyCode"
			, BG.CompanyName AS "CompanyName"
			, BG.MultiCompanyName AS "MultiCompanyName"
			, BG.DeptCode AS "DeptCode"
			, BG.DeptName AS "DeptName"
			, BG.MultiDeptName AS "MultiDeptName"
			, BG.JobTitleCode AS "JobTitleCode"
			, BG.JobTitleName AS "JobTitleName"
			, BG.MultiJobTitleName AS "MultiJobTitleName"
			, BG.JobPositionCode AS "JobPositionCode"
			, BG.JobPositionName AS "JobPositionName"
			, BG.MultiJobPositionName AS "MultiJobPositionName"
			, BG.JobLevelCode AS "JobLevelCode"
			, BG.JobType AS "JobType"
			, BG.JobLevelName AS "JobLevelName"
			, BG.MultiJobLevelName AS "MultiJobLevelName"
			, BG.IsHR AS "IsHR"
			, BG.SortKey AS "SortKey"
		FROM (
			<![CDATA[
			SELECT 		
				  BG.Seq
				, BG.UserCode
				, ur.DisplayName AS UserName
				, ur.MultiDisplayName AS MultiUserName
				, BG.CompanyCode
				, BG.CompanyName
				, BG.MultiCompanyName
				, BG.DeptCode
				, BG.DeptName
				, BG.MultiDeptName
				, BG.JobTitleCode
				, BG.JobTitleName
				, BG.MultiJobTitleName
				, BG.JobPositionCode
				, BG.JobPositionName
				, BG.MultiJobPositionName
				, BG.JobLevelCode
				, BG.JobType
				, BG.JobLevelName
				, BG.MultiJobLevelName
				, BG.IsHR
				, ur.SortKey
			FROM SYS_OBJECT_USER_BASEGROUP BG
			INNER JOIN SYS_OBJECT_USER ur ON BG.UserCode = ur.UserCode
	    	]]>
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				BG.JobType = 'AddJob' 
				<if test="IsHR != null  and IsHR != 'All'.toString()">
					AND BG.IsHR = #{IsHR}
				</if>
				<if test="searchType != null and searchText != null">
					<choose>
						<when test="searchType == 'Users'.toString()">
							AND ur.MultiDisplayName LIKE '%'||#{searchText}||'%'
						</when>
						<when test="searchType == 'Company'.toString()">
							AND BG.MultiCompanyName LIKE '%'||#{searchText}||'%'
						</when>
						<when test="searchType == 'Dept'.toString()">
							AND BG.MultiDeptName LIKE '%'||#{searchText}||'%'
						</when>
						<when test="searchType == 'JobTitle'.toString()">
							AND BG.MultiJobTitleName LIKE '%'||#{searchText}||'%'
						</when>
						<when test="searchType == 'JobPosition'.toString()">
							AND BG.MultiJobPositionName LIKE '%'||#{searchText}||'%'
						</when>
						<when test="searchType == 'JobLevel'.toString()">
							AND BG.MultiJobLevelName LIKE '%'||#{searchText}||'%'
						</when>
					</choose>
				</if>
				<if test="CompanyCode != null">
					AND BG.CompanyCode = #{CompanyCode}
				</if>
			</trim>
		)BG
		<trim prefix="ORDER BY">  
			<if test="sortColumn != null and sortDirection != null">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("CompanyName")'>CompanyName</when>
					<when test='sortColumn.equalsIgnoreCase("DeptName")'>DeptName</when>
					<when test='sortColumn.equalsIgnoreCase("JobTitleName")'>JobTitleName</when>
					<when test='sortColumn.equalsIgnoreCase("JobPositionName")'>JobPositionName</when>
					<when test='sortColumn.equalsIgnoreCase("JobLevelName")'>JobLevelName</when>
					<when test='sortColumn.equalsIgnoreCase("IsHR")'>IsHR</when>
					<otherwise>UserName</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if> 
			<if test="sortColumn == null or sortDirection == null">
				UserName ASC
		    </if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>
	
	<select id="selectUserAddJobListCnt" parameterType="cmap" resultType="java.lang.Long">
		<![CDATA[
		SELECT COUNT(*)
		FROM SYS_OBJECT_USER_BASEGROUP BG
		INNER JOIN SYS_OBJECT_USER UR ON BG.UserCode = UR.UserCode
    	]]>
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
	       	BG.JobType = 'AddJob' 
			<if test="UserCode != null  and UserCode != ''">
			  	AND BG.UserCode = #{UserCode}
			</if>
		</trim>
	</select>
	
    <delete id="deleteObjectUserBasegroup" parameterType="cmap">
        DELETE FROM SYS_OBJECT_USER_BASEGROUP WHERE Seq = #{Seq}
    </delete>
    
    <delete id="deleteObjectUserBasegroupForAddjob" parameterType="cmap">
        DELETE FROM SYS_OBJECT_USER_BASEGROUP 
		WHERE JobType = 'AddJob'
		AND UserCode = #{UserCode}
		AND CompanyCode = #{CompanyCode}
		AND DeptCode = #{DeptCode}
		<if test="JobPositionCode != null and JobPositionCode != ''">
			AND JobPositionCode = #{JobPositionCode}
		</if>
		<if test="JobPositionCode == null or JobPositionCode == ''">
			AND JobPositionCode IS NULL
		</if>
		<if test="JobTitleCode != null and JobTitleCode != ''">
			AND JobTitleCode = #{JobTitleCode}	
		</if>
		<if test="JobTitleCode == null or JobTitleCode == ''">
			AND JobTitleCode IS NULL
		</if>
		<if test="JobLevelCode != null and JobLevelCode != ''">
			AND JobLevelCode = #{JobLevelCode}
		</if>
		<if test="JobLevelCode == null or JobLevelCode == ''">
			AND JobLevelCode IS NULL
		</if>
    </delete>
	
	<!-- 겸직 개별 정보 가져오기 -->
    <select id="selectAddJobInfo" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT 
			  BG.Seq AS NO
			, BG.UserCode AS "UserCode"
			, BG.JobType AS "JobType"
			, ur.DisplayName AS "UserName"
			, ur.MultiDisplayName AS "MultiUserName"
			, BG.CompanyCode AS "CompanyCode"
			, BG.CompanyName AS "CompanyName"
			, BG.MultiCompanyName AS "MultiCompanyName"
			, BG.DeptCode AS "DeptCode"
			, BG.DeptName AS "DeptName"
			, BG.MultiDeptName AS "MultiDeptName"
			, BG.JobTitleCode AS "JobTitleCode"
			, BG.JobTitleName AS "JobTitleName"
			, BG.MultiJobTitleName AS "MultiJobTitleName"
			, BG.JobPositionCode AS "JobPositionCode"
			, BG.JobPositionName AS "JobPositionName"
			, BG.MultiJobPositionName AS "MultiJobPositionName"
			, BG.JobLevelCode AS "JobLevelCode"
			, BG.JobType AS "JobType"
			, BG.JobLevelName AS "JobLevelName"
			, BG.MultiJobLevelName AS "MultiJobLevelName"
			, ur.IsHR AS "IsHR"
		FROM SYS_OBJECT_USER_BASEGROUP BG
		INNER JOIN SYS_OBJECT_USER ur ON BG.UserCode = ur.UserCode
		]]>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			BG.JobType = 'AddJob' 
			<if test="id != null ">
				AND BG.Seq = #{id}
			</if>
		</trim>
	</select>
	
	<!-- 겸직  정보 가져오기 -->
    <select id="selectAddJobInfoList" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT 
			  BG.Seq AS NO
			, BG.UserCode AS "UserCode"
			, BG.JobType AS "JobType"
			, ur.DisplayName AS "UserName"
			, ur.MultiDisplayName AS "MultiUserName"
			, BG.CompanyCode AS "CompanyCode"
			, BG.CompanyName AS "CompanyName"
			, BG.MultiCompanyName AS "MultiCompanyName"
			, BG.DeptCode AS "DeptCode"
			, BG.DeptName AS "DeptName"
			, BG.MultiDeptName AS "MultiDeptName"
			, BG.JobTitleCode AS "JobTitleCode"
			, BG.JobTitleName AS "JobTitleName"
			, BG.MultiJobTitleName AS "MultiJobTitleName"
			, BG.JobPositionCode AS "JobPositionCode"
			, BG.JobPositionName AS "JobPositionName"
			, BG.MultiJobPositionName AS "MultiJobPositionName"
			, BG.JobLevelCode AS "JobLevelCode"
			, BG.JobType AS "JobType"
			, BG.JobLevelName AS "JobLevelName"
			, BG.MultiJobLevelName AS "MultiJobLevelName"
			, BG.IsHR AS "IsHR"
		FROM SYS_OBJECT_USER_BASEGROUP BG
		INNER JOIN SYS_OBJECT_USER ur ON BG.UserCode = ur.UserCode
		]]>
		WHERE Seq = #{Seq}
	</select>
	
 	<!-- 겸직 목록 설정 변경 => 테이블 구조 변경으로 인하여 보류 -->
    <update id="updateAddJobSetting" parameterType="cmap" >
 		UPDATE SYS_OBJECT_USER_BASEGROUP
 		SET 
 			IsHR = #{ToBeValue}
 		WHERE Seq = #{id}
 		AND JobType ='AddJob'
 	</update>
 	
 	<!-- 겸직 수정  -->
 	<update id="updateAddJob" parameterType="cmap" > 		  
		UPDATE SYS_OBJECT_USER_BASEGROUP AS BG
		LEFT JOIN SYS_OBJECT_GROUP AS COMPANY ON COMPANY.GroupType = 'Company' AND COMPANY.GroupCode = #{AddJob_Company}  
		LEFT JOIN SYS_OBJECT_GROUP AS DEPT ON DEPT.GroupType = 'Dept' AND DEPT.GroupCode = #{AddJob_Group}
		LEFT JOIN SYS_OBJECT_GROUP AS JobTitle ON JobTitle.GroupType = 'JobTitle' AND JobTitle.GroupCode = #{AddJob_Title}
		LEFT JOIN SYS_OBJECT_GROUP AS JobPosition ON JobPosition.GroupType = 'JobPosition' AND JobPosition.GroupCode = #{AddJob_Position}
		LEFT JOIN SYS_OBJECT_GROUP AS JobLevel ON JobLevel.GroupType = 'JobLevel' AND JobLevel.GroupCode = #{AddJob_Level}
		SET
			  BG.CompanyCode			= #{AddJob_Company}
			, BG.CompanyName			= (SELECT DisplayName FROM SYS_OBJECT_GROUP AS COMPANY WHERE COMPANY.GroupType = 'Company' AND COMPANY.GroupCode = #{AddJob_Company} )
			, BG.MultiCompanyName		= (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP AS COMPANY WHERE COMPANY.GroupType = 'Company' AND COMPANY.GroupCode = #{AddJob_Company} )
			, BG.CompanySortKey			= (SELECT SortKey FROM SYS_OBJECT_GROUP AS COMPANY WHERE COMPANY.GroupType = 'Company' AND COMPANY.GroupCode = #{AddJob_Company} )
			, BG.DeptCode				= #{AddJob_Group}
			, BG.DeptName				= (SELECT DisplayName FROM SYS_OBJECT_GROUP AS DEPT WHERE DEPT.GroupType = 'Dept' AND DEPT.GroupCode = #{AddJob_Group})
			, BG.MultiDeptName			= (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP AS DEPT WHERE DEPT.GroupType = 'Dept' AND DEPT.GroupCode = #{AddJob_Group})
			, BG.DeptSortKey			= (SELECT SortKey FROM SYS_OBJECT_GROUP AS DEPT WHERE DEPT.GroupType = 'Dept' AND DEPT.GroupCode = #{AddJob_Group})
			, BG.JobLevelCode			= #{AddJob_Level}
			, BG.JobLevelName			= (SELECT DisplayName FROM SYS_OBJECT_GROUP AS JobLevel WHERE JobLevel.GroupType = 'JobLevel' AND JobLevel.GroupCode = #{AddJob_Level})
			, BG.MultiJobLevelName		= (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP AS JobLevel WHERE JobLevel.GroupType = 'JobLevel' AND JobLevel.GroupCode = #{AddJob_Level})
			, BG.JobLevelSortKey		= (SELECT SortKey FROM SYS_OBJECT_GROUP AS JobLevel WHERE JobLevel.GroupType = 'JobLevel' AND JobLevel.GroupCode = #{AddJob_Level})
			, BG.JobPositionCode		= #{AddJob_Position}
			, BG.JobPositionName		= (SELECT DisplayName FROM SYS_OBJECT_GROUP AS JobPosition WHERE JobPosition.GroupType = 'JobPosition' AND JobPosition.GroupCode = #{AddJob_Position})
			, BG.MultiJobPositionName	= (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP AS JobPosition WHERE JobPosition.GroupType = 'JobPosition' AND JobPosition.GroupCode = #{AddJob_Position})
			, BG.JobPositionSortKey		= (SELECT SortKey FROM SYS_OBJECT_GROUP AS JobPosition WHERE JobPosition.GroupType = 'JobPosition' AND JobPosition.GroupCode = #{AddJob_Position})
			, BG.JobTitleCode			= #{AddJob_Title}
			, BG.JobTitleName			= (SELECT DisplayName FROM SYS_OBJECT_GROUP AS JobTitle WHERE JobTitle.GroupType = 'JobTitle' AND JobTitle.GroupCode = #{AddJob_Title})
			, BG.MultiJobTitleName		= (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP AS JobTitle WHERE JobTitle.GroupType = 'JobTitle' AND JobTitle.GroupCode = #{AddJob_Title})
			, BG.JobTitleSortKey		= (SELECT SortKey FROM SYS_OBJECT_GROUP AS JobTitle WHERE JobTitle.GroupType = 'JobTitle' AND JobTitle.GroupCode = #{AddJob_Title})
			, BG.ModifyDate				= now(3)
			, BG.IsHR 					= #{IsHR}
		WHERE BG.Seq = #{id}
 	</update>
 	
	 <!-- 그룹 멤버 User insert -->
    <insert id="insertGroupMemberUser" parameterType="cmap">
		INSERT INTO SYS_OBJECT_GROUP_MEMBER (
			GroupCode,
			UserCode,
			SortKey,
			Role,
			IsUse,
			IsHR,
			MemberStatus,
			JoinDate
        ) 
        SELECT DeptCode as GroupCode, UserCode, 999 ,'regular','Y','Y','A',SYSDATE
		FROM SYS_OBJECT_USER_BASEGROUP WHERE usercode = #{UserCode} AND DEPTCODE IS NOT NULL
		UNION
		SELECT JobPositionCode as GroupCode, UserCode, 999 ,'regular','Y','Y','A',SYSDATE
		FROM SYS_OBJECT_USER_BASEGROUP WHERE usercode = #{UserCode} AND JobPositionCode IS NOT NULL
		UNION
		SELECT JobTitleCode as GroupCode, UserCode, 999 ,'regular','Y','Y','A',SYSDATE
		FROM SYS_OBJECT_USER_BASEGROUP WHERE usercode = #{UserCode} AND JobTitleCode IS NOT NULL
		UNION
		SELECT JobLevelCode as GroupCode, UserCode, 999 ,'regular','Y','Y','A',SYSDATE
		FROM SYS_OBJECT_USER_BASEGROUP WHERE usercode = #{UserCode} AND JobLevelCode IS NOT NULL
    </insert>
	
	<!-- 그룹 멤버 User delete -->
    <delete id="deleteGroupMemberUser" parameterType="cmap">
	    DELETE FROM SYS_OBJECT_GROUP_MEMBER
		WHERE GroupMemberID IN
		<foreach collection="deleteDataUser" item="item"  separator="," open="(" close=")">
		    #{item}
		</foreach>
    </delete>
    
    <!-- 그룹 멤버 Group delete -->
    <delete id="deleteGroupMemberGroup" parameterType="cmap">
	    DELETE FROM SYS_OBJECT_GROUP_MEMBERGROUP
		WHERE MemberGroupID IN
		<foreach collection="deleteDataGroup" item="item"  separator="," open="(" close=")">
		    #{item}
		</foreach>
    </delete>
	
	<!-- 그룹 멤버 Group insert -->
    <insert id="insertGroupMemberGroup" parameterType="cmap">
        INSERT INTO SYS_OBJECT_GROUP_MEMBERGROUP (
        	GroupCode,
        	MemberGroupCode,
        	SortKey,
        	Role,
        	IsUse,
        	IsHR,
        	MemberStatus,
        	JoinDate
        ) 
        VALUES (
            #{GroupCode},
        	#{GRList},
        	999,
        	'regular', 
        	'Y',
        	'Y',
        	'A',
        	SYSDATE
        )
    </insert>
	
	<select id="selectJobInfoCount" parameterType="cmap" resultType="java.lang.Long">
        SELECT COUNT(GroupCode) AS COUNT 
        FROM SYS_OBJECT_GROUP A
		INNER JOIN SYS_OBJECT B ON A.GroupCode = B.ObjectCode  
		WHERE CompanyCode = #{domainCode} 
		AND B.DeleteDate IS NULL 
		AND GroupType IN (#{groupType}) 
		AND MemberOf IN (
			SELECT DomainID||'_'||#{groupType} FROM SYS_OBJECT_DOMAIN WHERE DomainCode = #{domainCode}
		)
    </select>
    
    <select id="selectJobInfoList" parameterType="cmap" resultType="cmap">
		SELECT 
			  GroupCode AS "GroupCode"
			, DisplayName AS "DisplayName"
			, GroupType AS "GroupType"
			, MemberOf AS "MemberOf"
			, MultiDisplayName AS "MultiDisplayName" 
		FROM SYS_OBJECT_GROUP A
		INNER JOIN SYS_OBJECT B ON A.GroupCode = B.ObjectCode  
		WHERE CompanyCode = #{domainCode}   
		AND B.DeleteDate IS NULL
		AND GroupType IN (#{groupType}) 
		AND MemberOf IN (
			SELECT DomainID||'_'||#{groupType} FROM SYS_OBJECT_DOMAIN WHERE DomainCode = #{domainCode} 
		)
		ORDER BY A.GroupCode
    </select>
    
    <!-- 상위 분류 select box list(category)를 가져옴 -->
    <select id="selectDeptListForCategory" parameterType="cmap" resultType="cmap">
		SELECT
			  A.GroupCode AS "GroupCode"
			, A.GroupName AS "GroupName" 
		FROM (
			SELECT 
				gr.GroupCode,
				FN_BASEGETDICTIONARY_S(#{lang}, gr.MultiDisplayName) AS GroupName,
				'1' AS exSort,
				gr.MemberOf,
				gr.GroupType,
				gr.SortPath
			FROM SYS_OBJECT_GROUP gr
			WHERE 1=1 
			<if test="groupCode != null and groupCode != ''">
				AND gr.GroupCode = #{groupCode}
			</if>
			<if test="groupCode == null and groupCode == ''">
				AND gr.GroupCode IS NULL
			</if>
			UNION ALL 
			SELECT 
				gr.GroupCode,
				FN_BASEGETDICTIONARY_S(#{lang}, gr.MultiDisplayName) AS GroupName,
				'2' AS exSort,
				gr.MemberOf,
				gr.GroupType,
				gr.SortPath
			FROM SYS_OBJECT_GROUP gr
			<if test="groupCode != null and groupCode != ''">
				WHERE gr.GroupCode != #{groupCode}
			</if>
			<if test="groupCode == null and groupCode == ''">
				WHERE gr.GroupCode IS NOT NULL
			</if>
		)A 
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
			AND (A.MemberOf != 'NOUSE' OR A.MemberOf IS NULL)
			AND (A.MemberOf != 'NOUNIT' OR A.MemberOf IS NULL)
			<if test="groupCode != null">
				AND A.MemberOf = (SELECT MemberOf FROM SYS_OBJECT_GROUP WHERE GroupCode = #{groupCode} AND ROWNUM = 1)
			</if>
			<if test="groupType != null and groupType=='Dept'">
				AND A.GroupType in ('Dept')  	
			</if>
			<if test="groupType != null and groupType=='Company'">
				AND A.GroupType in ('Company')
			</if>
			<if test="groupType != null and groupType=='group'">
				AND A.GroupType != 'Dept'	
			</if>
		</trim>
		<trim prefix="ORDER BY">
		    <if test="groupCode != null and groupCode != ''">
		 	 	A.exSort ASC,
			</if>
		 	SortPath ASC
		</trim>
	</select>
 	
 	<!--  하위 그룹 목록가져오기 -->
    <select id="selectSubGroupList" parameterType="cmap" resultType="cmap">
		<include refid="oracle.include.pagingHeader" />
		SELECT
			  C.GroupID AS "GroupID"
			, C.GroupCode AS "GroupCode"
			, C.CompanyCode AS "CompanyCode"
			, C.GroupType AS "GroupType"
			, C.MemberOf AS "MemberOf"
			, C.GroupPath AS "GroupPath"
			, C.RegionCode AS "RegionCode"
			, C.DisplayName AS "DisplayName"
			, C.MultiDisplayName AS "MultiDisplayName"
			, C.ShortName AS "ShortName"
			, C.MultiShortName AS "MultiShortName"
			, C.OUName AS "OUName"
			, C.OUPath AS "OUPath"
			, C.SortKey AS "SortKey"
			, C.SortPath AS "SortPath"
			, C.IsUse AS "IsUse"
			, C.IsDisplay AS "IsDisplay"
			, C.IsMail AS "IsMail"
			, C.IsHR AS "IsHR"
			, C.PrimaryMail AS "PrimaryMail"
			, C.SecondaryMail AS "SecondaryMail"
			, C.ManagerCode AS "ManagerCode"
			, C.Description AS "Description"
			, C.ReceiptUnitCode AS "ReceiptUnitCode"
			, C.ApprovalUnitCode AS "ApprovalUnitCode"
			, C.Receivable AS "Receivable"
			, C.Approvable AS "Approvable"
			, C.RegistDate AS "RegistDate"
			, C.ModifyDate AS "ModifyDate"
			, C.Reserved1 AS "Reserved1"
			, C.Reserved2 AS "Reserved2"
			, C.Reserved3 AS "Reserved3"
			, C.Reserved4 AS "Reserved4"
			, C.Reserved5 AS "Reserved5"
			, C.DomainName AS "DomainName"
			, C.MultiDomainName AS "MultiDomainName"
			, C.HasChild AS "HasChild"
			, C.Depth AS "Depth"
		FROM (
     		SELECT     
				A.*,
				B.DisplayName AS DomainName,
				B.MultiDisplayName AS MultiDomainName, 
				(SELECT COUNT(0) FROM SYS_OBJECT_GROUP sog WHERE sog.MemberOf = A.GroupCode AND sog.IsUse = 'Y') AS HasChild,     
				0 AS Depth 
			FROM SYS_OBJECT_GROUP A 
			INNER JOIN SYS_OBJECT_GROUP B ON A.CompanyCode = B.GroupCode
			WHERE A.MemberOf = #{gr_code}
			<if test="gr_code == 'ORGROOT'">
	   			AND A.GroupType != 'Company'
	   		</if>
	   		<if test="grouptype == 'Company'">
		   		AND A.grouptype <![CDATA[<>]]> 'Dept' 
	   		</if>
			ORDER BY  A.SortPath ASC
		) C
		<include refid="oracle.include.pagingFooter" />
    </select>
 	
 	<!--  하위 그룹 목록 갯수 가져오기 -->
    <select id="selectSubGroupListCnt" parameterType="cmap" resultType="java.lang.Long">
    	SELECT COUNT(*)
  		FROM SYS_OBJECT_GROUP A 
  		INNER JOIN SYS_OBJECT_GROUP B ON A.CompanyCode = B.GroupCode
   		WHERE A.MemberOf = #{gr_code}
   		<if test="gr_code == 'ORGROOT'">
   			AND A.GroupType != 'Company'
   		</if>
   		<if test="grouptype == 'Company'">
	   		AND A.GroupCode NOT LIKE '%JobPosition'
	   		AND A.GroupCode NOT LIKE '%JobTitle'
	   		AND A.GroupCode NOT LIKE '%JobLevel'
	   		AND A.GroupCode NOT LIKE '%Community'
	   		AND A.GroupCode NOT LIKE '%Authority'
   		</if>
    </select>
	
	<!-- 상위 분류 select box list(category)를 가져옴 -->
    <select id="selectGroupListForCategory" parameterType="cmap" resultType="cmap">
		SELECT 
			A.GroupCode ,
			A.GroupName ,
			A.MemberOf ,
			A.GroupType ,
			A.SortPath ,
			A.exSort
		FROM (
			<![CDATA[
			SELECT 
				gr.GroupCode,
				FN_BASEGETDICTIONARY_S(#{lang}, gr.MultiDisplayName) AS GroupName,
				gr.MemberOf,
				gr.GroupType,
				gr.SortPath,
				'1' AS exSort
			FROM SYS_OBJECT_GROUP gr
	    	]]>
	    	WHERE 1=1 
	    	<if test="groupCode != null and groupCode != ''">
			   AND gr.GroupCode = #{groupCode}
			</if>
			<if test="groupCode == null and groupCode == ''">
			   AND gr.GroupCode IS NULL
			</if>
			UNION ALL 
			<![CDATA[
			SELECT 
				gr.GroupCode,
				FN_BASEGETDICTIONARY_S(#{lang}, gr.MultiDisplayName) AS GroupName,
				gr.MemberOf,
				gr.GroupType,
				gr.SortPath,
				'2' AS exSort
			FROM SYS_OBJECT_GROUP gr
	   		]]>
	    	WHERE 1=1 
	    	<if test="groupCode != null and groupCode != ''">
			   AND gr.GroupCode != #{groupCode}
			</if>
			<if test="groupCode == null and groupCode == ''">
			   AND gr.GroupCode IS NOT NULL
			</if>
		)A
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
			AND (A.MemberOf != 'NOUSE' OR A.MemberOf IS NULL) 
			AND (A.MemberOf != 'NOUNIT' OR A.MemberOf IS NULL)
			<if test="groupCode != null">
				AND A.MemberOf = (SELECT MemberOf FROM SYS_OBJECT_GROUP WHERE GroupCode = #{groupCode} AND ROWNUM = 1 )
			</if>
			<if test="groupType != null">
				<choose>
					<when test="groupType == 'Company'.toString()">
					AND A.GroupType = 'Company'
					</when>
					<when test="groupType == 'group'.toString()">
						AND A.GroupType != 'Dept'
					</when>
					<otherwise>
						AND A.GroupType = #{groupType}
					</otherwise>
				</choose>
			</if>
		</trim>
		<trim prefix="ORDER BY">
		    <if test="groupCode != null and groupCode != ''">
		 	   A.GroupCode ASC,
			</if>
		 	A.SortPath ASC
		</trim>
	</select>
	
	<!-- 그룹 정보 가져오기 select -->
    <select id="selectGroupInfo" parameterType="cmap" resultType="cmap">
		<![CDATA[
		SELECT
			  A.GroupID AS "GroupID"
			, A.GroupCode AS "GroupCode"
			, A.GroupType AS "GroupType"
			, A.MemberOf AS "MemberOf"
			, (SELECT MultiDisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = A.MemberOf) AS "ParentName"
			, A.GroupPath AS "GroupPath"
			, A.MultiDisplayName AS "MultiDisplayName"
			, A.MultiShortName AS "MultiShortName"
			, A.SortKey AS "SortKey"
			, A.SortPath AS "SortPath"
			, A.OUName AS "OUName"
			, A.OUPath AS "OUPath"
			, A.IsUse AS "IsUse"
			, A.IsDisplay AS "IsDisplay"
			, A.IsMail AS "IsMail"
			, A.IsHR AS "IsHR"
			, A.PrimaryMail AS "PrimaryMail"
			, A.SecondaryMail AS "SecondaryMail"
			, A.Description AS "Description"
			, A.ReceiptUnitCode AS "ReceiptUnitCode"
			, A.ApprovalUnitCode AS "ApprovalUnitCode"
			, A.Receivable AS "Receivable"
			, A.Approvable AS "Approvable"
			, A.RegistDate AS "RegistDate"
			, A.ModifyDate AS "ModifyDate"
			, A.ManagerCode AS "ManagerCode"
			, NVL(A.ManagerCode||'|'||(SELECT DisplayName FROM SYS_OBJECT_USER WHERE UserCode = A.ManagerCode),'') AS Manager
			, B.MultiDisplayName AS "CompanyName"
			, B.GroupCode AS "CompanyCode"
		FROM SYS_OBJECT_GROUP A
		INNER JOIN SYS_OBJECT_GROUP B ON A.CompanyCode = B.GroupCode
		WHERE A.GroupCode = #{gr_code}
		]]>
    </select>
    
    <!-- 그룹 기타 정보 select -->
    <select id="selectGroupEtcInfo" parameterType="cmap" resultType="cmap">
 	    SELECT 
 	    	  GroupPath AS "GroupPath"
 	    	, SortPath AS "SortPath"
 	    	, OUPath AS "OUPath"
 	    	, (SELECT GroupID FROM SYS_OBJECT_GROUP WHERE GroupCode = #{CompanyCode}) AS CompanyID
 	    FROM SYS_OBJECT_GROUP
 	    WHERE GroupCode = #{MemberOf}
 	</select>
	
	<select id="selectDefaultSetInfoGroup" parameterType="cmap" resultType="cmap">
         SELECT
			A.DisplayName AS GroupName,
        	B.DisplayName AS CompanyName,
        	<if test="domainCode != null and groupType != null">
	        	(
		        	SELECT NVL(SUBSTR(GroupCode,1, INSTR(GroupCode,'_') -1),GroupCode)
		            FROM SYS_OBJECT_GROUP
					WHERE GroupCode LIKE '%'||#{groupType} and CompanyCode = #{domainCode} 
				) 
			</if>
			<if test="domainCode == null or groupType == null">
			    ''
		    </if>
			AS CompanyID
		FROM SYS_OBJECT_GROUP A
		INNER JOIN SYS_OBJECT_GROUP B ON A.CompanyCode = B.GroupCode AND B.GroupType = 'Company'
		<if test="groupType = 'Company'.toString()">
			<if test="gr_code != null">
				WHERE  A.GroupCode = #{gr_code} 
			</if>
		</if>
		<if test="groupType != 'Company'.toString()">
    		<if test="domainCode != null">
				WHERE B.GroupCode = #{domainCode} 
			</if>
	        <if test="gr_code != null">
		    	AND A.GroupCode = #{gr_code} 
			</if>
		</if>
    </select>
	
	<!-- 임의 그룹 목록 설정 변경 -->
    <update id="updateArbitraryGroup" parameterType="cmap" >
 		UPDATE SYS_OBJECT_GROUP
 		SET 
		<choose>
			<when test="Type == 'IsUse'.toString()">
				IsUse = #{ToBeValue}
			</when>
			<when test="Type == 'IsHR'.toString()">
				IsHR = #{ToBeValue}
			</when>
			<when test="Type == 'IsMail'.toString()">
			    IsMail = #{ToBeValue}
			</when>
		</choose>
 		WHERE GroupCode = #{TargetCode}
 	</update>
    
    <!-- 임의 그룹 목록 삭제  -->
    <delete id="deleteArbitraryGroupList" parameterType="cmap">
		DELETE FROM SYS_OBJECT_GROUP
		WHERE GroupCode IN
		<foreach collection="TargetID" item="item"  separator="," open="(" close=")">
		    #{item}
		</foreach>
	</delete>
	
    <!-- 임의 그룹 우선 순위 가져오기  -->
	<select id="selectArbitraryGroupSortKey" parameterType="cmap" resultType="cmap">
 	    SELECT SortKey AS "SortKey", SortPath AS "SortPath"
 	    FROM SYS_OBJECT_GROUP
 	    WHERE GroupCode  = #{TargetCode}
 	</select>
    
  	<!-- 임의 그룹 우선 순위 변경 -->
    <update id="updateArbitraryGroupSortKey" parameterType="cmap" >
 		UPDATE SYS_OBJECT_GROUP
 		SET
 			SortKey = #{TargetSortKey},
			SortPath = #{TargetSortPath}
 		WHERE GroupCode = #{TargetCode}
 	</update>
 	
    <!-- 그룹 사용여부 변경 -->
    <update id="updateIsUseGroup" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_GROUP
		SET
			IsUse = #{IsUse},
			ModifyDate = TO_DATE(#{ModifyDate},'yyyy/mm/dd hh24:mi:ss')
		WHERE GroupCode = #{GroupCode}
		]]>
	</update>
	
	<!-- 그룹 표시여부 변경 -->
	<update id="updateIsDisplayGroup" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_GROUP
		SET
			IsDisplay = #{IsDisplay},
			ModifyDate = TO_DATE(#{ModifyDate},'yyyy/mm/dd hh24:mi:ss')
		WHERE GroupCode = #{GroupCode}
		]]>
	</update>
    
    <!-- 그룹 메일사용여부 변경 -->
    <update id="updateIsMailGroup" parameterType="cmap">
	    <![CDATA[
		UPDATE SYS_OBJECT_GROUP
		SET
			IsMail = #{IsMail},
			ModifyDate = TO_DATE(#{ModifyDate},'yyyy/mm/dd hh24:mi:ss')
		WHERE GroupCode = #{GroupCode}
		]]>
	</update>
	
    <select id="selectSyncDeptInfo" resultType="cmap">
      	SELECT
			  GroupCode as "GroupCode"
			, CompanyCode as "CompanyCode"
			, MemberOf as "MemberOf"
			, SortKey as "SortKey"
			, OUName as "OUName"
	    FROM SYS_OBJECT_GROUP 
	    WHERE GROUPTYPE = 'Dept' 
	    ORDER BY 
	    (
		    CASE
		        WHEN REGEXP_LIKE(GroupCode,'^ORGROOT.*') THEN 0
		        ELSE 1
		    END
	    ),
	    COMPANYCODE,
		(
	    	CASE
		        WHEN REGEXP_LIKE(GroupCode,'^[a-zA-Z]') THEN 0
		        ELSE 1
		    END
	    ),
		MemberOf, 
		GROUPCODE
	</select>
	
	<insert id="insertObjectGroup" parameterType="cmap">
		INSERT INTO SYS_OBJECT_GROUP (
			  GroupCode
			, CompanyCode
			, GroupType
			, MemberOf
			<if test="RegionCode != null">
				, RegionCode		
			</if>
			, DisplayName
			, MultiDisplayName
			, ShortName
			, MultiShortName
			, OUName	
			, SortKey
			, IsUse
			, IsDisplay
			, IsMail
			, IsHR
			, PrimaryMail
			<if test="SecondaryMail != null">
				, SecondaryMail
			</if>
			, ManagerCode
			, Description
			<if test="ReceiptUnitCode != null">
				, ReceiptUnitCode
			</if>
			<if test="ApprovalUnitCode != null">
				, ApprovalUnitCode
			</if>
			, Receivable
			, Approvable
			, RegistDate
			, ModifyDate
			<if test="Reserved1 != null">
				, Reserved1
			</if>
			<if test="Reserved2 != null">
				, Reserved2
			</if>
			<if test="Reserved3 != null">
				, Reserved3
			</if>
			<if test="Reserved4 != null">
				, Reserved4
			</if>
			<if test="Reserved5 != null">
				, Reserved5
			</if>
		)
		VALUES (
			  #{GroupCode}
			, #{CompanyCode}
			, #{GroupType}
			, #{MemberOf}
			<if test="RegionCode != null">
				, #{RegionCode}	
			</if>
			, #{DisplayName}
			, #{MultiDisplayName}
			, #{ShortName}
			, #{MultiShortName}
			, #{OUName}
			, #{SortKey}
			, #{IsUse}
			, #{IsDisplay}
			, #{IsMail}
			, #{IsHR}
			, #{PrimaryMail}
			<if test="SecondaryMail != null">
				, #{SecondaryMail}
			</if>
			, #{ManagerCode}
			, #{Description}
			<if test="ReceiptUnitCode != null">
				, #{ReceiptUnitCode}
			</if>
			<if test="ApprovalUnitCode != null">
				, #{ApprovalUnitCode}
			</if>
			, #{Receivable}
			, #{Approvable}
			, SYSDATE
			, SYSDATE
			<if test="Reserved1 != null">
				, #{Reserved1}
			</if>
			<if test="Reserved2 != null">
				, #{Reserved2}
			</if>
			<if test="Reserved3 != null">
				, #{Reserved3}
			</if>
			<if test="Reserved4 != null">
				, #{Reserved4}
			</if>
			<if test="Reserved5 != null">
				, #{Reserved5}
			</if>
		)
	</insert> 
	
	<select id="selectFNGroupPath" parameterType="cmap" resultType="java.lang.String">
	    SELECT FN_COMOBJECTPATHCREATE_S('', #{GroupCode}, 'GR') FROM DUAL
	</select>
	
	<select id="selectFNSortPath" parameterType="cmap" resultType="java.lang.String">
	    SELECT FN_COMSORTPATHCREATE_S('', #{GroupCode}, 'GR') FROM DUAL
	</select>
	
	<select id="selectFNOUPath" parameterType="cmap" resultType="java.lang.String">
		SELECT Fn_ComOUPathCreate_S(#{GroupCode}) FROM DUAL
	</select>
 	
	<update id="updateFNGroupPath" parameterType="cmap">
	    UPDATE SYS_OBJECT_GROUP
		SET
			  GROUPPATH = #{GroupPath}
			, SORTPATH = #{SortPath}
			, OUPATH = #{OUPath}
		WHERE GROUPCODE = #{GroupCode}
	</update>
	
	<update id="updateObjectGroup" parameterType="cmap">
		UPDATE SYS_OBJECT_GROUP
		SET
			  CompanyCode = #{CompanyCode}
			, MemberOf = #{MemberOf}
			, GroupPath = #{GroupPath}
			, RegionCode = #{RegionCode}		
			, DisplayName = #{DisplayName}
			, MultiDisplayName = #{MultiDisplayName}
			, ShortName = #{ShortName}
			, MultiShortName = #{MultiShortName}
			, OUName = #{OUName}
			, OUPath = #{OUPath}
			, SortKey = #{SortKey}
			, SortPath = #{SortPath}
			, IsUse = #{IsUse}
			, IsDisplay = #{IsDisplay}
			, IsMail = #{IsMail}
			, IsHR = #{IsHR}
			, PrimaryMail = #{PrimaryMail}
			, SecondaryMail = #{SecondaryMail}
			, ManagerCode = #{ManagerCode}
			, Description = #{Description}
			, ModifyDate = SYSDATE
			<if test="GroupType != null">
				, GroupType = #{GroupType}
			</if>
			<if test="ReceiptUnitCode != null">
				, ReceiptUnitCode = #{ReceiptUnitCode}
			</if>
			<if test="ApprovalUnitCode != null">
				, ApprovalUnitCode = #{ApprovalUnitCode}
			</if>
			<if test="Receivable != null">
				, Receivable = #{Receivable}
			</if>
			<if test="Approvable != null">
				, Approvable = #{Approvable}
			</if>
			<if test="Reserved1 != null">
		    	, Reserved1 = #{Reserved1}
		    </if>
			<if test="Reserved2 != null">
		    	, Reserved2 = #{Reserved1}
		    </if>
		    <if test="Reserved3 != null">
		    	, Reserved3 = #{Reserved1}
		    </if>
		    <if test="Reserved4 != null">
		   		, Reserved4 = #{Reserved4}
		    </if>
		    <if test="Reserved5 != null">
		    	, Reserved5 = #{Reserved5}
		    </if>
		WHERE GroupCode = #{GroupCode}
	</update> 
	
	<delete id="deleteObjectGroup" parameterType="cmap">
		UPDATE SYS_OBJECT_GROUP 
		SET
			  IsUse = 'N'
			, IsHR = 'N'
			, IsMail = 'N'
			, IsDisplay = 'N'
			, ModifyDate = SYSDATE
		WHERE GroupCode = #{GroupCode}
	</delete> 
	
	<!-- 기타 -->
	<!-- 일정폴더 데이터 삽입 -->
    <insert id="insertFolderData" parameterType="cmap" useGeneratedKeys="true">
        INSERT INTO SYS_OBJECT_FOLDER (
        	  DomainID
        	, MenuID
        	, ObjectType
        	, FolderType
        	, ParentObjectID
        	, ParentObjectType
        	, LinkFolderID
        	, DisplayName
        	, MultiDisplayName
        	, MemberOf
        	, SortKey
        	, SecurityLevel
        	, IsInherited
        	, IsShared
        	, IsUse
        	, IsDisplay
        	, IsURL
        	, URL
        	, IsMobileSupport
        	, IsAdminNotice
        	, ManageCompany
        	, IsMsgSecurity
        	, Description
        	, OwnerCode
        	, RegisterCode
        	, RegistDate
        	, ModifierCode
        	, ModifyDate
        	, DeleteDate
        	, Reserved1
        	, Reserved2
        	, Reserved3
        	, Reserved4
        	, Reserved5
        ) 
        VALUES (
        	  #{DomainID}
			, #{MenuID}
			, 'Schedule'
			, #{FolderType}
			, #{ParentObjectID}
			, #{ParentObjectType}
			, #{LinkFolderID, jdbcType=INTEGER}
			, #{DisplayName}
			, #{MultiDisplayName}
			, #{MemberOf}
			, #{SortKey}
			, #{SecurityLevel}
			, #{IsInherited}
			, #{IsShared}
			, #{IsUse}
			, #{IsDisplay}
			, #{IsURL}
			, #{URL}
			, #{IsMobileSupport, jdbcType=CHAR}
			, #{IsAdminNotice, jdbcType=CHAR}
			, #{ManageCompany, jdbcType=CHAR}
			, #{IsMsgSecurity, jdbcType=CHAR}
			, #{Description, jdbcType=VARCHAR}
			, #{OwnerCode}
			, #{RegisterCode}
			, SYSDATE
			, #{ModifierCode}
			, SYSDATE
			, #{DeleteDate, jdbcType=DATE}
			, #{Reserved1, jdbcType=VARCHAR}
			, #{Reserved2}
			, #{Reserved3, jdbcType=VARCHAR}
			, #{Reserved4}
			, #{Reserved5, jdbcType=VARCHAR}
        )
        <selectKey keyProperty="FolderID" resultType="Integer" order="AFTER">
		    SELECT SYS_OBJECT_FOLDER_SEQ.CURRVAL FROM DUAL
		</selectKey>
    </insert>
	
    <select id="selectComSortPathCreateS" parameterType="cmap" resultType="java.lang.String">
         SELECT FN_COMSORTPATHCREATE_S(#{FolderID}, '', 'FD') AS SortPath FROM DUAL
    </select>
    
    <select id="selectComObjectPathCreateS" parameterType="cmap" resultType="java.lang.String">
        SELECT FN_COMOBJECTPATHCREATE_S(#{FolderID}, '', 'FD') AS FolderPath FROM DUAL
    </select>
    
    <!-- SortPath 수정 -->
    <update id="updateSortPath" parameterType="cmap" >
        UPDATE SYS_OBJECT_FOLDER
        SET SortPath = #{SortPath}
        WHERE FolderID = #{FolderID}
    </update>
    
    <!-- FolderPath 수정 -->
    <update id="updateFolderPath" parameterType="cmap" >
        UPDATE SYS_OBJECT_FOLDER
        SET FolderPath = #{FolderPath}
        WHERE FolderID = #{FolderID}
    </update>
	
    <!-- 비밀번호 초기화  -->
    <update id="resetuserpassword" parameterType="cmap">
        UPDATE SYS_OBJECT_USER
        SET 
        	LogonPassword =	CRYPTO.ENC_AES128(#{sNewPassword},#{aeskey}),
        	ModifyDate = TO_DATE(#{ModDate},'yyyy/mm/dd hh24:mi:ss')
        WHERE usercode = #{UserID}
    </update>
    
	<update id="resetuserpasswordLock" parameterType="cmap">
        UPDATE SYS_OBJECT_USER
		SET 
			  ACCOUT_LOCK = 'N'
			, PASSWORD_CHANGE_DATE = TO_DATE(#{ModDate},'yyyy/mm/dd hh24:mi:ss')
			, LOGIN_FAIL_COUNT = 0
			, TEMPORARY_PASSWORD_ISUSE  = 'Y'
		where usercode = #{UserID}
    </update>
	
 	<!-- 메일 주소 중복 여부 조회 -->
    <select id="selectIsDuplicateMail" parameterType="cmap" resultType="cmap">
		SELECT MAX(CNT) AS isDuplicate
		FROM (
			SELECT COUNT(1) AS CNT
			FROM SYS_OBJECT_USER UR1
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				LOWER(MailAddress) = LOWER(#{MailAddress})
				AND MailAddress IS NOT NULL
				<if test="Code != null">
				  	AND UserCode != #{Code}
				</if>
			</trim>
			UNION 
			SELECT COUNT(1) AS CNT
			FROM SYS_OBJECT_GROUP GR1
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				LOWER(PrimaryMail) = LOWER(#{MailAddress})
				AND PrimaryMail IS NOT NULL 
				<if test="Code != null">
					AND GroupCode != #{Code}
				</if>
			</trim>
			UNION 
			SELECT COUNT(1) AS CNT
			FROM SYS_OBJECT_GROUP GR2
			<trim prefix="WHERE" prefixOverrides="AND |OR ">
				LOWER(SecondaryMail) LIKE '%'||LOWER(#{MailAddress})||'%'
				AND SecondaryMail IS NOT NULL 
				<if test="Code != null">
					AND GroupCode != #{Code}
				</if>
			</trim>
			<if test="dupType == 'Excel'">
				UNION
				SELECT COUNT(1) AS CNT
				FROM COVI_SYNCDATA.EXCEL_ORGDEPT AS GR3
				<trim prefix="WHERE" prefixOverrides="AND |OR ">
					PrimaryMail = #{MailAddress}
					AND PrimaryMail IS NOT NULL 
					AND PrimaryMail != ''
					<if test="Code != null">
						AND GroupCode != #{Code}
					</if>
				</trim>
				UNION
				SELECT COUNT(1) AS CNT
				FROM COVI_SYNCDATA.EXCEL_ORGUSER AS UR1
				<trim prefix="WHERE" prefixOverrides="AND |OR ">
					MailAddress = #{MailAddress}
					AND MailAddress IS NOT NULL 
					AND MailAddress != ''
					<if test="Code != null">
						AND UserCode != #{Code}
					</if>
				</trim>
			</if>
		) MAIL
    </select>
	
	<select id="selectServiceTypeList" parameterType="cmap" resultType="cmap">
        SELECT
        	CN AS optionValue, 
        	'['||CN||']'||DISPLAYNAME AS optionText 
        FROM ADMANAGER_ACCOUNT 
        WHERE ServiceType = 'MESSENGER'
    </select> 
	
   <!-- 하위 그룹 존재 여부 select -->
    <select id="selectHasChildGroup" parameterType="cmap" resultType="java.lang.Long">
		SELECT (
			SELECT COUNT(0) 
			FROM SYS_OBJECT_GROUP B 
			WHERE B.MemberOf = A.GroupCode AND B.IsUse = 'Y') AS HasChild
		FROM SYS_OBJECT_GROUP A
		WHERE A.GroupCode = #{GroupCode} 
    </select>
      
    <!-- 하위 사용자 존재 여부 select -->
    <select id="selectHasUserGroup" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(A.UserCode) AS HasUser
		FROM SYS_OBJECT_USER A
		INNER JOIN SYS_OBJECT_USER_BASEGROUP B ON A.UserCode = B.UserCode
		INNER JOIN SYS_OBJECT_GROUP_MEMBER C ON A.UserCode = C.UserCode
		WHERE B.JobTitleCode = #{GroupCode} 
		OR B.JobPositionCode = #{GroupCode} 
		OR B.JobLevelCode = #{GroupCode} 
		OR B.RegionCode = #{GroupCode} 
		OR C.GroupCode = #{GroupCode} 
    </select>
	
	<select id="updatePasswordPolicyCount" parameterType="cmap" resultType="java.lang.Long">
        SELECT COUNT(*) FROM SYS_OBJECT_PW_POLICY a
		INNER JOIN SYS_OBJECT_DOMAIN b ON a.DomainID = b.DomainID
		WHERE 1 = 1
		AND b.DomainCode = #{DomainCode}
    </select>
    
   	<select id="getPolicy" parameterType="cmap" resultType="cmap">
        SELECT
        	  a.DOMAINID AS "DomainID"
			, a.ISUSECOMPLEXITY AS "IsUseComplexity"
			, a.MAXCHANGEDATE AS "MaxChangeDate"
			, a.MINIMUMLENGTH AS "MinimumLength"
			, a.CHANGENOTICEDATE AS "ChangeNoticeDate"
        FROM SYS_OBJECT_PW_POLICY a
        INNER JOIN SYS_OBJECT_DOMAIN b ON a.DomainID = b.DomainID
        WHERE 1=1 
        AND b.DomainCode = #{DomainCode}
    </select>

    <!-- AD 관련-->
	<insert id="insertUserADInfo" parameterType="cmap">
       INSERT INTO SYS_OBJECT_USER_AD (
		     USERID
			,AD_DISPLAYNAME
			,AD_FIRSTNAME
			,AD_LASTNAME
			,AD_INITIALS
			,AD_OFFICE
			,AD_HOMEPAGE
			,AD_COUNTRY
			,AD_COUNTRYID
			,AD_COUNTRYCODE
			,AD_STATE
			,AD_CITY
			,AD_STREETADDRESS
			,AD_POSTOFFICEBOX
			,AD_POSTALCODE
			,AD_USERACCOUNTCONTROL
			,AD_ACCOUNTEXPIRES
			,AD_PHONENUMBER 
			,AD_HOMEPHONE 
			,AD_PAGER 
			,AD_MOBILE
			,AD_FAX 
			,AD_IPPHONE
			,AD_INFO
			,AD_TITLE
			,AD_DEPARTMENT
			,AD_COMPANY
			,AD_MANAGERCODE 
			,AD_CN
			,AD_SamAccountName
			,AD_UserPrincipalName 
		)
		VALUES (
		    #{UserCode},
			#{AD_DisplayName},
			#{AD_FirstName},
			#{AD_LastName},
			#{AD_Initials},
			#{AD_Office},
			#{AD_HomePage},
			#{AD_Country},
			#{AD_CountryID},
			#{AD_CountryCode},
			#{AD_State},
			#{AD_City},
			#{AD_StreetAddress},
			#{AD_PostOfficeBox},
			#{AD_PostalCode},
			#{AD_UserAccountControl},
			#{AD_AccountExpires},
			#{AD_PhoneNumber},
			#{AD_HomePhone},
			#{AD_Pager},
			#{AD_Mobile},
			#{AD_Fax},
			'',
			#{AD_Info},
			#{AD_Title},
			#{AD_Department},
			#{AD_Company},
			#{AD_ManagerCode},
			#{AD_CN},
			#{AD_SamAccountName},
			#{AD_UserPrincipalName}  	
        )
    </insert>
   
   <update id="updateUserADInfo" parameterType="cmap">
   	    UPDATE SYS_OBJECT_USER_AD
		SET 
			  AD_DISPLAYNAME         = #{AD_DisplayName}
			, AD_FIRSTNAME           = #{AD_FirstName}
			, AD_LASTNAME            = #{AD_LastName}
			, AD_INITIALS            = #{AD_Initials}
			, AD_OFFICE              = #{AD_Office}
			, AD_HOMEPAGE            = #{AD_HomePage}
			, AD_COUNTRY             = #{AD_Country}
			, AD_COUNTRYID           = #{AD_CountryID}
			, AD_COUNTRYCODE         = #{AD_CountryCode}
			, AD_STATE               = #{AD_State}
			, AD_CITY                = #{AD_City}
			, AD_STREETADDRESS       = #{AD_StreetAddress}
			, AD_POSTOFFICEBOX       = #{AD_PostOfficeBox}
			, AD_POSTALCODE          = #{AD_PostalCode}
			, AD_USERACCOUNTCONTROL  = #{AD_UserAccountControl}
			, AD_ACCOUNTEXPIRES      = #{AD_AccountExpires}
			, AD_PHONENUMBER         = #{AD_PhoneNumber}
			, AD_HOMEPHONE           = #{AD_HomePhone}
			, AD_PAGER               = #{AD_Pager}
			, AD_MOBILE              = #{AD_Mobile}
			, AD_FAX                 = #{AD_Fax}
			, AD_IPPHONE             = ''
			, AD_INFO                = #{AD_Info}
			, AD_TITLE               = #{AD_Title}
			, AD_DEPARTMENT          = #{AD_Department}
			, AD_COMPANY             = #{AD_Company}
			, AD_MANAGERCODE         = #{AD_ManagerCode}
			, AD_CN        			 = #{AD_CN}
			, AD_SamAccountName      = #{AD_SamAccountName}
			, AD_UserPrincipalName   = #{AD_UserPrincipalName}  
		WHERE USERID = 	#{UserCode}
	</update> 
    
	<!-- Exchange 관련 -->
    <insert id="insertUserExchInfo" parameterType="cmap">
		INSERT INTO SYS_OBJECT_USER_EXCHANGE (
			USERID,
			EX_PRIMARYMAIL,
			EX_SECONDARYMAIL,
			EX_STORAGESERVER,
			EX_STORAGEGROUP,
			EX_STORAGESTORE,
			EX_CUSTOMATTRIBUTE01,
			EX_CUSTOMATTRIBUTE02,
			EX_CUSTOMATTRIBUTE03,
			EX_CUSTOMATTRIBUTE04,
			EX_CUSTOMATTRIBUTE05,
			EX_CUSTOMATTRIBUTE06,
			EX_CUSTOMATTRIBUTE07,
			EX_CUSTOMATTRIBUTE08,
			EX_CUSTOMATTRIBUTE09,
			EX_CUSTOMATTRIBUTE10,
			EX_CUSTOMATTRIBUTE11,
			EX_CUSTOMATTRIBUTE12,
			EX_CUSTOMATTRIBUTE13,
			EX_CUSTOMATTRIBUTE14,
			EX_CUSTOMATTRIBUTE15
		) 
		VALUES (
		   	#{UserCode},
			#{EX_PrimaryMail},
			#{EX_SecondaryMail},
			#{EX_StorageServer},
			#{EX_StorageGroup},
			#{EX_StorageStore},
			#{EX_CustomAttribute01},
			#{EX_CustomAttribute02},
			#{EX_CustomAttribute03},
			#{EX_CustomAttribute04},
			#{EX_CustomAttribute05},
			#{EX_CustomAttribute06},
			#{EX_CustomAttribute07},
			#{EX_CustomAttribute08},
			#{EX_CustomAttribute09},
			#{EX_CustomAttribute10},
			#{EX_CustomAttribute11},
			#{EX_CustomAttribute12},
			#{EX_CustomAttribute13},
			#{EX_CustomAttribute14},
			#{EX_CustomAttribute15}
		)
    </insert>
    
    <update id="updateUserExchInfo" parameterType="cmap">
   	    UPDATE SYS_OBJECT_USER_EXCHANGE
		SET 
			EX_PRIMARYMAIL = #{EX_PrimaryMail},
			EX_SECONDARYMAIL = #{EX_SecondaryMail},
			EX_STORAGESERVER = #{EX_StorageServer},
			EX_STORAGEGROUP = #{EX_StorageGroup},
			EX_STORAGESTORE = #{EX_StorageStore},
			EX_CUSTOMATTRIBUTE01 = #{EX_CustomAttribute01},
			EX_CUSTOMATTRIBUTE02 = #{EX_CustomAttribute02},
			EX_CUSTOMATTRIBUTE03 = #{EX_CustomAttribute03},
			EX_CUSTOMATTRIBUTE04 = #{EX_CustomAttribute04},
			EX_CUSTOMATTRIBUTE05 = #{EX_CustomAttribute05},
			EX_CUSTOMATTRIBUTE06 = #{EX_CustomAttribute06},
			EX_CUSTOMATTRIBUTE07 = #{EX_CustomAttribute07},
			EX_CUSTOMATTRIBUTE08 = #{EX_CustomAttribute08},
			EX_CUSTOMATTRIBUTE09 = #{EX_CustomAttribute09},
			EX_CUSTOMATTRIBUTE10 = #{EX_CustomAttribute10},
			EX_CUSTOMATTRIBUTE11 = #{EX_CustomAttribute11},
			EX_CUSTOMATTRIBUTE12 = #{EX_CustomAttribute12},
			EX_CUSTOMATTRIBUTE13 = #{EX_CustomAttribute13},
			EX_CUSTOMATTRIBUTE14 = #{EX_CustomAttribute14},
			EX_CUSTOMATTRIBUTE15 = #{EX_CustomAttribute15}
		WHERE USERID = #{UserCode}
	</update>
    
	<!--SFB 연동 관련 -->
    <insert id="insertUserMSNInfo" parameterType="cmap">
		INSERT INTO SYS_OBJECT_USER_MESSENGER (
			USERID,
			MSN_POOLSERVERNAME,
			MSN_POOLSERVERDN,
			MSN_SIPADDRESS,
			MSN_ANONMY,
			MSN_MEETINGPOLICYNAME,
			MSN_MEETINGPOLICYDN,
			MSN_PHONECOMMUNICATION,
			MSN_PBX,
			MSN_LINEPOLICYNAME,
			MSN_LINEPOLICYDN,
			MSN_LINEURI,
			MSN_LINESERVERURI,
			MSN_FEDERATION,
			MSN_REMOTEACCESS,
			MSN_PUBLICIMCONNECTIVITY,
			MSN_INTERNALIMCONVERSATION,
			MSN_FEDERATEDIMCONVERSATION
		) 
		VALUES (
			#{UserCode},
			#{MSN_PoolServerName},
			#{MSN_PoolServerDN},
			#{MSN_SIPAddress},
			#{MSN_Anonmy},
			#{MSN_MeetingPolicyName},
			#{MSN_MeetingPolicyDN},
			#{MSN_PhoneCommunication},
			#{MSN_PBX},
			#{MSN_LinePolicyName},
			#{MSN_LinePolicyDN},
			#{MSN_LineURI},
			#{MSN_LineServerURI},
			#{MSN_Federation},
			#{MSN_RemoteAccess},
			#{MSN_PublicIMConnectivity},
			#{MSN_InternalIMConversation},
			#{MSN_FederatedIMConversation}
		)
    </insert>
    
    <update id="updateUserMSNInfo" parameterType="cmap">
  	    UPDATE SYS_OBJECT_USER_MESSENGER 
		SET
			MSN_POOLSERVERNAME = #{MSN_PoolServerName},
			MSN_POOLSERVERDN = #{MSN_PoolServerDN},
			MSN_SIPADDRESS = #{MSN_SIPAddress},
			MSN_ANONMY = #{MSN_Anonmy},
			MSN_MEETINGPOLICYNAME = #{MSN_MeetingPolicyName},
			MSN_MEETINGPOLICYDN = #{MSN_MeetingPolicyDN},
			MSN_PHONECOMMUNICATION = #{MSN_PhoneCommunication},
			MSN_PBX = #{MSN_PBX},
			MSN_LINEPOLICYNAME = #{MSN_LinePolicyName},
			MSN_LINEPOLICYDN = #{MSN_LinePolicyDN},
			MSN_LINEURI = #{MSN_LineURI},
			MSN_LINESERVERURI = #{MSN_LineServerURI},
			MSN_FEDERATION = #{MSN_Federation},
			MSN_REMOTEACCESS = #{MSN_RemoteAccess},
			MSN_PUBLICIMCONNECTIVITY = #{MSN_PublicIMConnectivity},
			MSN_INTERNALIMCONVERSATION = #{MSN_InternalIMConversation},
			MSN_FEDERATEDIMCONVERSATION = #{MSN_FederatedIMConversation}
		WHERE USERID = #{UserCode}
	</update>
	
    <!-- 상위 폴더의 DomainID와 MenuID 조회  - for insert -->
    <select id="selectDomainMenuID" parameterType="cmap" resultType="cmap">
        SELECT
        	  DomainID AS "DomainID"
        	, MenuID AS "MenuID"
        FROM SYS_OBJECT_FOLDER
        WHERE FolderID = #{MemberOf}
    </select>
    
    <!-- SortKey 조회 - for insert -->
    <select id="selectSortKey" parameterType="cmap" resultType="java.lang.String">
        SELECT
        	NVL((
        		SELECT MAX(SortKey)
	        	FROM SYS_OBJECT_FOLDER
	        	WHERE MemberOf = #{MemberOf}
	        	AND DeleteDate IS NULL
	        ) + 1, 0) AS SortKey
	    FROM DUAL
    </select>
    
    <!-- 부서 우선 순위 가져오기  -->
	<select id="selectDeptSortKey" parameterType="cmap" resultType="cmap">
 	    SELECT 
 	    	  SortKey AS "SortKey"
			, SortPath AS "SortPath"
 	    FROM SYS_OBJECT_GROUP
 	    WHERE GroupCode = #{TargetCode}
 	</select>
    
	<!-- 부서 우선 순위 변경 -->
    <update id="updateDeptSortKey" parameterType="cmap" >
 		UPDATE SYS_OBJECT_GROUP
 		SET
 			SortKey = #{TargetSortKey},
 		    SortPath = #{TargetSortPath}
 		WHERE GroupCode = #{TargetCode}
 	</update>
 	
    <!-- 하위 부서 우선 순위 변경 -->
    <update id="updateDeptChildSortKey" parameterType="cmap" >
 		UPDATE SYS_OBJECT_GROUP
 		SET SortPath = REPLACE(SortPath, #{CurrentSortPath}, #{TargetSortPath})
 		WHERE GroupPath LIKE '%;'||#{TargetCode}||';%'
 	</update>

    <!-- 사용자 우선 순위 가져오기  -->
	<select id="selectUserSortKey" parameterType="cmap" resultType="cmap">
 	    SELECT SortKey AS "SortKey"
 	    FROM SYS_OBJECT_USER
 	    WHERE UserCode = #{TargetCode}
 	</select>
    
   	<!-- 사용자 우선 순위 변경 -->
    <update id="updateUserSortKey" parameterType="cmap" >
 		UPDATE SYS_OBJECT_USER
 		SET SortKey = #{TargetSortKey}
 		WHERE UserCode = #{TargetCode}
 	</update>
    
	<update id="updateDeptPathInfo" parameterType="cmap">
        UPDATE SYS_OBJECT_GROUP
        SET 
        	OUPATH = #{OUPath},
        	GROUPPATH = #{GroupPath},
        	SORTPATH =	#{SortPath}
        WHERE GROUPCODE = #{GroupCode}
    </update>
    
	<!-- 사용자 소속 그룹 명칭 변경 -->
	<update id="updateUserGroupName" parameterType="cmap">
		UPDATE SYS_OBJECT_USER_BASEGROUP
		SET 
		<if test='GroupType.equalsIgnoreCase("JobTitle")'>
			JobTitleName = #{DisplayName}, 
			MultiJobTitleName = #{MultiDisplayName},
			JobTitleSortKey = #{SortKey}
		</if>
		<if test='GroupType.equalsIgnoreCase("JobPosition")'>
			JobPositionName = #{DisplayName}, 
			MultiJobPositionName = #{MultiDisplayName},
			JobPositionSortKey = #{SortKey}
		</if>
		<if test='GroupType.equalsIgnoreCase("JobLevel")'>
			JobLevelName = #{DisplayName}, 
			MultiJobLevelName = #{MultiDisplayName},
			JobLevelSortKey = #{SortKey}
		</if>
		<if test='GroupType.equalsIgnoreCase("Dept")'>
			DeptName = #{DisplayName}, 
			MultiDeptName = #{MultiDisplayName},
			DeptSortKey = #{SortKey}
		</if>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			1 = 0    
			<if test='GroupType.equalsIgnoreCase("JobTitle")'>
				OR JobTitleCode = #{GroupCode}
			</if>
			<if test='GroupType.equalsIgnoreCase("JobPosition")'>
				OR JobPositionCode = #{GroupCode}
			</if>
			<if test='GroupType.equalsIgnoreCase("JobLevel")'>
				OR JobLevelCode = #{GroupCode}
			</if>
			<if test='GroupType.equalsIgnoreCase("Dept")'>
				OR DeptCode = #{GroupCode}
			</if>
		</trim>
	</update>
	
	<select id="getIsSyncProgress" parameterType="cmap" resultType="java.lang.String">
		SELECT SettingValue FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsSyncProgress'
	</select>
	
	<update id="updateSyncProgress" parameterType="cmap">
		UPDATE SYS_BASE_CONFIG SET SettingValue = #{syncStatus} WHERE SETTINGKEY = 'IsSyncProgress'
	</update>
	
	<select id="getIsSyncList" parameterType="cmap" resultType="cmap">
		SELECT 
			(SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsSyncDB' AND DOMAINID = '0') AS "IsSyncDB",
			(SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsSyncIndi' AND DOMAINID = '0') AS "IsSyncIndi",
			(SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsSyncAD' AND DOMAINID = '0') AS "IsSyncAD",
			(SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsSyncMail' AND DOMAINID = '0') AS "IsSyncMail",
			(SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsSyncMessenger' AND DOMAINID = '0') AS "IsSyncMessenger",
			(SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsDeptSync' AND DOMAINID = '0') AS "IsDeptSync",
            (SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsJobPositionSync' AND DOMAINID = '0') AS "IsJobPositionSync",
            (SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsJobLevelSync' AND DOMAINID = '0') AS "IsJobLevelSync",
            (SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsJobTitleSync' AND DOMAINID = '0') AS "IsJobTitleSync",
            (SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsUserSync' AND DOMAINID = '0') AS "IsUserSync",
            (SELECT SETTINGVALUE FROM SYS_BASE_CONFIG WHERE SETTINGKEY = 'IsAddJobSync' AND DOMAINID = '0') AS "IsAddJobSync"
		FROM DUAL
	</select>
	
	<!-- 부서 일정 관련 -->
	<insert id="insertDeptSchedule" parameterType="cmap">
		INSERT INTO SYS_OBJECT_SCHEDULECREATION (
			GroupCode,CompanyCode,MenuID,FolderType,DisplayName,MultiDisplayName,OwnerCode,CreateYN
		) 
		VALUES (
			#{GroupCode},#{CompanyCode},#{MenuID},#{FolderType},#{DisplayName},#{MultiDisplayName},#{OwnerCode},#{CreateYN}
		)
    </insert>
    
	<select id="selectDeptSchedule" parameterType="cmap" resultType="cmap">
 	    SELECT
 	    	  sod.DomainID AS "DomainID"
 	    	, sos.GroupCode AS "GroupCode"
			, sos.CompanyCode AS "CompanyCode"
			, sos.MenuID AS "MenuID"
			, sos.FolderType AS "FolderType"
			, sos.DisplayName AS "DisplayName"
			, sos.MultiDisplayName AS "MultiDisplayName"
			, sos.OwnerCode AS "OwnerCode"
			, sos.CreateYN AS "CreateYN"
 	    FROM SYS_OBJECT_SCHEDULECREATION AS sos
 	    LEFT JOIN SYS_OBJECT_DOMAIN AS sod ON sos.CompanyCode = sod.DomainCode
 	    WHERE CreateYN = 'N'
 	</select>
    
    <update id="updateDeptSchedule" parameterType="cmap">
		UPDATE SYS_OBJECT_SCHEDULECREATION SET CreateYN = #{CreateYN} WHERE GroupCode = #{GroupCode}
	</update>
	
	<!-- 일정 폴더 수정 -->
    <select id="selectFolderID" parameterType="cmap" resultType="java.lang.String">
    	SELECT FolderID FROM SYS_OBJECT_FOLDER WHERE Reserved5 = #{GroupCode}
    </select>
    
    <select id="selectFolderChildList" parameterType="cmap" resultType="cmap">
	 	SELECT a.FolderID AS "FolderID",  a.Reserved5 AS "Reserved5"
	 	FROM SYS_OBJECT_FOLDER a 
		INNER JOIN SYS_OBJECT_GROUP b ON a.Reserved5 = b.GroupCode
		WHERE a.Foldertype = 'Schedule'
		AND b.Grouppath LIKE '%'||#{GroupCode}||'%'
		AND b.IsUse = 'Y'
		ORDER BY b.SortPath
	</select>
    
    <update id="updateFolderData" parameterType="cmap">
    	UPDATE SYS_OBJECT_FOLDER 
		SET 
			DisplayName = #{DisplayName},
			MultiDisplayName = #{MultiDisplayName},
			Sortkey = #{SortKey},
			ModifyDate = SYSDATE
		WHERE reserved5 = #{GroupCode}
    </update>

	<!-- 권한 관리 -->
	<select id="selectAuthorityList" parameterType="cmap" resultType="cmap">
		<include refid="oracle.include.pagingHeader" />
		<![CDATA[
		SELECT
			  dn.GroupCode AS "DomainCode"
			, dn.MultiDisplayName AS "MultiDomainCode"
			, gr.GroupCode AS "GroupCode"
			, gr.GroupType AS "GroupType"
			, gr.DisplayName AS "GroupName"
			, gr.MultiDisplayName AS "MultiGroupName"
			, dn.DisplayName AS "DomainName"
			, gr.PrimaryMail AS "PrimaryMail"
			, gr.MemberOf AS "MemberOf"
			, gr.SortKey AS "SortKey"
			, gr.GroupID AS "GroupID"
			, gr.IsUse AS "IsUse"
			, gr.IsHR AS "IsHR"
			, gr.IsMail AS "IsMail"
			, (SELECT COUNT(0) FROM SYS_OBJECT_GROUP self WHERE self.MemberOf =gr.GroupCode AND self.IsUse = 'Y') AS "hasChild"
			, gr.Description AS "Description"
	    FROM sys_object_group gr
			LEFT JOIN sys_object_group dn ON gr.CompanyCode = dn.GroupCode
		]]>
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			AND (gr.MemberOf != 'NOUSE' OR gr.MemberOf is null)
			AND (gr.MemberOf != 'NOUNIT' OR gr.MemberOf is null)
			AND gr.GroupType = 'Authority'
			<if test="domaincode != null">
				AND gr.CompanyCode = #{domaincode}
			</if>
			<if test="IsUse != null  and IsUse != 'All'.toString()">
				AND gr.IsUse = #{IsUse}
			</if>
			<if test="IsMail != null  and IsMail != 'All'.toString()">
				AND gr.IsMail = #{IsMail}
			</if>
		</trim>
	    <trim prefix="ORDER BY">
			<if test="sortColumn != null and sortDirection != null">
				<choose>
					<when test='sortColumn.equalsIgnoreCase("GroupCode")'>GroupCode</when>
					<when test='sortColumn.equalsIgnoreCase("GroupName")'>GroupName</when>
					<when test='sortColumn.equalsIgnoreCase("IsUse")'>IsUse</when>
					<when test='sortColumn.equalsIgnoreCase("Description")'>Description</when>
					<when test='sortColumn.equalsIgnoreCase("SetUser")'>SetUser</when>
					<otherwise>(gr.SortKey + 0)</otherwise>
				</choose>
				<choose>
					<when test='sortDirection.equalsIgnoreCase("ASC")'> ASC</when>
					<otherwise> DESC</otherwise>
				</choose>
			</if> 
			<if test="sortColumn == null or sortDirection == null">
		 		(gr.SortKey + 0) ASC
		    </if>
		</trim>
		<include refid="oracle.include.pagingFooter" />
	</select>
	
	<select id="selectAuthorityListCnt" parameterType="cmap" resultType="java.lang.Long">
	    <![CDATA[
		SELECT COUNT(*) 
	    FROM SYS_OBJECT_GROUP gr
	    ]]>
	    <trim prefix="WHERE" prefixOverrides="AND |OR ">
			AND gr.GroupType = 'Authority'
			<if test="domaincode != null">
				AND gr.CompanyCode = #{domaincode}
			</if>
			<if test="IsUse != null  and IsUse != 'All'.toString()">
				AND gr.IsUse = #{IsUse}
			</if>
			<if test="IsMail != null  and IsMail != 'All'.toString()">
				AND gr.IsMail = #{IsMail}
			</if>
		</trim>
    </select>
    
    <select id="selectDomainID" parameterType="cmap" resultType="cmap">
    	SELECT 
    		DomainID, DisplayName, MultiDisplayName, 
    		DomainID||'_Authority' AS MemberOf,
    		(SELECT DisplayName FROM SYS_OBJECT_GROUP WHERE GroupCode = DomainID||'_Authority') AS GroupName
    	FROM SYS_OBJECT_DOMAIN
    	WHERE DomainCode = #{domainCode}
    </select>
    
    <select id="selectAuthorituinfo" parameterType="cmap" resultType="cmap">
    	SELECT 
    		  dn.DomainCode AS "CompanyCode"
			, dn.MultiDisplayName AS "MultiDomainName"
			, gr.GroupCode AS "GroupCode"
			, gr.GroupType AS "GroupType"
			, gr.DisplayName AS "DisplayName"
			, gr.MultiDisplayName AS "MultiDisplayName"
			, dn.DisplayName AS "DomainName"
			, gr.PrimaryMail AS "PrimaryMail"
			, gr.MemberOf AS "MemberOf"
			, gr.SortKey AS "SortKey"
			, gr.GroupID AS "GroupID"
			, gr.IsUse AS "IsUse"
			, gr.IsHR AS "IsHR"
			, gr.IsMail AS "IsMail"
			, gr.Description AS "Description"
	    FROM SYS_OBJECT_GROUP gr
	    INNER JOIN SYS_OBJECT_DOMAIN dn ON gr.CompanyCode = dn.DomainCode
	    WHERE gr.GroupType = 'Authority' 
	    AND gr.GroupCode = #{gr_code}
    </select>

    <!-- 전체퇴사방지 -->
    <select id="selectDeleteUserCount" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*) AS DeltCount FROM COVI_SYNCDATA.COMPARE_OBJECT_USER WHERE SyncType = 'DELETE'
	</select>
	
	<!-- 전체부서삭제방지 -->
    <select id="selectDeleteDeptCount" parameterType="cmap" resultType="java.lang.Long">
		SELECT COUNT(*) AS DeltCount FROM COVI_SYNCDATA.COMPARE_OBJECT_GROUP WHERE SyncType = 'DELETE' AND GroupType = 'Dept'
	</select>
	
	<!-- 동기화 대상 조회 쿼리. 변경비교하는 칼럼 및 필수칼럼만 가져옴 -->
    <select id="selectCompareObjectGroup" parameterType="cmap" resultType="cmap">
		SELECT 
			  A.SyncType AS "SyncType"
			, NVL(A.GroupCode,' ') AS "GroupCode"
			, NVL(A.CompanyCode,' ') AS "CompanyCode"
			, NVL(A.GroupType,' ') AS "GroupType"
			, NVL(A.MemberOf,' ') AS "MemberOf"
			, NVL(A.DisplayName,' ') AS "DisplayName"
			, NVL(DBMS_LOB.SUBSTR(A.MultiDisplayName, 4000, 1),' ') AS "MultiDisplayName"
			, NVL(A.SortKey, 1) AS "SortKey"
			, NVL(A.IsDisplay,' ') AS "IsDisplay"
			, NVL(A.IsMail,' ') AS "IsMail"
			, NVL(A.PrimaryMail,' ') AS "PrimaryMail"
			, NVL(DBMS_LOB.SUBSTR(A.SecondaryMail, 4000, 1),' ') AS "SecondaryMail"
			, NVL(A.ManagerCode,' ') AS "ManagerCode"
			, NVL(A.Reserved1,' ') AS "Reserved1"
			, NVL(A.Reserved2,' ') AS "Reserved2"
			, NVL(A.Reserved3,' ') AS "Reserved3"
			, NVL(A.Reserved4,' ') AS "Reserved4"
			, NVL(A.Reserved5,' ') AS "Reserved5"
			, NVL(B.GroupCode,' ') AS "GroupCode_Before"
			, NVL(B.CompanyCode,' ') AS "CompanyCode_Before"
			, NVL(B.GroupType,' ') AS "GroupType_Before"
			, NVL(B.MemberOf,' ') AS "MemberOf_Before"
			, NVL(B.DisplayName,' ') AS "DisplayName_Before"
			, NVL(DBMS_LOB.SUBSTR(B.MultiDisplayName, 4000, 1),' ') AS "MultiDisplayName_Before"
			, NVL(B.SortKey, 1) AS "SortKey_Before"
			, NVL(B.IsDisplay,' ') AS "IsDisplay_Before"
			, NVL(B.IsMail,' ') AS "IsMail_Before"
			, NVL(B.PrimaryMail,' ') AS "PrimaryMail_Before"
			, NVL(DBMS_LOB.SUBSTR(B.SecondaryMail, 4000, 1),' ') AS "SecondaryMail_Before"
			, NVL(B.ManagerCode,' ') AS "ManagerCode_Before"
			, NVL(B.Reserved1,' ') AS "Reserved1_Before"
			, NVL(B.Reserved2,' ') AS "Reserved2_Before"
			, NVL(B.Reserved3,' ') AS "Reserved3_Before"
			, NVL(B.Reserved4,' ') AS "Reserved4_Before"
			, NVL(B.Reserved5,' ') AS "Reserved5_Before"
		FROM COVI_SYNCDATA.COMPARE_OBJECT_GROUP A
		LEFT OUTER JOIN SYS_OBJECT_GROUP B ON (A.GROUPCODE = B.GROUPCODE)
	</select>
	
	<select id="selectCompareObjectUser" parameterType="cmap" resultType="cmap">
		SELECT 
			  A.SyncType AS "SyncType"
			, NVL(A.UserCode,' ') AS "UserCode"
			, NVL(A.LogonID,' ') AS "LogonID"
			, NVL(A.EmpNo,' ') AS "EmpNo"
			, NVL(A.DisplayName,' ') AS "DisplayName"
			, NVL(A.CompanyCode,' ') AS "CompanyCode"
			, NVL(A.DeptCode,' ') AS "DeptCode"
			, NVL(A.JobTitleCode,' ') AS "JobTitleCode"
			, NVL(A.JobPositionCode,' ') AS "JobPositionCode"
			, NVL(A.JobLevelCode,' ') AS "JobLevelCode"
			, NVL(A.RegionCode,' ') AS "RegionCode"
			, NVL(A.SortKey, 1) AS "SortKey"
			, NVL(A.IsDisplay,' ') AS "IsDisplay"
			, NVL(A.EnterDate,' ') AS "EnterDate"
			, NVL(A.RetireDate,' ') AS "RetireDate"
			, NVL(A.BirthDiv,' ') AS "BirthDiv"
			, NVL(A.BirthDate,' ') AS "BirthDate"
			, NVL(A.MailAddress,' ') AS "MailAddress"
			, NVL(A.ExternalMailAddress,' ') AS "ExternalMailAddress"
			, NVL(A.ChargeBusiness,' ') AS "ChargeBusiness"
			, NVL(A.PhoneNumberInter,' ') AS "PhoneNumberInter"
			, NVL(A.PhoneNumber,' ') AS "PhoneNumber"
			, NVL(A.Mobile,' ') AS "Mobile"
			, NVL(A.Fax,' ') AS "Fax"
			, NVL(A.Reserved1,' ') AS "Reserved1"
			, NVL(A.Reserved2,' ') AS "Reserved2"
			, NVL(A.Reserved3,' ') AS "Reserved3"
			, NVL(A.Reserved4,' ') AS "Reserved4"
			, NVL(A.Reserved5,' ') AS "Reserved5"
			, NVL(B.UserCode,' ') AS "UserCode_Before"
			, NVL(B.LogonID,' ') AS "LogonID_Before"
			, NVL(B.EmpNo,' ') AS "EmpNo_Before"
			, NVL(B.DisplayName,' ') AS "DisplayName_Before"
			, NVL(C.CompanyCode,' ') AS "CompanyCode_Before"
			, NVL(C.DeptCode,' ') AS "DeptCode_Before"
			, NVL(C.JobTitleCode,' ') AS "JobTitleCode_Before"
			, NVL(C.JobPositionCode,' ') AS "JobPositionCode_Before"
			, NVL(C.JobLevelCode,' ') AS "JobLevelCode_Before"
			, NVL(C.RegionCode,' ') AS "RegionCode_Before"
			, NVL(B.SortKey, 1) AS "SortKey_Before"
			, NVL(B.IsDisplay,' ') AS "IsDisplay_Before"
			, NVL(B.EnterDate,' ') AS "EnterDate_Before"
			, NVL(B.RetireDate,' ') AS "RetireDate_Before"
			, NVL(B.BirthDiv,' ') AS "BirthDiv_Before"
			, NVL(B.BirthDate,' ') AS "BirthDate_Before"
			, NVL(B.MailAddress,' ') AS "MailAddress_Before"
			, NVL(B.ExternalMailAddress,' ') AS "ExternalMailAddress_Before"
			, NVL(B.ChargeBusiness,' ') AS "ChargeBusiness_Before"
			, NVL(B.PhoneNumberInter,' ') AS "PhoneNumberInter_Before"
			, NVL(B.PhoneNumber,' ') AS "PhoneNumber_Before"
			, NVL(B.Mobile,' ') AS "Mobile_Before"
			, NVL(B.Fax,' ') AS "Fax_Before"
			, NVL(B.Reserved1,' ') AS "Reserved1_Before"
			, NVL(B.Reserved2,' ') AS "Reserved2_Before"
			, NVL(B.Reserved3,' ') AS "Reserved3_Before"
			, NVL(B.Reserved4,' ') AS "Reserved4_Before"
			, NVL(B.Reserved5,' ') AS "Reserved5_Before"
			, NVL(A.LicSeq,' ') AS "LicSeq"
			, NVL(B.LicSeq,' ') AS "LicSeq_Before"
		FROM COVI_SYNCDATA.COMPARE_OBJECT_USER A
		LEFT OUTER JOIN SYS_OBJECT_USER B ON (A.UserCode = B.UserCode)
		LEFT OUTER JOIN SYS_OBJECT_USER_BASEGROUP C ON (B.UserCode = C.UserCode AND C.JobType = 'Origin')
	</select>
	
	<select id="selectCompareObjectAddjob" parameterType="cmap" resultType="cmap">
		SELECT 
			  SyncType AS "SyncType"
			, NVL(UserCode,' ') AS "UserCode"
			, NVL(JobType,' ') AS "JobType"
			, NVL(CompanyCode,' ') AS "CompanyCode"
			, NVL(DeptCode,' ') AS "DeptCode"
			, NVL(JobTitleCode,' ') AS "JobTitleCode"
			, NVL(JobPositionCode,' ') AS "JobPositionCode"
			, NVL(JobLevelCode,' ') AS "JobLevelCode"
			, NVL(RegionCode,' ') AS "RegionCode"
			, NVL(SortKey, 1) AS "SortKey"
			, NVL(Reserved1,' ') AS "Reserved1"
			, NVL(Reserved2,' ') AS "Reserved2"
			, NVL(Reserved3,' ') AS "Reserved3"
			, NVL(Reserved4,' ') AS "Reserved4"
			, NVL(Reserved5,' ') AS "Reserved5"
		FROM COVI_SYNCDATA.COMPARE_OBJECT_ADDJOB
	</select>
	
</mapper>